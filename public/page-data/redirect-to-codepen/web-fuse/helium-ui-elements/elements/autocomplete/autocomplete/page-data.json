{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/autocomplete/autocomplete","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import autocomplete from './autocomplete.css';\\nimport inputCss from '../common/styles/input.css';\\n\\nimport { componentUtils } from '../common/component-utils.js';\\nimport { html } from '../../library/html-utils.js';\\n\\nconst styles = [autocomplete, inputCss];\\n\\n(function () {\\n    class MCAutoComplete extends HTMLElement {\\n        constructor () {\\n            super();\\n            this.currentFocus = -1;\\n\\n            this._outsideDropDowEventHanlder = e => {\\n                if (this.dropDown) {\\n                    let target = e.composedPath()[0];\\n                    let targetParent = target.parentNode;\\n\\n                    if (target !== this.input &&\\n                    targetParent !== this.dropDown) {\\n                        this._removeDropDown();\\n                    }\\n                }\\n            };\\n        }\\n\\n        connectedCallback () {\\n            if (!this.shadowRoot) {\\n                this._render();\\n                this._attachEventHandlers();\\n            }\\n            this._attachDocumentHandlers();\\n            this.input.focus();\\n        }\\n\\n        disconnectedCallback () {\\n            this._removeDocumentHandlers();\\n        }\\n\\n        static get observedAttributes () {\\n            return ['placeholder', 'error-message'];\\n        }\\n\\n        attributeChangedCallback (name, oldValue, newValue) {\\n            if (!this.shadowRoot) {\\n                return;\\n            }\\n            switch (name) {\\n            case 'placeholder': {\\n                this.input.setAttribute('placeholder', newValue);\\n                break;\\n            }\\n            case 'error-message': {\\n                if (newValue) {\\n                    this._showError(newValue);\\n                } else {\\n                    this._hideError();\\n                }\\n                break;\\n            }\\n            }\\n        }\\n\\n        _showError (newValue) {\\n            this.input.classList.add('error');\\n            this.errorMessage.classList.remove('mc-autocomplete-error-hidden');\\n            this.errorMessage.textContent = newValue;\\n        }\\n\\n        _hideError () {\\n            this.input.classList.remove('error');\\n            this.errorMessage.classList.add('mc-autocomplete-error-hidden');\\n            this.errorMessage.textContent = '';\\n        }\\n\\n        get items () {\\n            return this._items !== undefined ? this._items : [];\\n        }\\n\\n        set items (value) {\\n            this._items = value;\\n        }\\n\\n        get input () {\\n            return this.shadowRoot.getElementById('autocompletable-input');\\n        }\\n\\n        get dropDown () {\\n            return this.shadowRoot.getElementById('drop-down-list');\\n        }\\n\\n        get errorString () {\\n            this.getAttribute('error-message');\\n        }\\n\\n        set errorString (value) {\\n            this.setAttribute('error-message', value);\\n        }\\n\\n        get placeholder () {\\n            return this.getAttribute('placeholder');\\n        }\\n\\n        get errorMessage () {\\n            return this.shadowRoot.getElementById('mc-autocomplete-error-message');\\n        }\\n\\n        _removeDropDown () {\\n            if (this.dropDown) {\\n                this.dropDown.parentNode.removeChild(this.dropDown);\\n            }\\n        }\\n\\n        _render () {\\n            const template = document.createElement('template');\\n            template.innerHTML = html`<div class=\\\"mc-autocomplete\\\">\\n                        <input id=\\\"autocompletable-input\\\" placeholder=\\\"${this.placeholder}\\\" class=\\\"mc-input ${this.errorString ? 'error' : ''}\\\"  type=\\\"text\\\">\\n                        <div id=\\\"mc-autocomplete-error-message\\\" class=\\\"${this.errorString ? '' : 'mc-autocomplete-error-hidden'}\\\">${this.errorString}</div>\\n                    </div>`;\\n            this.attachShadow({ mode: 'open' });\\n\\n            componentUtils.addStylesToElement(this.shadowRoot, styles);\\n\\n            this.shadowRoot.appendChild(template.content.cloneNode(true));\\n        }\\n\\n        _createDropDownItem (itemValue, inputValue) {\\n            let matchingString = itemValue.substr(0, inputValue.length);\\n            let remainingString = itemValue.substr(inputValue.length);\\n\\n            let listItem = document.createElement('DIV');\\n            listItem.innerHTML = html`<span><strong>${matchingString}</strong>${remainingString}</span>\\n                                      <input type=\\\"hidden\\\" value=\\\"${itemValue}\\\">`;\\n            let that = this;\\n            listItem.addEventListener('click', function (e) {\\n                that.input.value = this.getElementsByTagName('input')[0].value;\\n                that._removeDropDown();\\n                that._submitInput();\\n                that.input.focus();\\n            });\\n            return listItem;\\n        }\\n\\n        _createDropDown (inputValue) {\\n            let dropDown = document.createElement('DIV');\\n            dropDown.setAttribute('id', 'drop-down-list');\\n            dropDown.setAttribute('class', 'mc-autocomplete-items');\\n\\n            let i = 0;\\n            let hasItems = false;\\n            for (i = 0; i < this.items.length; i++) {\\n                let itemValue = this.items[i];\\n                if (this._match(itemValue, inputValue)) {\\n                    hasItems = true;\\n                    let listItem = this._createDropDownItem(itemValue, inputValue);\\n                    dropDown.appendChild(listItem);\\n                }\\n            }\\n\\n            if (hasItems) {\\n                this.input.parentNode.appendChild(dropDown);\\n            }\\n        }\\n\\n        _match (item, inputValue) {\\n            return item.substr(0, inputValue.length).toUpperCase() === inputValue.toUpperCase();\\n        }\\n\\n        _removeDocumentHandlers () {\\n            document.removeEventListener('click', this._outsideDropDowEventHanlder);\\n        }\\n\\n        _attachDocumentHandlers () {\\n            document.addEventListener('click', this._outsideDropDowEventHanlder);\\n        }\\n\\n        _attachEventHandlers () {\\n            this.input.addEventListener('input', (e) => {\\n                this._hideError();\\n                this._removeDropDown();\\n                let val = this.input.value;\\n                if (!val) {\\n                    return false;\\n                }\\n                this.currentFocus = -1;\\n                this._createDropDown(val);\\n            });\\n\\n            this.input.addEventListener('keydown', (e) => {\\n                if ([40, 38, 13].includes(e.keyCode)) {\\n                    e.stopPropagation();\\n                }\\n\\n                if (this.dropDown) {\\n                    let listItems = this.dropDown.getElementsByTagName('div');\\n\\n                    if (e.keyCode === 40) { // down\\n                        this.currentFocus++;\\n                        this._markSelected(listItems);\\n                    } else if (e.keyCode === 38) { // up\\n                        this.currentFocus--;\\n                        this._markSelected(listItems);\\n                    } else if (e.keyCode === 13) { // ENTER\\n                        if (this.currentFocus > -1) {\\n                            if (listItems) {\\n                                listItems[this.currentFocus].click();\\n                            }\\n                        } else {\\n                            this._removeDropDown();\\n                            this._submitInput();\\n                        }\\n                    }\\n                } else if (e.keyCode === 13) { // ENTER\\n                    this._submitInput();\\n                }\\n            });\\n        }\\n\\n        clear () {\\n            this.input.value = '';\\n        }\\n\\n        _submitInput () {\\n            if (this.input.value !== '') {\\n                this.dispatchEvent(new CustomEvent('input-submitted', { detail: { value: this.input.value } }));\\n            }\\n        }\\n\\n        _markSelected (listItems) {\\n            if (!listItems) {\\n                return false;\\n            }\\n            this._unmarkAll(listItems);\\n            if (this.currentFocus >= listItems.length) {\\n                this.currentFocus = 0;\\n            }\\n            if (this.currentFocus < 0) {\\n                this.currentFocus = (listItems.length - 1);\\n            }\\n            listItems[this.currentFocus].classList.add('mc-autocomplete-active');\\n        }\\n\\n        _unmarkAll (listItems) {\\n            for (let i = 0; i < listItems.length; i++) {\\n                listItems[i].classList.remove('mc-autocomplete-active');\\n            }\\n        }\\n    }\\n\\n    componentUtils.registerCustomElement('mc-autocomplete', MCAutoComplete);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}