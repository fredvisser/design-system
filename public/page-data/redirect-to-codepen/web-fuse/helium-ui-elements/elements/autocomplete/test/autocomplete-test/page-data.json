{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/autocomplete/test/autocomplete-test","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../autocomplete.js';\\n\\nimport { createFixture, isVisible, pressKey } from '../../test/test-utils.js';\\nimport { AutocompletePage } from './autocomplete-page.js';\\n\\ndescribe('Autocomplete', () => {\\n    beforeEach(function () {\\n        this.page = new AutocompletePage();\\n    });\\n\\n    describe('Initial state', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<mc-autocomplete placeholder='My Palceholder'></mc-autocomplete>`);\\n\\n            this.element.items = ['aaa', 'bbb', 'ccc', 'dddd'];\\n        });\\n\\n        it('should show input', function () {\\n            let input = this.page.getInput();\\n            expect(input).toBeTruthy();\\n            expect(isVisible(input)).toBeTruthy();\\n        });\\n\\n        it('should not have error message', function () {\\n            let error = this.page.getErrorMessage();\\n            expect(error).toBeTruthy();\\n            expect(isVisible(error)).toBeFalsy();\\n        });\\n\\n        it('should show placeholder', function () {\\n            let placeholder = this.page.getPlaceholder();\\n            expect(placeholder).toBe('My Palceholder');\\n        });\\n    });\\n\\n    describe('Error state', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<mc-autocomplete placeholder='My Palceholder'></mc-autocomplete>`);\\n\\n            this.page.setInputValue('bad value');\\n            this.element.setAttribute('error-message', 'Bad input bro.');\\n        });\\n\\n        it('should show error', function () {\\n            let error = this.page.getErrorMessage();\\n            expect(error).toBeTruthy();\\n            expect(isVisible(error)).toBeTruthy();\\n        });\\n\\n        it('should show error with expected mesage', function () {\\n            let error = this.page.getErrorMessage();\\n            expect(error.innerText).toBe('Bad input bro.');\\n        });\\n\\n        it('should hide error if typing', function () {\\n            let error = this.page.getErrorMessage();\\n            this.page.setInputValue('ab');\\n            expect(error).toBeTruthy();\\n            expect(isVisible(error)).toBeFalsy();\\n        });\\n    });\\n\\n    describe('drop down', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<mc-autocomplete placeholder='My Palceholder'></mc-autocomplete>`);\\n            this.element.items = ['aaa', 'aac', 'acc', 'bbb', 'ccc', 'dddd'];\\n        });\\n\\n        it('should not show drop down when typing if there is no match', function () {\\n            this.page.setInputValue('xx');\\n            let dropDown = this.page.getDropDown();\\n            expect(dropDown).toBeFalsy();\\n        });\\n\\n        it('should show drop down and matched items when typing', function () {\\n            this.page.setInputValue('aa');\\n            let dropItems = this.page.getDropDownItems();\\n\\n            expect(dropItems.length).toBe(2);\\n            expect(isVisible(dropItems[0])).toBeTruthy();\\n            expect(isVisible(dropItems[1])).toBeTruthy();\\n        });\\n\\n        it('should show drop down when typing and have matched elements', function () {\\n            this.page.setInputValue('aa');\\n            let dropItems = this.page.getDropDownItems();\\n            expect(dropItems[0].innerText).toBe('aaa');\\n            expect(dropItems[1].innerText).toBe('aac');\\n        });\\n\\n        it('should submit when clicking an item', function () {\\n            this.page.setInputValue('aa');\\n\\n            let value, triggered;\\n            this.element.addEventListener('input-submitted', (evt) => {\\n                triggered = true;\\n                value = evt.detail.value;\\n            });\\n\\n            this.page.clickDropDownItem(1);\\n\\n            expect(triggered).toBeTruthy();\\n            expect(value).toBeTruthy('aac');\\n        });\\n    });\\n\\n    describe('Up down Keys', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<mc-autocomplete placeholder='My Palceholder'></mc-autocomplete>`);\\n            this.element.items = ['aaa', 'aac', 'acc', 'bbb', 'ccc', 'dddd'];\\n        });\\n\\n        it('should higlight selected item in drop down (down, down)', function () {\\n            this.page.setInputValue('a');\\n            let dropItems = this.page.getDropDownItems();\\n            pressKey(this.page.getInput(), 'Down');\\n            pressKey(this.page.getInput(), 'Down');\\n\\n            expect(dropItems[0].classList.value.includes('autocomplete-active')).toBeFalsy();\\n            expect(dropItems[1].classList.value.includes('autocomplete-active')).toBeTruthy();\\n            expect(dropItems[2].classList.value.includes('autocomplete-active')).toBeFalsy();\\n        });\\n\\n        it('should higlight selected item in drop down (down)', function () {\\n            this.page.setInputValue('a');\\n            let dropItems = this.page.getDropDownItems();\\n            pressKey(this.page.getInput(), 'Down');\\n\\n            expect(dropItems[0].classList.value.includes('autocomplete-active')).toBeTruthy();\\n            expect(dropItems[1].classList.value.includes('autocomplete-active')).toBeFalsy();\\n            expect(dropItems[2].classList.value.includes('autocomplete-active')).toBeFalsy();\\n        });\\n\\n        it('should higlight selected item in drop down (up)', function () {\\n            this.page.setInputValue('a');\\n            let dropItems = this.page.getDropDownItems();\\n            pressKey(this.page.getInput(), 'UP');\\n\\n            expect(dropItems[0].classList.value.includes('autocomplete-active')).toBeFalsy();\\n            expect(dropItems[1].classList.value.includes('autocomplete-active')).toBeFalsy();\\n            expect(dropItems[2].classList.value.includes('autocomplete-active')).toBeFalsy();\\n        });\\n\\n        it('should higlight selected item in drop down (down, down, up)', function () {\\n            this.page.setInputValue('a');\\n            let dropItems = this.page.getDropDownItems();\\n            pressKey(this.page.getInput(), 'Down');\\n            pressKey(this.page.getInput(), 'Down');\\n            pressKey(this.page.getInput(), 'Up');\\n\\n            expect(dropItems[0].classList.value.includes('autocomplete-active')).toBeTruthy();\\n            expect(dropItems[1].classList.value.includes('autocomplete-active')).toBeFalsy();\\n            expect(dropItems[2].classList.value.includes('autocomplete-active')).toBeFalsy();\\n        });\\n\\n        it('should higlight selected item in drop down (down, down, down, down)', function () {\\n            this.page.setInputValue('a');\\n            let dropItems = this.page.getDropDownItems();\\n            pressKey(this.page.getInput(), 'Down');\\n            pressKey(this.page.getInput(), 'Down');\\n            pressKey(this.page.getInput(), 'Down');\\n            pressKey(this.page.getInput(), 'Down');\\n\\n            expect(dropItems[0].classList.value.includes('autocomplete-active')).toBeTruthy();\\n            expect(dropItems[1].classList.value.includes('autocomplete-active')).toBeFalsy();\\n            expect(dropItems[2].classList.value.includes('autocomplete-active')).toBeFalsy();\\n        });\\n    });\\n\\n    describe('Enter key', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<mc-autocomplete placeholder='My Palceholder'></mc-autocomplete>`);\\n            this.element.items = ['aaa', 'aac', 'acc', 'bbb', 'ccc', 'dddd'];\\n        });\\n\\n        it('should trigger submit event with current value', function () {\\n            this.page.setInputValue('a');\\n            let value, triggered;\\n            this.element.addEventListener('input-submitted', (evt) => {\\n                triggered = true;\\n                value = evt.detail.value;\\n            });\\n\\n            pressKey(this.page.getInput(), 'Enter');\\n            expect(triggered).toBeTruthy();\\n            expect(value).toBeTruthy('a');\\n        });\\n\\n        it('should not clear input value', function () {\\n            this.page.setInputValue('a');\\n            pressKey(this.page.getInput(), 'Enter');\\n            let value = this.page.getInput().value;\\n            expect(value).toBe('a');\\n        });\\n\\n        it('should close drop down', function () {\\n            this.page.setInputValue('a');\\n            pressKey(this.page.getInput(), 'Enter');\\n            let dropDown = this.page.getDropDown();\\n            expect(dropDown).toBeFalsy();\\n        });\\n\\n        describe(' when dropdown item selected', () => {\\n            it('should trigger submit event', function () {\\n                this.page.setInputValue('a');\\n                let triggered;\\n                this.element.addEventListener('input-submitted', (evt) => {\\n                    triggered = true;\\n                });\\n                pressKey(this.page.getInput(), 'Down');\\n                pressKey(this.page.getInput(), 'Enter');\\n\\n                expect(triggered).toBeTruthy();\\n            });\\n\\n            it('should change input value to be the one of the selected drop down item', function () {\\n                this.page.setInputValue('a');\\n                pressKey(this.page.getInput(), 'Down');\\n                pressKey(this.page.getInput(), 'Enter');\\n\\n                expect(this.page.getInput().value).toBe('aaa');\\n            });\\n        });\\n    });\\n});\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}