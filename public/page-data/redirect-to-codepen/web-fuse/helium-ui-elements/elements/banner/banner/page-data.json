{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/banner/banner","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import buttonCss from '../common/styles/button.css';\\nimport bannerCss from './banner.css';\\n\\nimport { componentUtils } from '../common/component-utils.js';\\nimport { html } from '../../library/html-utils.js';\\n\\nconst styles = [buttonCss, bannerCss];\\n\\n(function () {\\n    class MCBanner extends HTMLElement {\\n        get visible () {\\n            return this.hasAttribute('visible');\\n        }\\n\\n        set visible (value) {\\n            if (value) {\\n                this.setAttribute('visible', '');\\n            } else {\\n                this.removeAttribute('visible');\\n            }\\n        }\\n\\n        get closeButtonText () {\\n            return this.getAttribute('close-button-text');\\n        }\\n\\n        static get observedAttributes () {\\n            return ['visible'];\\n        }\\n\\n        connectedCallback () {\\n            if (!this.shadowRoot) {\\n                this._render();\\n                this._attachEventHandlers();\\n            }\\n        }\\n\\n        attributeChangedCallback (name, oldValue, newValue) {\\n            if (!this.shadowRoot) {\\n                return;\\n            }\\n\\n            if (name === 'visible') {\\n                if (newValue === null) {\\n                    this._hideBanner();\\n                } else {\\n                    this._showBanner();\\n                }\\n            }\\n        }\\n\\n        _render () {\\n            const template = document.createElement('template');\\n            template.innerHTML =\\n                html`<div class=\\\"mc-banner-modal ${this.visible ? 'mc-banner-visible' : 'mc-banner-hidden'}\\\">\\n                    <div class=\\\"mc-banner-content\\\">\\n                        <div class='mc-banner-message'>\\n                            <slot name=\\\"content\\\"></slot>\\n                        </div>\\n\\n                        <div class='mc-banner-button-container'>\\n                            <button class='mc-button mc-banner-button-ok'>${this.closeButtonText}</button>\\n                        </div>\\n                    </div>\\n                </div>`;\\n\\n            this.attachShadow({ mode: 'open' });\\n\\n            componentUtils.addStylesToElement(this.shadowRoot, styles);\\n\\n            this.shadowRoot.appendChild(template.content.cloneNode(true));\\n        }\\n\\n        _attachEventHandlers () {\\n            let okButton = this._getOkButton();\\n            okButton.addEventListener('click', e => {\\n                if (this.dispatchEvent(new CustomEvent('banner-close', { cancelable: true }))) {\\n                    this.visible = false;\\n                    this._hideBanner();\\n                }\\n            });\\n        }\\n\\n        _getBanner () {\\n            return this.shadowRoot.querySelector('.mc-banner-modal');\\n        }\\n\\n        _showBanner () {\\n            let banner = this._getBanner();\\n            banner.classList.add('mc-banner-visible');\\n            banner.classList.remove('mc-banner-hidden');\\n        }\\n\\n        _hideBanner () {\\n            let banner = this._getBanner();\\n            banner.classList.remove('mc-banner-visible');\\n            banner.classList.add('mc-banner-hidden');\\n        }\\n\\n        _getOkButton () {\\n            return this.shadowRoot.querySelector('.mc-banner-button-ok');\\n        }\\n    }\\n\\n    componentUtils.registerCustomElement('mc-banner', MCBanner);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}