{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/dialog/dialog","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import buttonCss from '../common/styles/button.css';\\nimport inputCss from '../common/styles/input.css';\\nimport iconsCss from '../common/styles/icons.css';\\nimport dialogCss from './dialog.css';\\n\\nimport { componentUtils } from '../common/component-utils.js';\\nimport { html } from '../../library/html-utils.js';\\n\\nconst styles = [buttonCss, inputCss, dialogCss, iconsCss];\\n\\n(function () {\\n    class MCDialog extends HTMLElement {\\n        constructor () {\\n            super();\\n\\n            this._keyEventHandler = (event) => {\\n                switch (event.key) {\\n                case 'Enter': {\\n                    if (this.showLeft) {\\n                        this._leftClose();\\n                    } else if (this.showMiddle) {\\n                        this._middleClose();\\n                    } else if (this.showRight) {\\n                        this._rightClose();\\n                    }\\n                    break;\\n                }\\n                case 'Escape': {\\n                    this._rightClose();\\n                    break;\\n                }\\n                };\\n            };\\n        }\\n\\n        _initIcons () {\\n            this._getLeftIcon().innerText = this.iconLeft;\\n            this._getRightIcon().innerText = this.iconRight;\\n            this._getMiddleIcon().innerText = this.iconMiddle;\\n        }\\n\\n        get header () {\\n            return this.getAttribute('header');\\n        }\\n\\n        set header (value) {\\n            this.setAttribute('header', value);\\n        }\\n\\n        get position () {\\n            return this.getAttribute('position') || 'center';\\n        }\\n\\n        set position (value) {\\n            this.setAttribute('position', value);\\n        }\\n\\n        get textLeft () {\\n            return this.getAttribute('text-left-button');\\n        }\\n\\n        set textLeft (value) {\\n            this.setAttribute('text-left-button', value);\\n        }\\n\\n        get textMiddle () {\\n            return this.getAttribute('text-middle-button');\\n        }\\n\\n        set textMiddle (value) {\\n            this.setAttribute('text-middle-button', value);\\n        }\\n\\n        get textRight () {\\n            return this.getAttribute('text-right-button');\\n        }\\n\\n        set textRight (value) {\\n            this.setAttribute('text-right-button', value);\\n        }\\n\\n        get footerLinkText () {\\n            return this.getAttribute('text-footer-link') || '';\\n        }\\n\\n        set footerLinkText (value) {\\n            this.setAttribute('text-footer-link', value);\\n        }\\n\\n        get iconLeft () {\\n            return this.getAttribute('icon-left-button') || '';\\n        }\\n\\n        set iconLeft (value) {\\n            this.setAttribute('icon-left-button', value);\\n        }\\n\\n        get iconMiddle () {\\n            return this.getAttribute('icon-middle-button') || '';\\n        }\\n\\n        set iconMiddle (value) {\\n            this.setAttribute('icon-middle-button', value);\\n        }\\n\\n        get iconRight () {\\n            return this.getAttribute('icon-right-button') || '';\\n        }\\n\\n        set iconRight (value) {\\n            this.setAttribute('icon-right-button', value);\\n        }\\n\\n        get showLeft () {\\n            return this.getAttribute('show-left-button') === 'true';\\n        }\\n\\n        set showLeft (value) {\\n            this.setAttribute('show-left-button', value);\\n        }\\n\\n        get showMiddle () {\\n            return this.getAttribute('show-middle-button') !== 'false';\\n        }\\n\\n        set showMiddle (value) {\\n            this.setAttribute('show-middle-button', value);\\n        }\\n\\n        get showRight () {\\n            return this.getAttribute('show-right-button') !== 'false';\\n        }\\n\\n        set showRight (value) {\\n            this.setAttribute('show-right-button', value);\\n        }\\n\\n        get showInput () {\\n            return this.getAttribute('show-input') === 'true';\\n        }\\n\\n        set showInput (value) {\\n            this.setAttribute('show-input', value);\\n        }\\n\\n        get inputValue () {\\n            return this.getAttribute('input-value');\\n        }\\n\\n        set inputValue (value) {\\n            this.setAttribute('input-value', value);\\n        }\\n\\n        get errorMessage () {\\n            return this.getAttribute('error-message');\\n        }\\n\\n        set errorMessage (value) {\\n            this.setAttribute('error-message', value);\\n        }\\n\\n        get disabledLeftButton () {\\n            return this.getAttribute('disabled-left-button');\\n        }\\n\\n        set disabledLeftButton (value) {\\n            this.setAttribute('disabled-left-button', value);\\n        }\\n\\n        get disabledMiddleButton () {\\n            return this.getAttribute('disabled-middle-button');\\n        }\\n\\n        set disabledMiddleButton (value) {\\n            this.setAttribute('disabled-middle-button', value);\\n        }\\n\\n        get disabledRightButton () {\\n            return this.getAttribute('disabled-right-button');\\n        }\\n\\n        set disabledRightButton (value) {\\n            this.setAttribute('disabled-right-button', value);\\n        }\\n\\n        static get observedAttributes () {\\n            return [\\n                'header',\\n                'text-left-button',\\n                'text-middle-button',\\n                'text-right-button',\\n                'icon-left-button',\\n                'icon-middle-button',\\n                'icon-right-button',\\n                'show-left-button',\\n                'show-middle-button',\\n                'show-right-button',\\n                'show-input',\\n                'disabled-left-button',\\n                'disabled-middle-button',\\n                'disabled-right-button',\\n                'input-value',\\n                'error-message',\\n                'text-footer-link'\\n            ];\\n        }\\n\\n        connectedCallback () {\\n            if (!this.shadowRoot) {\\n                this._render();\\n                this._initIcons();\\n                this._attachEventHandlers();\\n            }\\n            this._focusElement();\\n            this._addDocumentHandler();\\n        }\\n\\n        disconnectedCallback () {\\n            this._removeDocumentHandler();\\n        }\\n\\n        attributeChangedCallback (name, oldValue, newValue) {\\n            if (!this.shadowRoot) {\\n                return;\\n            }\\n\\n            switch (name) {\\n            case 'header': {\\n                this._getHeader().textContent = newValue;\\n                break;\\n            }\\n            case 'text-left-button': {\\n                let leftButtonText = this._getLeftButtonText();\\n                leftButtonText.textContent = newValue || '';\\n                break;\\n            }\\n            case 'text-middle-button': {\\n                let middleButtonText = this._getMiddleButtonText();\\n                middleButtonText.textContent = newValue || '';\\n                break;\\n            }\\n            case 'text-right-button': {\\n                let rightButtonText = this._getRightButtonText();\\n                rightButtonText.textContent = newValue || '';\\n                break;\\n            }\\n            case 'text-footer-link': {\\n                let footer = this._getFooterLink();\\n                footer.textContent = newValue || '';\\n                break;\\n            }\\n            case 'icon-left-button': {\\n                let icon = this._getLeftIcon();\\n                icon.textContent = newValue ? newValue + '&nbsp;' : '';\\n                break;\\n            }\\n            case 'icon-middle-button': {\\n                let icon = this._getMiddleIcon();\\n                icon.textContent = newValue ? newValue + '&nbsp;' : '';\\n                break;\\n            }\\n            case 'icon-right-button': {\\n                let icon = this._getRightIcon();\\n                icon.textContent = newValue ? newValue + '&nbsp;' : '';\\n                break;\\n            }\\n            case 'show-left-button': {\\n                let button = this._getLeftButton();\\n                this._showElement(button, newValue !== 'false');\\n                break;\\n            }\\n            case 'show-middle-button': {\\n                let button = this._getMiddleButton();\\n                this._showElement(button, newValue !== 'false');\\n                break;\\n            }\\n            case 'show-right-button': {\\n                let button = this._getRightButton();\\n                this._showElement(button, newValue !== 'false');\\n                break;\\n            }\\n            case 'show-input': {\\n                let input = this._getInput();\\n                this._showElement(input, newValue === 'true');\\n                break;\\n            }\\n            case 'disabled-left-button': {\\n                let button = this._getLeftButton();\\n                this._disableElement(button, newValue === 'true');\\n                break;\\n            }\\n            case 'disabled-middle-button': {\\n                let button = this._getMiddleButton();\\n                this._disableElement(button, newValue === 'true');\\n                break;\\n            }\\n            case 'disabled-right-button': {\\n                let button = this._getRightButton();\\n                this._disableElement(button, newValue === 'true');\\n                break;\\n            }\\n            case 'input-value': {\\n                let input = this._getInput();\\n                input.value = newValue;\\n                break;\\n            }\\n            case 'error-message': {\\n                let input = this._getInput();\\n                let errorMessage = this._getErrorMessage();\\n                if (newValue) {\\n                    input.classList.add('error');\\n                    errorMessage.classList.remove('mc-dialog-hidden');\\n                    errorMessage.textContent = newValue;\\n                } else {\\n                    input.classList.remove('error');\\n                    errorMessage.classList.add('mc-dialog-hidden');\\n                    errorMessage.textContent = '';\\n                }\\n                break;\\n            }\\n            }\\n        }\\n\\n        _showElement (element, value) {\\n            if (value) {\\n                element.classList.remove('mc-dialog-hidden');\\n            } else {\\n                element.classList.add('mc-dialog-hidden');\\n            }\\n        }\\n\\n        _disableElement (element, value) {\\n            if (value) {\\n                element.setAttribute('disabled', 'true');\\n            } else {\\n                element.removeAttribute('disabled');\\n            }\\n        }\\n        _render () {\\n            let disabledLeftButton = this.disabledLeftButton ? 'disabled' : '';\\n            let disabledMiddleButton = this.disabledMiddleButton ? 'disabled' : '';\\n            let disabledRightButton = this.disabledRightButton ? 'disabled' : '';\\n\\n            const template = document.createElement('template');\\n            template.innerHTML =\\n                html`<div class=\\\"mc-dialog-modal mc-dialog-modal-${this.position}\\\">\\n                    <div class=\\\"mc-dialog-content mc-dialog-content-${this.position}\\\">\\n                        <div><h3 class=\\\"mc-dialog-header\\\">${this.header}</h3></div>\\n\\n                        <input class=\\\"mc-input ${this.errorMessage ? 'error' : ''} ${this.showInput ? '' : 'mc-dialog-hidden'}\\\" type=\\\"text\\\" value=\\\"${this.inputValue || ''}\\\">\\n                        <div class=\\\"mc-dialog-error-message ${this.errorMessage ? '' : 'mc-dialog-hidden'}\\\">${this.errorMessage}</div>\\n                        <slot name=\\\"content\\\"></slot>\\n\\n                        <div class='mc-dialog-button-container'>\\n                            <button ${disabledLeftButton} class='mc-button mc-dialog-button-left ${this.showLeft ? '' : 'mc-dialog-hidden'}'>\\n                                <strong class=\\\"fa\\\" id=\\\"mc-dialog-icon-left-button\\\"></strong>\\n                                <span id=\\\"mc-dialog-button-text-left\\\">${this.textLeft || ''}</span>\\n                            </button>\\n                            <button ${disabledMiddleButton} class='mc-button mc-dialog-button-middle ${this.showMiddle ? '' : 'mc-dialog-hidden'}'>\\n                                <strong class=\\\"fa\\\" id=\\\"mc-dialog-icon-middle-button\\\"></strong>\\n                                <span id=\\\"mc-dialog-button-text-middle\\\">${this.textMiddle || ''}</span>\\n                            </button>\\n                            <button ${disabledRightButton} class='mc-button mc-dialog-button-right ${this.showRight ? '' : 'mc-dialog-hidden'}'>\\n                                <strong class=\\\"fa\\\" id=\\\"mc-dialog-icon-right-button\\\"></strong>\\n                                <span id=\\\"mc-dialog-button-text-right\\\">${this.textRight || ''}</span>\\n                            </button>\\n                        </div>\\n                        <a id=\\\"mc-dialog-footer-link\\\">${this.footerLinkText}</a>\\n                    </div>\\n                </div>`;\\n\\n            this.attachShadow({ mode: 'open' });\\n\\n            componentUtils.addStylesToElement(this.shadowRoot, styles);\\n\\n            this.shadowRoot.appendChild(template.content.cloneNode(true));\\n        }\\n        _attachEventHandlers () {\\n            let leftButton = this._getLeftButton();\\n            leftButton.addEventListener('click', e => {\\n                this._leftClose();\\n            });\\n            let rightButton = this._getRightButton();\\n            rightButton.addEventListener('click', e => {\\n                this._rightClose();\\n            });\\n            let middleButton = this._getMiddleButton();\\n            middleButton.addEventListener('click', e => {\\n                this._middleClose();\\n            });\\n            let input = this._getInput();\\n            input.addEventListener('input', e => {\\n                this.inputValue = input.value;\\n            });\\n\\n            let footer = this._getFooterLink();\\n            footer.addEventListener('click', e => {\\n                this._footerLink();\\n            });\\n\\n            // Allow closing the dialog by clicking the modal background,\\n            // but prevent closing it by clicking the dialog itself.\\n            let modal = this._getDialog();\\n            modal.addEventListener('click', e => {\\n                this._modalClose();\\n            });\\n            let content = this._getDialogContent();\\n            content.addEventListener('click', e => {\\n                if (e.stopPropagation) {\\n                    e.stopPropagation();\\n                }\\n                if (e.cancelBubble != null) {\\n                    e.cancelBubble = true;\\n                }\\n            });\\n        }\\n\\n        _addDocumentHandler () {\\n            document.addEventListener('keydown', this._keyEventHandler);\\n        }\\n\\n        _removeDocumentHandler () {\\n            document.removeEventListener('keydown', this._keyEventHandler);\\n        }\\n\\n        _focusElement () {\\n            if (this.showInput) {\\n                let input = this._getInput();\\n                input.focus();\\n            }\\n        }\\n\\n        _leftClose () {\\n            this.dispatchEvent(new CustomEvent('left-button-click', { cancelable: true }));\\n        }\\n\\n        _middleClose () {\\n            this.dispatchEvent(new CustomEvent('middle-button-click', { cancelable: true }));\\n        }\\n\\n        _rightClose () {\\n            this.dispatchEvent(new CustomEvent('right-button-click', { cancelable: true }));\\n        }\\n\\n        _modalClose () {\\n            this.dispatchEvent(new CustomEvent('modal-click', { cancelable: true }));\\n        }\\n\\n        _footerLink () {\\n            this.dispatchEvent(new CustomEvent('footer-link-pressed', { cancelable: true }));\\n        }\\n\\n        _getDialog () {\\n            return this.shadowRoot.querySelector('.mc-dialog-modal');\\n        }\\n\\n        _getDialogContent () {\\n            return this.shadowRoot.querySelector('.mc-dialog-content');\\n        }\\n\\n        _getHeader () {\\n            return this.shadowRoot.querySelector('.mc-dialog-header');\\n        }\\n\\n        _getLeftButton () {\\n            return this.shadowRoot.querySelector('.mc-dialog-button-left');\\n        }\\n\\n        _getMiddleButton () {\\n            return this.shadowRoot.querySelector('.mc-dialog-button-middle');\\n        }\\n\\n        _getRightButton () {\\n            return this.shadowRoot.querySelector('.mc-dialog-button-right');\\n        }\\n\\n        _getLeftButtonText () {\\n            return this.shadowRoot.querySelector('#mc-dialog-button-text-left');\\n        }\\n\\n        _getMiddleButtonText () {\\n            return this.shadowRoot.querySelector('#mc-dialog-button-text-middle');\\n        }\\n\\n        _getRightButtonText () {\\n            return this.shadowRoot.querySelector('#mc-dialog-button-text-right');\\n        }\\n\\n        _getInput () {\\n            return this.shadowRoot.querySelector('.mc-input');\\n        }\\n\\n        _getErrorMessage () {\\n            return this.shadowRoot.querySelector('.mc-dialog-error-message');\\n        }\\n\\n        _getLeftIcon () {\\n            return this.shadowRoot.querySelector('#mc-dialog-icon-left-button');\\n        }\\n\\n        _getMiddleIcon () {\\n            return this.shadowRoot.querySelector('#mc-dialog-icon-middle-button');\\n        }\\n\\n        _getRightIcon () {\\n            return this.shadowRoot.querySelector('#mc-dialog-icon-right-button');\\n        }\\n\\n        _getFooterLink () {\\n            return this.shadowRoot.querySelector('#mc-dialog-footer-link');\\n        }\\n    }\\n\\n    componentUtils.registerCustomElement('mc-dialog', MCDialog);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}