{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/dialog/test/dialog-test","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../dialog.js';\\n\\nimport { createFixture, isVisible, pressKey } from '../../test/test-utils.js';\\nimport { DialogPage } from './dialog-page.js';\\n\\ndescribe('Dialog', () => {\\n    beforeEach(function () {\\n        this.page = new DialogPage();\\n    });\\n\\n    describe('Basic', () => {\\n        beforeEach(function () {\\n            this.element = createFixture('<mc-dialog header=\\\"Hello\\\" text-middle-button=\\\"OK\\\" text-right-button=\\\"CANCEL\\\"></mc-dialog>');\\n        });\\n\\n        it('should show dialog in the center', function () {\\n            let dialog = this.page.getDialog();\\n            expect(isVisible(dialog)).toBeTruthy();\\n\\n            let dialogContent = this.page.getDialogContent();\\n            let dialogDimension = dialogContent.getBoundingClientRect();\\n            let bodyDimension = document.body.getBoundingClientRect();\\n            expect(dialogDimension.right < bodyDimension.right).toBeTruthy();\\n            expect(dialogDimension.left > bodyDimension.left).toBeTruthy();\\n            expect(dialogDimension.top > bodyDimension.top).toBeTruthy();\\n            expect(dialogDimension.bottom < bodyDimension.bottom).toBeTruthy();\\n        });\\n\\n        it('should show dialog on the right side', function () {\\n            this.element = createFixture('<mc-dialog header=\\\"Hello\\\" position=\\\"right\\\"></mc-dialog>');\\n\\n            let dialog = this.page.getDialog();\\n            expect(isVisible(dialog)).toBeTruthy();\\n\\n            let dialogContent = this.page.getDialogContent();\\n            let dialogDimension = dialogContent.getBoundingClientRect();\\n            let bodyDimension = document.body.getBoundingClientRect();\\n            expect(dialogDimension.right === bodyDimension.right).toBeTruthy();\\n            expect(dialogDimension.left > bodyDimension.left).toBeTruthy();\\n            expect(dialogDimension.top === 0).toBeTruthy();\\n            expect(dialogDimension.bottom === bodyDimension.bottom).toBeTruthy();\\n        });\\n\\n        it('should enable all buttons by default', function () {\\n            createFixture('<mc-dialog header=\\\"Hello\\\"></mc-dialog>');\\n\\n            let leftButton = this.page.getLeftButton();\\n            let middleButton = this.page.getMiddleButton();\\n            let rightButton = this.page.getRightButton();\\n\\n            expect(leftButton.hasAttribute('disabled')).toBeFalsy();\\n            expect(middleButton.hasAttribute('disabled')).toBeFalsy();\\n            expect(rightButton.hasAttribute('disabled')).toBeFalsy();\\n        });\\n\\n        it('should show header', function () {\\n            let header = this.page.getHeader();\\n\\n            expect(header.textContent).toBe('Hello');\\n        });\\n\\n        it('should NOT show left button', function () {\\n            let button = this.page.getLeftButton();\\n\\n            expect(isVisible(button)).toBeFalsy();\\n        });\\n\\n        it('should show right button', function () {\\n            let button = this.page.getRightButton();\\n            let buttonText = this.page.getRightButtonText();\\n\\n            expect(isVisible(button)).toBeTruthy();\\n            expect(buttonText.textContent).toBe('CANCEL');\\n        });\\n\\n        it('should show middle button', function () {\\n            let button = this.page.getMiddleButton();\\n            let buttonText = this.page.getMiddleButtonText();\\n\\n            expect(isVisible(button)).toBeTruthy();\\n            expect(buttonText.textContent).toBe('OK');\\n        });\\n\\n        it('should show left button', function () {\\n            createFixture('<mc-dialog header=\\\"Hello\\\" show-left-button=\\\"true\\\"></mc-dialog>');\\n\\n            let button = this.page.getLeftButton();\\n\\n            expect(isVisible(button)).toBeTruthy();\\n        });\\n\\n        it('left button text should be customizable', function () {\\n            createFixture('<mc-dialog header=\\\"Hello\\\" show-left-button=\\\"true\\\" text-left-button=\\\"COPY\\\"></mc-dialog>');\\n\\n            let buttonText = this.page.getLeftButtonText();\\n\\n            expect(buttonText.textContent).toBe('COPY');\\n        });\\n\\n        it('cancel text should be customizable', function () {\\n            createFixture('<mc-dialog header=\\\"Hello\\\" text-right-button=\\\"Abbrechen\\\"></mc-dialog>');\\n\\n            let buttonText = this.page.getRightButtonText();\\n\\n            expect(buttonText.textContent).toBe('Abbrechen');\\n        });\\n\\n        it('middle text should be customizable', function () {\\n            createFixture('<mc-dialog header=\\\"Hello\\\" text-middle-button=\\\"Close\\\"></mc-dialog>');\\n\\n            let buttonText = this.page.getMiddleButtonText();\\n\\n            expect(buttonText.textContent).toBe('Close');\\n        });\\n\\n        it('right button should be hidden', function () {\\n            createFixture('<mc-dialog header=\\\"Hello\\\" show-right-button=\\\"false\\\"></mc-dialog>');\\n\\n            let button = this.page.getRightButton();\\n\\n            expect(isVisible(button)).toBeFalsy();\\n        });\\n\\n        it('middle button should be hidden', function () {\\n            createFixture('<mc-dialog header=\\\"Hello\\\" show-middle-button=\\\"false\\\"></mc-dialog>');\\n\\n            let button = this.page.getMiddleButton();\\n\\n            expect(isVisible(button)).toBeFalsy();\\n        });\\n\\n        it('left button should be disabled', function () {\\n            createFixture('<mc-dialog header=\\\"Hello\\\" show-left-button=\\\"true\\\" disabled-left-button=\\\"true\\\"></mc-dialog>');\\n\\n            let button = this.page.getLeftButton();\\n\\n            expect(button.hasAttribute('disabled')).toBeTruthy();\\n        });\\n\\n        it('middle button should be disabled', function () {\\n            createFixture('<mc-dialog header=\\\"Hello\\\" disabled-middle-button=\\\"true\\\"></mc-dialog>');\\n\\n            let button = this.page.getMiddleButton();\\n\\n            expect(button.hasAttribute('disabled')).toBeTruthy();\\n        });\\n\\n        it('right button should be disabled', function () {\\n            createFixture('<mc-dialog header=\\\"Hello\\\" disabled-right-button=\\\"true\\\"></mc-dialog>');\\n\\n            let button = this.page.getRightButton();\\n\\n            expect(button.hasAttribute('disabled')).toBeTruthy();\\n        });\\n\\n        it('should fire event on left click', function () {\\n            let clicked = false;\\n            this.element.addEventListener('left-button-click', function () {\\n                clicked = true;\\n            });\\n\\n            this.page.clickLeftButton();\\n\\n            expect(clicked).toBeTruthy();\\n        });\\n\\n        it('should fire event on middle click', function () {\\n            let clicked = false;\\n            this.element.addEventListener('middle-button-click', function () {\\n                clicked = true;\\n            });\\n\\n            this.page.clickMiddleButton();\\n\\n            expect(clicked).toBeTruthy();\\n        });\\n\\n        it('should fire event on right click', function () {\\n            let clicked = false;\\n            this.element.addEventListener('right-button-click', function () {\\n                clicked = true;\\n            });\\n\\n            this.page.clickRightButton();\\n\\n            expect(clicked).toBeTruthy();\\n        });\\n\\n        it('should fire middle click event on enter', function () {\\n            let eventFired = false;\\n            this.element.addEventListener('middle-button-click', function () {\\n                eventFired = true;\\n            });\\n\\n            pressKey(document, 'Enter');\\n\\n            expect(eventFired).toBeTruthy();\\n        });\\n\\n        it('should fire right click event on escape', function () {\\n            let eventFired = false;\\n            this.element.addEventListener('right-button-click', function () {\\n                eventFired = true;\\n            });\\n\\n            pressKey(document, 'Escape');\\n\\n            expect(eventFired).toBeTruthy();\\n        });\\n\\n        it('should show left icon', function () {\\n            createFixture('<mc-dialog header=\\\"Hello\\\" icon-left-button=\\\"&#xf0c5;\\\"></mc-dialog>');\\n\\n            let icon = this.page.getLeftIcon();\\n\\n            expect(icon).toBeTruthy();\\n        });\\n\\n        it('should show middle icon', function () {\\n            createFixture('<mc-dialog header=\\\"Hello\\\" icon-middle-button=\\\"&#xf0c5;\\\"></mc-dialog>');\\n\\n            let icon = this.page.getMiddleIcon();\\n\\n            expect(icon).toBeTruthy();\\n        });\\n\\n        it('should show right icon', function () {\\n            createFixture('<mc-dialog header=\\\"Hello\\\" icon-right-button=\\\"&#xf0c5;\\\"></mc-dialog>');\\n\\n            let icon = this.page.getRightIcon();\\n\\n            expect(icon).toBeTruthy();\\n        });\\n\\n        it('should update right button text', function () {\\n            this.element = createFixture('<mc-dialog header=\\\"Hello\\\" icon-right-button=\\\"&#xf0c5;\\\"></mc-dialog>');\\n            this.element.setAttribute('text-right-button', 'Abbrechen');\\n\\n            let text = this.page.getRightButtonText();\\n            let icon = this.page.getRightIcon();\\n\\n            expect(text.textContent).toBe('Abbrechen');\\n            expect(icon).toBeTruthy();\\n        });\\n\\n        it('should update middle button text', function () {\\n            this.element = createFixture('<mc-dialog header=\\\"Hello\\\" icon-middle-button=\\\"&#xf0c5;\\\"></mc-dialog>');\\n            this.element.setAttribute('text-middle-button', 'NewValue');\\n\\n            let text = this.page.getMiddleButtonText();\\n            let icon = this.page.getMiddleIcon();\\n\\n            expect(text.textContent).toBe('NewValue');\\n            expect(icon).toBeTruthy();\\n        });\\n\\n        it('should update left button text', function () {\\n            this.element = createFixture('<mc-dialog header=\\\"Hello\\\" show-left-button=\\\"true\\\" icon-left-button=\\\"&#xf0c5;\\\"></mc-dialog>');\\n            this.element.setAttribute('text-left-button', '同意');\\n\\n            let text = this.page.getLeftButtonText();\\n            let icon = this.page.getLeftIcon();\\n\\n            expect(text.textContent).toBe('同意');\\n            expect(icon).toBeTruthy();\\n        });\\n\\n        it('should fire modal click event on background click', function () {\\n            let eventFired = false;\\n            this.element.addEventListener('modal-click', function () {\\n                eventFired = true;\\n            });\\n\\n            this.page.getDialog().click();\\n\\n            expect(eventFired).toBeTruthy();\\n        });\\n\\n        it('should not close dialog on click within dialog content', function () {\\n            this.page.getHeader().click();\\n\\n            let dialog = this.page.getDialog();\\n            expect(isVisible(dialog)).toBeTruthy();\\n        });\\n\\n        it('left button should be changed to disabled', function () {\\n            this.element = createFixture('<mc-dialog header=\\\"Hello\\\" show-left-button=\\\"true\\\"></mc-dialog>');\\n            this.element.setAttribute('disabled-left-button', 'true');\\n\\n            let button = this.page.getLeftButton();\\n\\n            expect(button.hasAttribute('disabled')).toBeTruthy();\\n        });\\n\\n        it('middle button should be changed to disabled', function () {\\n            this.element = createFixture('<mc-dialog header=\\\"Hello\\\"></mc-dialog>');\\n            this.element.setAttribute('disabled-middle-button', 'true');\\n\\n            let button = this.page.getMiddleButton();\\n\\n            expect(button.hasAttribute('disabled')).toBeTruthy();\\n        });\\n\\n        it('right button should be changed to disabled', function () {\\n            this.element = createFixture('<mc-dialog header=\\\"Hello\\\"></mc-dialog>');\\n            this.element.setAttribute('disabled-right-button', 'true');\\n\\n            let button = this.page.getRightButton();\\n\\n            expect(button.hasAttribute('disabled')).toBeTruthy();\\n        });\\n    });\\n\\n    describe('Custom Content', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`\\n                <mc-dialog header=\\\"Enter a name:\\\">\\n                    <span slot=\\\"content\\\"><input id=\\\"input\\\" type=\\\"text\\\" value=\\\"MyName\\\"></span>\\n                </mc-dialog>`\\n            );\\n        });\\n\\n        it('should show custom content', function () {\\n            let input = document.getElementById('input');\\n\\n            expect(input.value).toBe('MyName');\\n        });\\n    });\\n\\n    describe('Footer Link', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`\\n                <mc-dialog text-footer-link='My Footer Link' header=\\\"Enter a name:\\\">\\n                </mc-dialog>`\\n            );\\n        });\\n\\n        it('should show footer link', function () {\\n            let footer = this.page.getFooterLink();\\n\\n            expect(footer.textContent).toBe('My Footer Link');\\n        });\\n\\n        it('should trigger event when clicked', function () {\\n            let triggered = false;\\n            this.element.addEventListener('footer-link-pressed', function (e) {\\n                triggered = true;\\n            });\\n\\n            this.page.clickFooterLink();\\n\\n            expect(triggered).toBeTruthy();\\n        });\\n    });\\n\\n    describe('Input', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`\\n                <mc-dialog header=\\\"Enter a name:\\\" show-input=\\\"true\\\" input-value=\\\"hello\\\"></mc-dialog>`\\n            );\\n        });\\n\\n        it('should show input field with text', function () {\\n            let input = this.page.getInput();\\n\\n            expect(input.value).toBe('hello');\\n        });\\n\\n        it('should not show input and input error field by default', function () {\\n            createFixture(`\\n                <mc-dialog header=\\\"Enter a name:\\\" input-value=\\\"hello\\\"></mc-dialog>`\\n            );\\n\\n            let input = this.page.getInput();\\n            let errorMessage = this.page.getErrorMessage();\\n\\n            expect(isVisible(input)).toBeFalsy();\\n            expect(isVisible(errorMessage)).toBeFalsy();\\n        });\\n\\n        it('should update attribute with input value', function () {\\n            this.page.enterInput('My Text');\\n\\n            expect(this.element.getAttribute('input-value')).toBe('My Text');\\n        });\\n\\n        it('should show input error', function () {\\n            createFixture(`\\n                <mc-dialog header=\\\"Enter a name:\\\" show-input=\\\"true\\\" input-value=\\\"hello\\\" error-message=\\\"Invalid value!\\\"></mc-dialog>`\\n            );\\n\\n            let errorMessage = this.page.getErrorMessage();\\n\\n            expect(isVisible(errorMessage)).toBeTruthy();\\n            expect(errorMessage.textContent).toBe('Invalid value!');\\n        });\\n\\n        it('should show error message when updated', function () {\\n            this.element.addEventListener('middle-button-click', function (e) {\\n                e.srcElement.setAttribute('error-message', 'Validation Error!');\\n                e.preventDefault();\\n            });\\n\\n            this.page.clickMiddleButton();\\n\\n            let error = this.page.getErrorMessage();\\n            expect(isVisible(error)).toBeTruthy();\\n            expect(error.textContent).toBe('Validation Error!');\\n        });\\n\\n        it('should fire right button event on enter with single button', function () {\\n            this.element = createFixture('<mc-dialog show-middle-button=\\\"false\\\" header=\\\"Hello\\\"></mc-dialog>');\\n\\n            let eventFired = false;\\n            this.element.addEventListener('right-button-click', function () {\\n                eventFired = true;\\n            });\\n\\n            this.page.enterInput('My Text');\\n            pressKey(document, 'Enter');\\n\\n            expect(eventFired).toBeTruthy();\\n        });\\n\\n        it('should fire middle button event on enter with two button', function () {\\n            let eventFired = false;\\n            this.element.addEventListener('middle-button-click', function () {\\n                eventFired = true;\\n            });\\n\\n            this.page.enterInput('My Text');\\n            pressKey(document, 'Enter');\\n\\n            expect(eventFired).toBeTruthy();\\n        });\\n\\n        it('should fire left button event on enter with three button', function () {\\n            this.element = createFixture('<mc-dialog show-left-button=\\\"true\\\" text-left-button=\\\"OK\\\" l header=\\\"Hello\\\"></mc-dialog>');\\n\\n            let eventFired = false;\\n            this.element.addEventListener('left-button-click', function () {\\n                eventFired = true;\\n            });\\n\\n            this.page.enterInput('My Text');\\n            pressKey(document, 'Enter');\\n\\n            expect(eventFired).toBeTruthy();\\n        });\\n\\n        it('should fire right button event on escape', function () {\\n            let eventFired = false;\\n            this.element.addEventListener('right-button-click', function () {\\n                eventFired = true;\\n            });\\n\\n            this.page.enterInput('My Text');\\n            pressKey(document, 'Escape');\\n\\n            expect(eventFired).toBeTruthy();\\n        });\\n    });\\n});\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}