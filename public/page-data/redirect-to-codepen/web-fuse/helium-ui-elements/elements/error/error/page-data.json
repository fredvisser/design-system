{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/error/error","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import errorCss from './error.css';\\n\\nimport { componentUtils } from '../common/component-utils.js';\\nimport { html } from '../../library/html-utils.js';\\n\\nconst styles = [errorCss];\\n\\n(function () {\\n    class MCError extends HTMLElement {\\n        connectedCallback () {\\n            if (!this.shadowRoot) {\\n                this._render();\\n            }\\n        }\\n\\n        _render () {\\n            const template = document.createElement('template');\\n            template.innerHTML =\\n                html`<div class=\\\"mc-error-main\\\">\\n                    <div class=\\\"mc-error-code\\\">${this.code}</div>\\n                    <div class=\\\"mc-error-message\\\">${this.message}</div>\\n                    <a href=\\\"${this.linkUrl}\\\" class=\\\"mc-error-link\\\" rel=\\\"noopener noreferrer\\\">${this.linkText}</a>\\n                </div>`;\\n\\n            this.attachShadow({ mode: 'open' });\\n            componentUtils.addStylesToElement(this.shadowRoot, styles);\\n            this.shadowRoot.appendChild(template.content.cloneNode(true));\\n        }\\n\\n        get message () {\\n            return this.getAttribute('message');\\n        }\\n\\n        set message (value) {\\n            this.setAttribute('message', value);\\n        }\\n\\n        get code () {\\n            return this.getAttribute('code');\\n        }\\n\\n        set code (value) {\\n            this.setAttribute('code', value);\\n        }\\n\\n        get linkText () {\\n            return this.getAttribute('link-text');\\n        }\\n\\n        set linkText (value) {\\n            this.setAttribute('link-text', value);\\n        }\\n\\n        get linkUrl () {\\n            return this.getAttribute('link-url');\\n        }\\n\\n        set linkUrl (value) {\\n            this.setAttribute('link-url', value);\\n        }\\n\\n        static get observedAttributes () {\\n            return ['message', 'code', 'link-text', 'link-url'];\\n        }\\n\\n        attributeChangedCallback (name, oldValue, newValue) {\\n            if (!this.shadowRoot) {\\n                return;\\n            }\\n            switch (name) {\\n            case 'message': {\\n                this._getMessage().textContent = newValue;\\n                break;\\n            }\\n            case 'code': {\\n                this._getCode().textContent = newValue;\\n                break;\\n            }\\n            case 'link-text': {\\n                this._getLink().textContent = newValue;\\n                break;\\n            }\\n            case 'link-url': {\\n                this._getLink().href = newValue;\\n                break;\\n            }\\n            }\\n        }\\n\\n        _getCode () {\\n            return this.shadowRoot.querySelector('.mc-error-code');\\n        }\\n\\n        _getMessage () {\\n            return this.shadowRoot.querySelector('.mc-error-message');\\n        }\\n\\n        _getLink () {\\n            return this.shadowRoot.querySelector('.mc-error-link');\\n        }\\n    }\\n\\n    componentUtils.registerCustomElement('mc-error', MCError);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}