{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/fileviewer/fileviewer","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../dialog/dialog.js';\\nimport '../toolbar/toolbar.js';\\nimport '../grid/grid.js';\\nimport '../filter-builder/filter-builder.js';\\nimport './fileviewer-details.js';\\n\\nimport { componentUtils } from '../common/component-utils.js';\\nimport { html } from '../../library/html-utils.js';\\nimport { FileViewerUploader } from './fileviewer-uploader.js';\\nimport { fileViewerUtils } from './fileviewer-utils.js';\\nimport { sizeUtils } from '../common/size-utils.js';\\nimport { stringUtils } from '../common/string-utils.js';\\n\\nimport inputCss from '../common/styles/input.css';\\nimport selectCss from '../common/styles/select.css';\\nimport fileviewerStyle from './fileviewer.css';\\n\\nconst styles = [inputCss, selectCss, fileviewerStyle];\\nconst SUPPORTED_HTML_PREVIEW_EXTENSIONS = ['htm', 'html'];\\nconst SUPPORTED_IMAGE_PREVIEW_EXTENSIONS = ['png', 'jpg', 'jpeg', 'bmp', 'gif'];\\n\\n(function () {\\n    class SLFileViewer extends HTMLElement {\\n        constructor () {\\n            super();\\n            this._selectedFiles = [];\\n        }\\n\\n        static get observedAttributes () {\\n            return ['preview-url'];\\n        }\\n\\n        attributeChangedCallback (name, oldValue, newValue) {\\n            switch (name) {\\n            case 'preview-url': {\\n                this._previewUrl = newValue;\\n                break;\\n            }\\n            }\\n        }\\n\\n        set data (data) {\\n            this._items = data.items;\\n            this._totalCount = data.totalCount;\\n            this._render();\\n        }\\n\\n        set i18n (i18n) {\\n            this._i18n = i18n;\\n            this._render();\\n        }\\n\\n        connectedCallback () {\\n            componentUtils.upgradeProperty(this, 'data');\\n            componentUtils.upgradeProperty(this, 'i18n');\\n            this._render();\\n        }\\n\\n        _render () {\\n            if (!this.shadowRoot && this._i18n) {\\n                this._init();\\n                this._renderMain();\\n                this._attachEventHandlers();\\n            }\\n            this._renderItems();\\n        }\\n\\n        _init () {\\n            let pageSize = this.getAttribute('page-size') || 20;\\n            this._search = {\\n                page: 1,\\n                pageSize: pageSize\\n            };\\n            this._previewUrl = this.getAttribute('preview-url');\\n        }\\n\\n        _renderMain () {\\n            this.attachShadow({ mode: 'open' });\\n            componentUtils.addStylesToElement(this.shadowRoot, styles);\\n\\n            let container = document.createElement('div');\\n            container.classList.add('sl-fileviewer-main');\\n            container.innerHTML = html`\\n                <div class=\\\"sl-fileviewer-toolbar\\\">\\n                    <mc-toolbar class=\\\"sl-fileviewer-action\\\">\\n                        <mc-toolbar-item name=\\\"upload\\\" text=\\\"${this._i18n.toolbar.upload}\\\"></mc-toolbar-item>\\n                        <mc-toolbar-item name=\\\"download\\\" text=\\\"${this._i18n.toolbar.download}\\\" disabled=\\\"true\\\"></mc-toolbar-item>\\n                        <mc-toolbar-item name=\\\"preview\\\" text=\\\"${this._i18n.toolbar.preview}\\\" disabled=\\\"true\\\"></mc-toolbar-item>\\n                        <mc-toolbar-item name=\\\"delete\\\" text=\\\"${this._i18n.toolbar.delete}\\\" disabled=\\\"true\\\" show-on-mobile=\\\"false\\\"></mc-toolbar-item>\\n                    </mc-toolbar>\\n                    <mc-toolbar class=\\\"sl-fileviewer-filter\\\">\\n                        <mc-toolbar-item name=\\\"filter\\\" icon=\\\"&#xf0b0;\\\" text=\\\"${this._i18n.toolbar.filter}\\\"></mc-toolbar-item>\\n                    </mc-toolbar>\\n                    <div class=\\\"sl-fileviewer-search\\\">\\n                        <input class=\\\"sl-fileviewer-search-input mc-input\\\" placeholder=\\\"${this._i18n.toolbar.search}\\\">\\n                    </div>\\n                </div>\\n                <sl-filter-builder class=\\\"sl-fileviewer-filter-builder sl-fileviewer-filter-builder-hidden\\\">\\n                    <sl-filter-builder-item name=\\\"name\\\" text=\\\"Name\\\">\\n                        <sl-filter-builder-operation name=\\\"MATCHES\\\" text=\\\"${this._i18n.filter.MATCHES}\\\"></sl-filter-builder-operation>\\n                    </sl-filter-builder-item>\\n                    <sl-filter-builder-item name=\\\"extension\\\" text=\\\"Extension\\\">\\n                        <sl-filter-builder-operation name=\\\"EQUALS\\\" text=\\\"${this._i18n.filter.EQUALS}\\\"></sl-filter-builder-operation>\\n                    </sl-filter-builder-item>\\n                    <sl-filter-builder-item name=\\\"properties\\\" text=\\\"Properties\\\" type=\\\"KeyValue\\\">\\n                        <sl-filter-builder-operation name=\\\"EQUALS\\\" text=\\\"${this._i18n.filter.EQUALS}\\\"></sl-filter-builder-operation>\\n                    </sl-filter-builder-item>\\n                </sl-filter-builder>\\n                <sl-grid page-size=\\\"20\\\" show-select-all=\\\"true\\\" locale=\\\"${this._i18n.grid.locale}\\\" page-size-label=\\\"${this._i18n.grid.pageSizeLabel}\\\" go-to-page-label=\\\"${this._i18n.grid.goToPageLabel}\\\" current-page-label=\\\"${this._i18n.grid.currentPageLabel}\\\">\\n                    <sl-grid-column type=\\\"checkbox\\\" name=\\\"selection\\\" width=\\\"35px\\\" sortable=\\\"false\\\"></sl-grid-column>\\n                    <sl-grid-column type=\\\"icon\\\" name=\\\"edit\\\" width=\\\"30px\\\" icon=\\\"&#xf040;\\\" sortable=\\\"false\\\"></sl-grid-column>\\n                    <sl-grid-column type=\\\"text\\\" name=\\\"name\\\" width=\\\"2fr\\\" title=\\\"${this._i18n.grid.name}\\\" field=\\\"name\\\"></sl-grid-column>\\n                    <sl-grid-column type=\\\"text\\\" name=\\\"extension\\\" title=\\\"${this._i18n.grid.extension}\\\" field=\\\"extension\\\" show-on-mobile=\\\"false\\\"></sl-grid-column>\\n                    <sl-grid-column type=\\\"text\\\" name=\\\"size\\\" title=\\\"${this._i18n.grid.size}\\\" field=\\\"formattedSize\\\"></sl-grid-column>\\n                    <sl-grid-column type=\\\"date\\\" name=\\\"created\\\" title=\\\"${this._i18n.grid.created}\\\" field=\\\"created\\\" width=\\\"200px\\\" show-on-mobile=\\\"false\\\"></sl-grid-column>\\n                </sl-grid>\\n            `;\\n            this.shadowRoot.appendChild(container);\\n        }\\n\\n        _attachEventHandlers () {\\n            let grid = this._getGrid();\\n            grid.addEventListener('grid-update-data', (e) => {\\n                this._search.page = e.detail.page;\\n                this._search.pageSize = e.detail.pageSize;\\n                this._search.sortBy = e.detail.sortBy;\\n                this._search.sortOrder = e.detail.sortOrder;\\n                this._fireUpdateEvent('grid');\\n            });\\n            grid.addEventListener('grid-checkbox-change', (e) => {\\n                if (e.detail.checked) {\\n                    this._selectItem(e.detail.item);\\n                } else {\\n                    this._unselectItem(e.detail.item);\\n                }\\n                this._updateToolbarItems();\\n            });\\n            grid.addEventListener('grid-action', (e) => {\\n                this._showFileDetails(JSON.parse(JSON.stringify(e.detail.item)));\\n            });\\n            this._getActionToolbar().addEventListener('toolbar-item-click', (e) => {\\n                switch (e.detail.name) {\\n                case 'upload': {\\n                    this.showUploadDialog();\\n                    break;\\n                }\\n                case 'download': {\\n                    this._fireDownloadEvent(this._selectedFiles);\\n                    break;\\n                }\\n                case 'preview': {\\n                    this._showPreview(this._selectedFiles);\\n                    break;\\n                }\\n                case 'delete': {\\n                    this._showDeleteDialog(this._selectedFiles);\\n                    break;\\n                }\\n                }\\n            });\\n\\n            this._getFilterToolbar().addEventListener('toolbar-item-click', (e) => {\\n                switch (e.detail.name) {\\n                case 'filter': {\\n                    this._toggleFilterBuilder();\\n                    break;\\n                }\\n                }\\n            });\\n\\n            let searchInput = this._getSearchInput();\\n            searchInput.addEventListener('input', () => {\\n                this._search.searchTerm = searchInput.value;\\n                this._fireUpdateEvent('search');\\n            });\\n\\n            let filterBuilder = this._getFilterBuilder();\\n            filterBuilder.addEventListener('filter', (e) => {\\n                this._search.filters = e.detail.filters;\\n                this._fireUpdateEvent('filter');\\n            });\\n        }\\n\\n        _toggleFilterBuilder () {\\n            this._showFilterBuilder = !this._showFilterBuilder;\\n            let filterBuilder = this._getFilterBuilder();\\n            if (this._showFilterBuilder) {\\n                filterBuilder.classList.add('sl-fileviewer-filter-builder-show');\\n                filterBuilder.classList.remove('sl-fileviewer-filter-builder-hidden');\\n            } else {\\n                filterBuilder.classList.remove('sl-fileviewer-filter-builder-show');\\n                filterBuilder.classList.add('sl-fileviewer-filter-builder-hidden');\\n            }\\n        }\\n\\n        _selectItem (item) {\\n            if (this._selectedFiles.indexOf(item) === -1) {\\n                this._selectedFiles.push(item);\\n            }\\n        }\\n\\n        _unselectItem (item) {\\n            let index = this._selectedFiles.indexOf(item);\\n            if (index > -1) {\\n                this._selectedFiles.splice(index, 1);\\n            }\\n        }\\n\\n        _updateToolbarItems () {\\n            let items = this._getActionToolbarItems();\\n            for (let item of items) {\\n                if (item.getAttribute('name') !== 'upload') {\\n                    item.setAttribute('disabled', this._selectedFiles.length === 0);\\n                }\\n                if (item.getAttribute('name') === 'preview') {\\n                    item.setAttribute('disabled', !this._previewSupported(this._selectedFiles));\\n                }\\n            }\\n        }\\n\\n        _previewSupported (files) {\\n            if (files.length !== 1) {\\n                return false;\\n            }\\n            let extension = files[0].extension;\\n            return SUPPORTED_HTML_PREVIEW_EXTENSIONS.includes(extension) ||\\n                SUPPORTED_IMAGE_PREVIEW_EXTENSIONS.includes(extension);\\n        }\\n\\n        _showPreview (files) {\\n            let extension = fileViewerUtils.getExtension(files[0].name);\\n            let url = this._previewUrl\\n                .replace('{id}', files[0].id)\\n                .replace('{type}', this._getFileType(extension));\\n            this._openHref(url, '_self');\\n        }\\n\\n        _getFileType (extension) {\\n            if (SUPPORTED_IMAGE_PREVIEW_EXTENSIONS.includes(extension)) {\\n                return 'image';\\n            }\\n            return 'html';\\n        }\\n\\n        _openHref (href, target) {\\n            let win = window.open(href, target);\\n            // win is undefined, if the window cannot be opened (e.g.popup blocker)\\n            if (win) {\\n                win.focus();\\n            }\\n        }\\n\\n        showErrorDialog (errorHeader, errorMessage) {\\n            if (this._getDialog()) {\\n                return; // do not show multiple errors\\n            }\\n\\n            let dialog = document.createElement('mc-dialog');\\n            dialog.setAttribute('header', errorHeader);\\n            dialog.setAttribute('show-middle-button', 'false');\\n            dialog.setAttribute('text-right-button', this._i18n.errorDialog.close);\\n            dialog.innerHTML = html`<span id=\\\"content\\\" slot=\\\"content\\\">\\n                <h4>${errorMessage}</h4>\\n            </span>`;\\n            dialog.addEventListener('right-button-click', () => {\\n                this._removeDialog(dialog);\\n            });\\n            dialog.addEventListener('modal-click', () => {\\n                this._removeDialog(dialog);\\n            });\\n            this.shadowRoot.appendChild(dialog);\\n        }\\n\\n        showUploadDialog () {\\n            if (this._uploadDialogVisible) {\\n                return;\\n            }\\n\\n            let uploadAction = (file) => {\\n                return this._fireUploadEvent(file);\\n            };\\n            let onSuccess = () => {\\n                this._fireUpdateEvent();\\n            };\\n            let onFailure = () => { };\\n            let dialog = new FileViewerUploader(this._i18n.upload).create(uploadAction, onSuccess, onFailure);\\n            dialog.addEventListener('right-button-click', () => {\\n                this._uploadDialogVisible = false;\\n                this._removeDialog(dialog);\\n            });\\n            dialog.addEventListener('modal-click', () => {\\n                this._uploadDialogVisible = false;\\n                this._removeDialog(dialog);\\n            });\\n            this.shadowRoot.appendChild(dialog);\\n            this._uploadDialogVisible = true;\\n        }\\n\\n        _showDeleteDialog (files, callback) {\\n            let dialog = document.createElement('mc-dialog');\\n            dialog.setAttribute('header', this._deleteFileMessage(files));\\n            dialog.setAttribute('text-middle-button', this._i18n.deleteDialog.delete);\\n            dialog.setAttribute('text-right-button', this._i18n.deleteDialog.cancel);\\n            dialog.addEventListener('middle-button-click', (e) => {\\n                this._fireFileDeleteEvent(files);\\n                this._removeDialog(dialog);\\n                if (callback) {\\n                    callback();\\n                }\\n            });\\n            dialog.addEventListener('right-button-click', () => {\\n                this._removeDialog(dialog);\\n            });\\n            dialog.addEventListener('modal-click', () => {\\n                this._removeDialog(dialog);\\n            });\\n            this.shadowRoot.appendChild(dialog);\\n        }\\n\\n        _deleteFileMessage (files) {\\n            if (files.length === 1) {\\n                return stringUtils.format(this._i18n.deleteDialog.singleMessage, { fileName: files[0].name });\\n            }\\n            return stringUtils.format(this._i18n.deleteDialog.multipleMessage, { fileCount: files.length });\\n        }\\n\\n        _removeDialog (dialog) {\\n            if (dialog && dialog.parentNode) {\\n                dialog.parentNode.removeChild(dialog);\\n            }\\n        }\\n\\n        _renderItems () {\\n            if (!this._items || !this._i18n) {\\n                return;\\n            }\\n\\n            this._selectedFiles = [];\\n            this._updateToolbarItems();\\n            let items = this._items.map((f) => {\\n                return this._convertToInternalStructure(f);\\n            });\\n            this._getGrid().data = { items: items, totalCount: this._totalCount };\\n        }\\n\\n        _convertToInternalStructure (file) {\\n            let name = file.properties['Name'] || '';\\n            let formattedSize = sizeUtils.format(file.size);\\n            return {\\n                id: file.id,\\n                serviceGroup: file.serviceGroup,\\n                name: name,\\n                extension: fileViewerUtils.getExtension(name),\\n                size: file.size,\\n                size64: file.size64,\\n                formattedSize: formattedSize.value + ' ' + formattedSize.unit,\\n                properties: file.properties,\\n                created: file.created\\n            };\\n        }\\n\\n        _convertToFileStructure (internalFile) {\\n            let properties = internalFile.properties;\\n            properties['Name'] = internalFile.name;\\n            return {\\n                id: internalFile.id,\\n                serviceGroup: internalFile.serviceGroup,\\n                size: internalFile.size,\\n                size64: internalFile.size64,\\n                properties: properties,\\n                created: internalFile.created\\n            };\\n        }\\n\\n        _showFileDetails (file) {\\n            let updated = {};\\n\\n            let dialog = document.createElement('mc-dialog');\\n            dialog.setAttribute('header', this._i18n.detailsDialog.header);\\n            dialog.setAttribute('position', 'right');\\n            dialog.setAttribute('show-left-button', 'true');\\n            dialog.setAttribute('text-left-button', this._i18n.detailsDialog.update);\\n            dialog.setAttribute('text-middle-button', this._i18n.detailsDialog.delete);\\n            dialog.setAttribute('text-right-button', this._i18n.detailsDialog.cancel);\\n            dialog.innerHTML = html`<span id=\\\"content\\\" slot=\\\"content\\\">\\n                <sl-fileviewer-details></sl-fileviewer-details>\\n            </span>`;\\n            dialog.addEventListener('left-button-click', () => {\\n                if (updated.file) {\\n                    this._fireFileUpdateEvent(updated.file);\\n                }\\n                this._removeDialog(dialog);\\n            });\\n            dialog.addEventListener('middle-button-click', () => {\\n                this._showDeleteDialog([file], () => {\\n                    this._removeDialog(dialog);\\n                });\\n            });\\n            dialog.addEventListener('right-button-click', () => {\\n                this._removeDialog(dialog);\\n            });\\n            dialog.addEventListener('modal-click', () => {\\n                this._removeDialog(dialog);\\n            });\\n            this.shadowRoot.appendChild(dialog);\\n\\n            let fileDetails = this._getFileDetails();\\n            fileDetails.addEventListener('file-update', (e) => {\\n                updated.file = e.detail.file;\\n            });\\n            fileDetails.i18n = this._i18n.details;\\n            fileDetails.data = file;\\n        }\\n\\n        _fireUpdateEvent (trigger) {\\n            let eventData = {\\n                page: this._search.page,\\n                pageSize: this._search.pageSize,\\n                sortBy: this._search.sortBy,\\n                sortOrder: this._search.sortOrder,\\n                searchTerm: this._search.searchTerm,\\n                filters: this._search.filters,\\n                trigger: trigger\\n            };\\n            this.dispatchEvent(new CustomEvent('file-data', { detail: eventData }));\\n        }\\n\\n        _fireUploadEvent (data) {\\n            return new Promise((resolve, reject) => {\\n                let eventData = {\\n                    data: data,\\n                    resolve: resolve,\\n                    reject: reject\\n                };\\n                this.dispatchEvent(new CustomEvent('file-upload', { detail: eventData }));\\n            });\\n        }\\n\\n        _fireDownloadEvent (files) {\\n            let eventData = {\\n                files: files.map((f) => this._convertToFileStructure(f))\\n            };\\n            this.dispatchEvent(new CustomEvent('file-download', { detail: eventData }));\\n        }\\n\\n        _fireFileUpdateEvent (file) {\\n            let eventData = {\\n                file: this._convertToFileStructure(file)\\n            };\\n            this.dispatchEvent(new CustomEvent('file-update', { detail: eventData }));\\n        }\\n\\n        _fireFileDeleteEvent (files) {\\n            let eventData = {\\n                files: files.map((f) => this._convertToFileStructure(f))\\n            };\\n            this.dispatchEvent(new CustomEvent('file-delete', { detail: eventData }));\\n        }\\n\\n        _getFileDetails () {\\n            return this.shadowRoot.querySelector('sl-fileviewer-details');\\n        }\\n\\n        _getGrid () {\\n            return this.shadowRoot.querySelector('sl-grid');\\n        }\\n\\n        _getActionToolbar () {\\n            return this.shadowRoot.querySelector('.sl-fileviewer-action');\\n        }\\n\\n        _getFilterToolbar () {\\n            return this.shadowRoot.querySelector('.sl-fileviewer-filter');\\n        }\\n\\n        _getFilterBuilder () {\\n            return this.shadowRoot.querySelector('sl-filter-builder');\\n        }\\n\\n        _getSearchInput () {\\n            return this.shadowRoot.querySelector('.sl-fileviewer-search-input');\\n        }\\n\\n        _getActionToolbarItems () {\\n            return this._getActionToolbar().querySelectorAll('mc-toolbar-item');\\n        }\\n\\n        _getDialog () {\\n            return this.shadowRoot.querySelector('mc-dialog');\\n        }\\n    }\\n\\n    componentUtils.registerCustomElement('sl-fileviewer', SLFileViewer);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}