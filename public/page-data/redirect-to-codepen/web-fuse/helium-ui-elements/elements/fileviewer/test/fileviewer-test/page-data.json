{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/fileviewer/test/fileviewer-test","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../fileviewer.js';\\n\\nimport { createFixture, isVisible, selectOption, enterValue } from '../../test/test-utils.js';\\nimport { FileViewerPage } from './fileviewer-page.js';\\n\\nconst FILEVIEWER_I18N = {\\n    toolbar: {\\n        upload: 'Upload',\\n        download: 'Download',\\n        preview: 'Preview',\\n        delete: 'Delete',\\n        filter: 'Filter',\\n        search: 'Filter'\\n    },\\n    grid: {\\n        name: 'Name',\\n        extension: 'Extension',\\n        size: 'Size',\\n        created: 'Created',\\n        locale: 'en-US'\\n    },\\n    filter: {\\n        MATCHES: 'matches',\\n        EQUALS: 'equals'\\n    },\\n    upload: {\\n        close: 'Close',\\n        cancel: 'Cancel',\\n        startText: 'Drag and drop files or ',\\n        pendingText: 'Uploading...',\\n        successText: 'Success!',\\n        failureText: 'Failed to upload!',\\n        buttonText: 'browse',\\n        uploadAgain: {\\n            text: 'Upload',\\n            description: 'another file'\\n        },\\n        learn: {\\n            text: 'Learn',\\n            description: 'about upload limitations'\\n        }\\n    },\\n    errorDialog: {\\n        header: {\\n            fileData: 'Could not load files!',\\n            fileUpload: 'Could not upload file!',\\n            fileDownload: 'Could not download file(s)!',\\n            fileDelete: 'Could not delete file(s)!',\\n            fileUpdate: 'Could not update file!'\\n        },\\n        close: 'CLOSE'\\n    },\\n    deleteDialog: {\\n        delete: 'DELETE',\\n        cancel: 'CANCEL',\\n        singleMessage: 'Are you sure you want to delete \\\"{fileName}\\\"?',\\n        multipleMessage: 'Are you sure you want to delete {fileCount} files?'\\n    },\\n    detailsDialog: {\\n        header: 'Update File Details',\\n        update: 'Update',\\n        delete: 'Delete',\\n        cancel: 'Cancel'\\n    },\\n    details: {\\n        name: 'Name:',\\n        extension: 'Extension:',\\n        created: 'Created:',\\n        size: 'Size:',\\n        properties: 'Properties:',\\n        propertiesKey: 'Key',\\n        propertiesValue: 'Value',\\n        locale: 'en-US'\\n    }\\n};\\n\\ndescribe('File Viewer', () => {\\n    let createFile = function (name, size) {\\n        return {\\n            id: Math.floor(Math.random() * 1000000000),\\n            created: new Date(2019, 2, 3, 14, 1, 1, 123),\\n            properties: {\\n                'Name': name,\\n                'key-a': 'value-a'\\n            },\\n            serviceGroup: 'Default',\\n            size: size,\\n            size64: size\\n        };\\n    };\\n\\n    beforeEach(function () {\\n        this.page = new FileViewerPage();\\n    });\\n\\n    describe('Basic', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`<sl-fileviewer preview-url=\\\"https://hosting-dev.systemlinkcloud.io/files/preview?id={id}&type={type}\\\"></sl-fileviewer>`);\\n            this.element.i18n = FILEVIEWER_I18N;\\n            this.element.data = {\\n                items: [\\n                    createFile('file-1.png', 1234),\\n                    createFile('file-2', 1234),\\n                    createFile('file-3.html', 1234)\\n                ],\\n                totalCount: 3\\n            };\\n        });\\n\\n        it('should show the fileviewer', function () {\\n            let main = this.page.getMain();\\n\\n            expect(isVisible(main)).toBeTruthy();\\n        });\\n\\n        it('should show the rows', function () {\\n            let rows = this.page.getRows();\\n            expect(rows.length).toBe(3);\\n\\n            let cell1 = this.page.getCell(0, 2);\\n            expect(cell1.textContent).toBe('file-1.png');\\n\\n            let cell2 = this.page.getCell(0, 3);\\n            expect(cell2.textContent).toBe('png');\\n\\n            let cell3 = this.page.getCell(0, 4);\\n            expect(cell3.textContent).toBe('1.21 kB');\\n\\n            let cell4 = this.page.getCell(0, 5);\\n            expect(cell4.textContent).toBe('Mar 3, 2019 at 2:01 PM');\\n        });\\n\\n        it('should show empty cell for files without file extension', function () {\\n            let cell1 = this.page.getCell(1, 2);\\n            expect(cell1.textContent).toBe('file-2');\\n\\n            let cell2 = this.page.getCell(1, 3);\\n            expect(cell2.textContent).toBe('');\\n        });\\n\\n        it('should show size in bytes', function () {\\n            this.element.data = {\\n                items: [ createFile('file-1.png', 15) ],\\n                totalCount: 1\\n            };\\n\\n            let sizeCell = this.page.getCell(0, 4);\\n            expect(sizeCell.textContent).toBe('15 B');\\n        });\\n\\n        it('should show size in kilobytes', function () {\\n            this.element.data = {\\n                items: [ createFile('file-1.png', 237649) ],\\n                totalCount: 1\\n            };\\n\\n            let sizeCell = this.page.getCell(0, 4);\\n            expect(sizeCell.textContent).toBe('232.08 kB');\\n        });\\n\\n        it('should show size in megabytes', function () {\\n            this.element.data = {\\n                items: [ createFile('file-1.png', 21237649) ],\\n                totalCount: 1\\n            };\\n\\n            let sizeCell = this.page.getCell(0, 4);\\n            expect(sizeCell.textContent).toBe('20.25 MB');\\n        });\\n\\n        it('should show size in gigabytes', function () {\\n            this.element.data = {\\n                items: [ createFile('file-1.png', 2112237649) ],\\n                totalCount: 1\\n            };\\n\\n            let sizeCell = this.page.getCell(0, 4);\\n            expect(sizeCell.textContent).toBe('1.97 GB');\\n        });\\n\\n        it('should display dialog on error', function () {\\n            this.element.showErrorDialog(this.element._i18n.errorDialog.header.fileData);\\n\\n            expect(this.page.getDialogHeader().textContent).toBe('Could not load files!');\\n        });\\n    });\\n\\n    describe('Upload', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`<sl-fileviewer></sl-fileviewer>`);\\n            this.element.i18n = FILEVIEWER_I18N;\\n            this.element.data = {\\n                items: [],\\n                totalCount: 0\\n            };\\n        });\\n\\n        it('should show upload in progress while uploading file', function () {\\n            this.page.clickUpload();\\n            this.page.startUpload('helloworld', 'test.txt');\\n\\n            let uploadText = this.page.getUploadText();\\n            expect(uploadText.textContent).toBe('Uploading...');\\n        });\\n\\n        it('should fire event when uploading file', async function () {\\n            this.element.addEventListener('file-upload', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickUpload();\\n            this.page.startUpload('helloworld', 'test.txt');\\n\\n            expect(this.eventDetail.data.name).toBe('test.txt');\\n            expect(this.eventDetail.data.size).toBe(10);\\n            expect(this.eventDetail.resolve).toBeDefined();\\n            expect(this.eventDetail.reject).toBeDefined();\\n        });\\n\\n        it('should show upload successfully finished when resolving event', async function () {\\n            this.element.addEventListener('file-upload', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickUpload();\\n            this.page.startUpload('helloworld', 'test.txt');\\n            await this.eventDetail.resolve('Done!');\\n\\n            expect(this.page.getUploadText().textContent).toBe('Success!');\\n        });\\n\\n        it('should show error message when rejecting event', async function () {\\n            this.element.addEventListener('file-upload', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickUpload();\\n            this.page.startUpload('helloworld', 'test.txt');\\n            await this.eventDetail.reject('There was an error uploading');\\n\\n            expect(this.page.getUploadText().textContent).toContain('Failed to upload!');\\n            expect(this.page.getUploadText().textContent).toContain('There was an error uploading');\\n        });\\n    });\\n\\n    describe('Delete File', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`<sl-fileviewer></sl-fileviewer>`);\\n            this.element.i18n = FILEVIEWER_I18N;\\n            this.element.data = {\\n                items: [\\n                    createFile('file-1.png', 1234),\\n                    createFile('file-2.txt', 1234),\\n                    createFile('file-3.html', 1234)\\n                ],\\n                totalCount: 3\\n            };\\n        });\\n\\n        it('should show dialog message when deleting single file', function () {\\n            this.page.clickCheckbox(0);\\n            this.page.clickDeleteFile();\\n\\n            expect(this.page.getDialogHeader().textContent).toBe('Are you sure you want to delete \\\"file-1.png\\\"?');\\n        });\\n\\n        it('should show dialog message when deleting multiple files', function () {\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(2);\\n            this.page.clickDeleteFile();\\n\\n            expect(this.page.getDialogHeader().textContent).toBe('Are you sure you want to delete 2 files?');\\n        });\\n\\n        it('should fire event when deleting multiple files', function () {\\n            this.element.addEventListener('file-delete', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(2);\\n            this.page.clickDeleteFile();\\n\\n            this.page.clickDialogOKButton();\\n\\n            expect(this.eventDetail.files.length).toBe(2);\\n            expect(this.eventDetail.files[0].properties['Name']).toBe('file-1.png');\\n            expect(this.eventDetail.files[1].properties['Name']).toBe('file-3.html');\\n        });\\n    });\\n\\n    describe('Filter', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`<sl-fileviewer></sl-fileviewer>`);\\n            this.element.i18n = FILEVIEWER_I18N;\\n        });\\n\\n        it('should show filter builder when clicking on filter button', function () {\\n            this.page.clickFilter();\\n\\n            expect(isVisible(this.page.getFilterBuilderFieldSelector(0))).toBeTruthy();\\n        });\\n\\n        it('should fire data event when changing the filter', function () {\\n            this.element.addEventListener('file-data', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickFilter();\\n            selectOption(this.page.getFilterBuilderFieldSelector(0), 'name');\\n            enterValue(this.page.getFilterBuilderValueInput(0), 'file-a');\\n\\n            expect(this.eventDetail).toEqual({\\n                page: 1,\\n                pageSize: 20,\\n                sortBy: undefined,\\n                sortOrder: undefined,\\n                searchTerm: undefined,\\n                filters: [\\n                    { name: 'name', operation: 'MATCHES', value: 'file-a' }\\n                ],\\n                trigger: 'filter'\\n            });\\n        });\\n\\n        it('should fire data event when entering search term', function () {\\n            this.element.addEventListener('file-data', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            enterValue(this.page.getSearchInput(), 'file-x');\\n\\n            expect(this.eventDetail).toEqual({\\n                page: 1,\\n                pageSize: 20,\\n                sortBy: undefined,\\n                sortOrder: undefined,\\n                searchTerm: 'file-x',\\n                filters: undefined,\\n                trigger: 'search'\\n            });\\n        });\\n    });\\n\\n    describe('Edit File', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`<sl-fileviewer preview-url=\\\"https://hosting-dev.systemlinkcloud.io/files/preview?id={id}&type={type}\\\"></sl-fileviewer>`);\\n            this.element.i18n = FILEVIEWER_I18N;\\n            this.element.data = {\\n                items: [\\n                    createFile('file-1.png', 1234),\\n                    createFile('file-2', 1234),\\n                    createFile('file-3.html', 1234)\\n                ],\\n                totalCount: 3\\n            };\\n        });\\n\\n        it('should show file details', function () {\\n            this.page.clickEdit(0);\\n\\n            let detailsPage = this.page.getDetailsPage();\\n            expect(detailsPage.getNameInput().value).toBe('file-1.png');\\n            expect(detailsPage.getExtension().textContent).toBe('png');\\n            expect(detailsPage.getCreated().textContent).toBe('Mar 3, 2019 at 2:01 PM');\\n            expect(detailsPage.getSize().textContent).toBe('1.21 kB');\\n            expect(detailsPage.getPropertiesListEditorPage().getRows().length).toBe(2);\\n        });\\n\\n        it('should update name', function () {\\n            this.element.addEventListener('file-update', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickEdit(0);\\n            enterValue(this.page.getDetailsPage().getNameInput(), 'new-name.txt');\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail.file.properties).toEqual({\\n                'key-a': 'value-a',\\n                'Name': 'new-name.txt'\\n            });\\n        });\\n\\n        it('should add new property', function () {\\n            this.element.addEventListener('file-update', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickEdit(0);\\n            this.page.getDetailsPage().getPropertiesListEditorPage().enterListKeyValue(1, 'new-key', 'new-value');\\n\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail.file.properties).toEqual({\\n                'key-a': 'value-a',\\n                'new-key': 'new-value',\\n                'Name': 'file-1.png'\\n            });\\n        });\\n    });\\n});\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}