{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/filter-builder/filter-builder","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import iconsCss from '../common/styles/icons.css';\\nimport inputCss from '../common/styles/input.css';\\nimport selectCss from '../common/styles/select.css';\\nimport filterBuilderCss from './filter-builder.css';\\n\\nimport { componentUtils } from '../common/component-utils.js';\\n\\nconst styles = [iconsCss, inputCss, selectCss, filterBuilderCss];\\n\\n(function () {\\n    class SLFilterBuilder extends HTMLElement {\\n        connectedCallback () {\\n            if (!this.shadowRoot) {\\n                this._render();\\n                let config = this._createConfig();\\n                this._renderItems(config);\\n            }\\n        }\\n\\n        _createConfig () {\\n            let items = [...this.querySelectorAll('sl-filter-builder-item')];\\n            return items.map((item) => {\\n                return {\\n                    name: item.getAttribute('name'),\\n                    text: item.getAttribute('text'),\\n                    operations: this._createOperationsConfig(item),\\n                    type: item.getAttribute('type')\\n                };\\n            });\\n        }\\n\\n        _createOperationsConfig (element) {\\n            let items = [...element.querySelectorAll('sl-filter-builder-operation')];\\n            return items.map((item) => {\\n                return {\\n                    name: item.getAttribute('name'),\\n                    text: item.getAttribute('text')\\n                };\\n            });\\n        }\\n\\n        _render () {\\n            this.attachShadow({ mode: 'open' });\\n            componentUtils.addStylesToElement(this.shadowRoot, styles);\\n\\n            let main = document.createElement('div');\\n            main.classList.add('sl-filter-builder-main');\\n            this.shadowRoot.appendChild(main);\\n        }\\n\\n        _renderItems (config) {\\n            let main = this._getMain();\\n            main.innerHTML = '';\\n            this._createNewFilterRowIfNotExists(config);\\n        }\\n\\n        _createNewFilterRowIfNotExists (config) {\\n            let emptyRow = this.shadowRoot.querySelector('.sl-filter-builder-remove-disabled');\\n            if (emptyRow) {\\n                return;\\n            }\\n\\n            let row = this._createNewFilterRow(config);\\n            this._getMain().appendChild(row);\\n        }\\n\\n        _createNewFilterRow (config) {\\n            let row = document.createElement('div');\\n            row.classList.add('sl-filter-builder-row');\\n\\n            let remove = this._createRemove();\\n            remove.addEventListener('click', () => {\\n                if (row && row.parentNode) {\\n                    row.parentNode.removeChild(row);\\n                }\\n                this._fireFilterEventIfValid();\\n            });\\n\\n            let fields = this._createFieldSelector(config);\\n            fields.addEventListener('change', (e) => {\\n                let item = this._findItemByName(config, fields.value);\\n                this._populateFilterOperations(row, item);\\n                this._createNewFilterRowIfNotExists(config);\\n            });\\n\\n            row.appendChild(remove);\\n            row.appendChild(fields);\\n\\n            return row;\\n        }\\n\\n        _createRemove () {\\n            let remove = document.createElement('div');\\n            remove.classList.add('fa');\\n            remove.classList.add('sl-filter-builder-remove');\\n            remove.classList.add('sl-filter-builder-remove-disabled');\\n            remove.innerHTML = '&#xf00d;';\\n            return remove;\\n        }\\n\\n        _createFieldSelector (config) {\\n            let fieldSelector = document.createElement('select');\\n            fieldSelector.classList.add('mc-select');\\n            fieldSelector.classList.add('sl-filter-builder-fieldselector');\\n            fieldSelector.appendChild(this._createDefaultOption());\\n            for (let item of config) {\\n                let option = document.createElement('option');\\n                option.textContent = item.text;\\n                option.value = item.name;\\n                fieldSelector.appendChild(option);\\n            }\\n            return fieldSelector;\\n        }\\n\\n        _createDefaultOption () {\\n            let defaultOption = document.createElement('option');\\n            defaultOption.disabled = true;\\n            defaultOption.selected = true;\\n            defaultOption.classList.add('sl-filter-builder-empty-option');\\n            defaultOption.textContent = 'Select...';\\n            return defaultOption;\\n        }\\n\\n        _findItemByName (items, name) {\\n            return items.find(item => {\\n                return item.name === name;\\n            });\\n        }\\n\\n        _removeFilterOperations (row) {\\n            let operation = row.querySelector('.sl-filter-builder-operation');\\n            if (operation) {\\n                operation.remove();\\n            }\\n            let keyInput = row.querySelector('.sl-filter-builder-key');\\n            if (keyInput) {\\n                keyInput.remove();\\n            }\\n            let valueInput = row.querySelector('.sl-filter-builder-value');\\n            if (valueInput) {\\n                valueInput.remove();\\n            }\\n        }\\n\\n        _populateFilterOperations (row, item) {\\n            this._removeFilterOperations(row);\\n\\n            let remove = row.querySelector('.sl-filter-builder-remove');\\n            remove.classList.remove('sl-filter-builder-remove-disabled');\\n\\n            let keyInput = this._createKeyInput();\\n            keyInput.addEventListener('change', () => {\\n                this._fireFilterEventIfValid();\\n            });\\n            let operation = this._createOperation(item);\\n            let valueInput = this._createValueInput(item);\\n            valueInput.addEventListener('change', () => {\\n                this._fireFilterEventIfValid();\\n            });\\n\\n            row.appendChild(operation);\\n            if (item.type === 'KeyValue') {\\n                row.appendChild(keyInput);\\n            }\\n            row.appendChild(valueInput);\\n        }\\n\\n        _createOperation (item) {\\n            if (item.operations.length === 1) {\\n                return this._createSingleOperation(item.operations);\\n            }\\n            return this._createMultiOperation(item.operations);\\n        }\\n\\n        _createSingleOperation (operations) {\\n            let operation = document.createElement('div');\\n            operation.classList.add('sl-filter-builder-operation');\\n            operation.textContent = operations[0].text;\\n            operation.setAttribute('data-operation', operations[0].name);\\n            return operation;\\n        }\\n\\n        _createMultiOperation (operations) {\\n            let operationSelect = document.createElement('select');\\n            operationSelect.classList.add('mc-select');\\n            operationSelect.classList.add('sl-filter-builder-operation');\\n            operationSelect.classList.add('sl-filter-builder-select-operation');\\n            return this._getSelectWithOperations(operationSelect, operations);\\n        }\\n\\n        _getSelectWithOperations (operationSelect, operations) {\\n            operationSelect.appendChild(this._createDefaultOption());\\n            for (let operation of operations) {\\n                let option = document.createElement('option');\\n                option.textContent = operation.text;\\n                option.value = operation.name;\\n                operationSelect.appendChild(option);\\n            }\\n            return operationSelect;\\n        }\\n\\n        _createKeyInput () {\\n            let valueInput = document.createElement('input');\\n            valueInput.classList.add('sl-filter-builder-key');\\n            valueInput.classList.add('mc-input');\\n            valueInput.placeholder = 'Key';\\n            return valueInput;\\n        }\\n\\n        _createValueInput (item) {\\n            let valueInput = document.createElement('input');\\n            if (item.type === 'KeyValue') {\\n                valueInput.classList.add('sl-filter-builder-value-keyvalue');\\n            }\\n            valueInput.classList.add('sl-filter-builder-value');\\n            valueInput.classList.add('mc-input');\\n            valueInput.placeholder = 'Value';\\n            return valueInput;\\n        }\\n\\n        _valid () {\\n            let inputs = this.shadowRoot.querySelectorAll('.sl-filter-builder-key, .sl-filter-builder-value');\\n            return this._validInputs(inputs);\\n        }\\n\\n        _validInputs (inputs) {\\n            let isValid = true;\\n            for (let input of inputs) {\\n                if (input.value === '') {\\n                    input.classList.add('error');\\n                    isValid = false;\\n                } else {\\n                    input.classList.remove('error');\\n                }\\n            }\\n            return isValid;\\n        }\\n\\n        _fireFilterEventIfValid () {\\n            if (this._valid()) {\\n                let filters = this._createRowFilters();\\n                this._fireFilterEvent(filters);\\n            }\\n        }\\n\\n        _fireFilterEvent (filters) {\\n            let eventData = { filters: filters };\\n            this.dispatchEvent(new CustomEvent('filter', { detail: eventData }));\\n        }\\n\\n        _createRowFilters () {\\n            let rows = [...this._getFilterRows()];\\n            return rows\\n                .map(this._createRowFilter.bind(this))\\n                .filter(function (f) {\\n                    return f !== undefined;\\n                });\\n        }\\n\\n        _createRowFilter (row) {\\n            let fieldSelector = row.querySelector('.sl-filter-builder-fieldselector');\\n            let valueInput = row.querySelector('.sl-filter-builder-value');\\n            let operation = row.querySelector('.sl-filter-builder-operation');\\n\\n            if (!fieldSelector || !operation || !valueInput) {\\n                return;\\n            }\\n\\n            operation = this._getOperationValue(operation);\\n\\n            let filter = {\\n                name: fieldSelector.value,\\n                operation: operation,\\n                value: valueInput.value\\n            };\\n\\n            let keyInput = row.querySelector('.sl-filter-builder-key');\\n            if (keyInput) {\\n                filter.key = keyInput.value;\\n            }\\n            return filter;\\n        }\\n\\n        _getOperationValue (operation) {\\n            if (operation.type === 'select-one') {\\n                return operation.value;\\n            }\\n            return operation.getAttribute('data-operation');\\n        }\\n\\n        _getFilterRows () {\\n            return this.shadowRoot.querySelectorAll('.sl-filter-builder-row');\\n        }\\n\\n        _getMain () {\\n            return this.shadowRoot.querySelector('.sl-filter-builder-main');\\n        }\\n    }\\n\\n    componentUtils.registerCustomElement('sl-filter-builder', SLFilterBuilder);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}