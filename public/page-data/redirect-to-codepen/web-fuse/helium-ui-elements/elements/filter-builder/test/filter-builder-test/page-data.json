{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/filter-builder/test/filter-builder-test","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../filter-builder.js';\\n\\nimport { createFixture, isVisible, selectOption, enterValue } from '../../test/test-utils.js';\\nimport { FilterBuilderPage } from './filter-builder-page.js';\\n\\ndescribe('SL Filter Builder', () => {\\n    beforeEach(function () {\\n        this.page = new FilterBuilderPage();\\n    });\\n\\n    describe('Basic', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<sl-filter-builder>\\n                    <sl-filter-builder-item name=\\\"path\\\" text=\\\"Path\\\">\\n                        <sl-filter-builder-operation name=\\\"MATCHES\\\" text=\\\"matches\\\"></sl-filter-builder-operation>\\n                    </sl-filter-builder-item>\\n                    <sl-filter-builder-item name=\\\"keywords\\\" text=\\\"Keywords\\\">\\n                        <sl-filter-builder-operation name=\\\"EQUALS\\\" text=\\\"equals\\\"></sl-filter-builder-operation>\\n                    </sl-filter-builder-item>\\n                    <sl-filter-builder-item name=\\\"properties\\\" text=\\\"Properties\\\" type=\\\"KeyValue\\\">\\n                        <sl-filter-builder-operation name=\\\"EQUALS\\\" text=\\\"equals\\\"></sl-filter-builder-operation>\\n                    </sl-filter-builder-item>\\n                 </sl-filter-builder>`);\\n        });\\n\\n        it('should support multiple operations', function () {\\n            this.element = createFixture(\\n                `<sl-filter-builder>\\n                    <sl-filter-builder-item name=\\\"path\\\" text=\\\"Path\\\">\\n                        <sl-filter-builder-operation name=\\\"MATCHES\\\" text=\\\"matches\\\"></sl-filter-builder-operation>\\n                        <sl-filter-builder-operation name=\\\"NOT_MATCHES\\\" text=\\\"does not match\\\"></sl-filter-builder-operation>\\n                    </sl-filter-builder-item>\\n                 </sl-filter-builder>`);\\n\\n            this.element.addEventListener('filter', (e) => {\\n                this.clickEvent = e;\\n            });\\n\\n            let propertySelectName = 'path';\\n            let propertyOperatorName = 'NOT_MATCHES';\\n            let propertyValue = 'path_value';\\n            selectOption(this.page.getFieldSelector(0), propertySelectName);\\n            selectOption(this.page.getFieldSelectorOperation(0), propertyOperatorName);\\n\\n            enterValue(this.page.getValueInput(0), propertyValue);\\n\\n            expect(this.clickEvent.detail).toEqual({\\n                filters: [\\n                    { name: propertySelectName, operation: propertyOperatorName, value: propertyValue }\\n                ]\\n            });\\n        });\\n\\n        it('should show the filter builder', function () {\\n            let main = this.page.getMain();\\n\\n            expect(isVisible(main)).toBeTruthy();\\n        });\\n\\n        it('should a single row with disabled remove button and field selector', function () {\\n            let rows = this.page.getRows();\\n            expect(rows.length).toBe(1);\\n\\n            let removeButton = this.page.getRemoveButton(0);\\n            expect(removeButton.classList.contains('sl-filter-builder-remove-disabled')).toBeTruthy();\\n\\n            let fieldSelector = this.page.getFieldSelector(0);\\n            expect(fieldSelector.value).toBe('Select...');\\n        });\\n\\n        it('should add new filer row on field selection', function () {\\n            selectOption(this.page.getFieldSelector(0), 'path');\\n\\n            let rows = this.page.getRows();\\n            expect(rows.length).toBe(2);\\n        });\\n\\n        it('should remove filter row on X click', function () {\\n            selectOption(this.page.getFieldSelector(0), 'properties');\\n\\n            this.page.clickRemoveButton(0);\\n\\n            let rows = this.page.getRows();\\n            expect(rows.length).toBe(1);\\n\\n            let fieldSelector = this.page.getFieldSelector(0);\\n            let keyInput = this.page.getKeyInput(0);\\n            let operation = this.page.getOperation(0);\\n            let valueInput = this.page.getValueInput(0);\\n            expect(fieldSelector.value).toBe('Select...');\\n            expect(keyInput).toBeNull();\\n            expect(operation).toBeNull();\\n            expect(valueInput).toBeNull();\\n        });\\n\\n        it('should show value input for MATCHES operator', function () {\\n            selectOption(this.page.getFieldSelector(0), 'path');\\n\\n            let keyInput = this.page.getKeyInput(0);\\n            let operation = this.page.getOperation(0);\\n            let valueInput = this.page.getValueInput(0);\\n\\n            expect(keyInput).toBeNull();\\n            expect(operation.textContent).toBe('matches');\\n            expect(valueInput).toBeDefined();\\n        });\\n\\n        it('should show value input for EQUALS operator', function () {\\n            selectOption(this.page.getFieldSelector(0), 'keywords');\\n\\n            let keyInput = this.page.getKeyInput(0);\\n            let operation = this.page.getOperation(0);\\n            let valueInput = this.page.getValueInput(0);\\n\\n            expect(keyInput).toBeNull();\\n            expect(operation.textContent).toBe('equals');\\n            expect(valueInput).toBeDefined();\\n        });\\n\\n        it('should show key and value input for KeyValue filter', function () {\\n            selectOption(this.page.getFieldSelector(0), 'properties');\\n\\n            let keyInput = this.page.getKeyInput(0);\\n            let operation = this.page.getOperation(0);\\n            let valueInput = this.page.getValueInput(0);\\n\\n            expect(keyInput).toBeDefined();\\n            expect(operation.textContent).toBe('equals');\\n            expect(valueInput).toBeDefined();\\n        });\\n\\n        it('should change inputs when changing field', function () {\\n            selectOption(this.page.getFieldSelector(0), 'keywords');\\n\\n            selectOption(this.page.getFieldSelector(0), 'properties');\\n\\n            let keyInput = this.page.getKeyInput(0);\\n            let operation = this.page.getOperation(0);\\n            let valueInput = this.page.getValueInput(0);\\n\\n            expect(keyInput).toBeDefined();\\n            expect(operation.textContent).toBe('equals');\\n            expect(valueInput).toBeDefined();\\n        });\\n\\n        it('should fire filter event on value change', function () {\\n            this.element.addEventListener('filter', (e) => {\\n                this.clickEvent = e;\\n            });\\n            selectOption(this.page.getFieldSelector(0), 'path');\\n\\n            enterValue(this.page.getValueInput(0), 'my-tag-path');\\n\\n            expect(this.clickEvent.detail).toEqual({\\n                filters: [\\n                    { name: 'path', operation: 'MATCHES', value: 'my-tag-path' }\\n                ]\\n            });\\n        });\\n\\n        it('should fire filter event with multiple filter expressions', function () {\\n            this.element.addEventListener('filter', (e) => {\\n                this.clickEvent = e;\\n            });\\n\\n            selectOption(this.page.getFieldSelector(0), 'path');\\n            enterValue(this.page.getValueInput(0), 'my-tag-path');\\n\\n            selectOption(this.page.getFieldSelector(1), 'properties');\\n            enterValue(this.page.getKeyInput(1), 'prop-key');\\n            enterValue(this.page.getValueInput(1), 'prop-value');\\n\\n            expect(this.clickEvent.detail).toEqual({\\n                filters: [\\n                    { name: 'path', operation: 'MATCHES', value: 'my-tag-path' },\\n                    { name: 'properties', operation: 'EQUALS', key: 'prop-key', value: 'prop-value' }\\n                ]\\n            });\\n        });\\n\\n        it('should show validation error when value is empty', function () {\\n            selectOption(this.page.getFieldSelector(0), 'properties');\\n            enterValue(this.page.getKeyInput(0), 'my-key');\\n\\n            expect(this.page.getValueInput(0).classList).toContain('error');\\n        });\\n\\n        it('should not fire filter event when value is empty', function () {\\n            this.element.addEventListener('filter', (e) => {\\n                this.clickEvent = e;\\n            });\\n            selectOption(this.page.getFieldSelector(0), 'properties');\\n            enterValue(this.page.getKeyInput(0), 'my-key');\\n\\n            expect(this.clickEvent).toBeUndefined();\\n        });\\n\\n        it('should show validation error when key is empty', function () {\\n            selectOption(this.page.getFieldSelector(0), 'properties');\\n            enterValue(this.page.getValueInput(0), 'my-value');\\n\\n            expect(this.page.getKeyInput(0).classList).toContain('error');\\n        });\\n\\n        it('should not fire filter event when key is empty', function () {\\n            this.element.addEventListener('filter', (e) => {\\n                this.clickEvent = e;\\n            });\\n            selectOption(this.page.getFieldSelector(0), 'properties');\\n            enterValue(this.page.getValueInput(0), 'my-value');\\n\\n            expect(this.clickEvent).toBeUndefined();\\n        });\\n    });\\n});\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}