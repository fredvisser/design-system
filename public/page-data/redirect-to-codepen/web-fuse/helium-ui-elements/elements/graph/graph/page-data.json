{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/graph/graph","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import { componentUtils } from '../common/component-utils.js';\\nimport { html } from '../../library/html-utils.js';\\n\\nimport webchartsStyle from '../../../node_modules/ni-webcharts/styles/webchartsLight.css';\\nimport jqxBaseStyle from '../../../node_modules/jqwidgets-scripts/jqwidgets/styles/jqx.base.css';\\nimport jqxFreshStyle from '../../../node_modules/jqwidgets-scripts/jqwidgets/styles/jqx.fresh.css';\\nimport webchartsLegendsStyle from '../../../node_modules/ni-webcharts-legends/styles/webcharts-legends.css';\\nimport webchartsLegendsIconStyle from '../../../node_modules/ni-webcharts-legends/styles/webcharts-legends.icons.css';\\nimport graphStyle from './graph.css';\\n\\nconst styles = [webchartsStyle, jqxBaseStyle, jqxFreshStyle, webchartsLegendsStyle, webchartsLegendsIconStyle, graphStyle];\\n\\nconst PLOT_COLORS = [\\n    'rgba(67, 134, 185, 1)', 'rgba(123, 22, 26, 1)', 'rgba(226, 182, 131, 1)', 'rgba(183, 172, 31, 1)', 'rgba(174, 220, 239, 1)',\\n    'rgba(160, 139, 176, 1)', 'rgba(127, 127, 127, 1)', 'rgba(60, 7, 38, 1)', 'rgba(213, 255, 0, 1)', 'rgba(255, 0, 86, 1)',\\n    'rgba(158, 0, 142, 1)', 'rgba(14, 76, 161, 1)', 'rgba(255, 229, 2, 1)', 'rgba(0, 95, 57, 1)', 'rgba(0, 255, 0, 1)',\\n    'rgba(149, 0, 58, 1)', 'rgba(255, 147, 126, 1)', 'rgba(164, 36, 0, 1)', 'rgba(0, 21, 68, 1)', 'rgba(145, 208, 203, 1)',\\n    'rgba(98, 14, 0, 1)', 'rgba(107, 104, 130, 1)', 'rgba(0, 0, 255, 1)', 'rgba(0, 125, 181, 1)', 'rgba(106, 130, 108, 1)',\\n    'rgba(0, 174, 126, 1)', 'rgba(194, 140, 159, 1)', 'rgba(190, 153, 112, 1)', 'rgba(0, 143, 156, 1)', 'rgba(95, 173, 78, 1)',\\n    'rgba(255, 0, 0, 1)', 'rgba(255, 0, 246, 1)', 'rgba(255, 2, 157, 1)', 'rgba(104, 61, 59, 1)', 'rgba(255, 116, 163, 1)',\\n    'rgba(150, 138, 232, 1)', 'rgba(152, 255, 82, 1)', 'rgba(167, 87, 64, 1)', 'rgba(1, 255, 254, 1)', 'rgba(255, 238, 232, 1)',\\n    'rgba(254, 137, 0, 1)', 'rgba(189, 198, 255, 1)', 'rgba(1, 208, 255, 1)', 'rgba(187, 136, 0, 1)', 'rgba(117, 68, 177, 1)',\\n    'rgba(165, 255, 210, 1)', 'rgba(255, 166, 254, 1)', 'rgba(119, 77, 0, 1)', 'rgba(122, 71, 130, 1)', 'rgba(38, 52, 0, 1)',\\n    'rgba(0, 71, 84, 1)', 'rgba(67,, 0, 44, 1)', 'rgba(181, 0, 255, 1)', 'rgba(255, 177, 103, 1)', 'rgba(255, 219, 102, 1)',\\n    'rgba(144, 251, 146, 1)', 'rgba(126, 45, 210, 1)', 'rgba(189, 211, 147, 1)', 'rgba(229, 111, 254, 1)', 'rgba(222, 255, 116, 1)',\\n    'rgba(0, 255, 120, 1)', 'rgba(0, 155, 255, 1)', 'rgba(0, 100, 1, 1)', 'rgba(0, 118, 255, 1)', 'rgba(133, 169, 0, 1)',\\n    'rgba(0, 185, 23, 1)', 'rgba(120, 130, 49, 1)', 'rgba(0, 255, 198, 1)', 'rgba(255, 110, 65, 1)', 'rgba(232, 94, 190, 1)'\\n];\\n\\n// The difference between JS epoch (1970) and LV Epoch (1904) in seconds\\nconst LV_EPOCH_DIFF_IN_SECONDS = 2082844800;\\n// Offset in seconds for timestamp representation in webcharts\\nconst EPOCH_OFFSET_IN_SECONDS = 62135596800;\\n\\n(function () {\\n    class SLGraph extends HTMLElement {\\n        set data (data) {\\n            this._data = data;\\n            this._renderData(this._data);\\n        }\\n\\n        get data () {\\n            return this._data;\\n        }\\n\\n        connectedCallback () {\\n            componentUtils.upgradeProperty(this, 'data');\\n            this._init();\\n            this._render();\\n            this._renderData(this._data);\\n        }\\n\\n        _onGraphLoaded () {\\n            this._initialized = true;\\n            this._renderData(this._data);\\n        }\\n\\n        _init () {\\n            this._i18nPath = this.getAttribute('i18n-path') || '';\\n            this._webchartsPath = this.getAttribute('webcharts-path') || 'niwebcharts-5.4.2.js';\\n            this._plots = this._createPlots();\\n\\n            window.i18nPath = this._i18nPath;\\n            window.i18nFiles = window.i18nFiles || [];\\n            if (!window.i18nFiles.includes('Webcharts')) {\\n                window.i18nFiles.push('Webcharts');\\n            }\\n        }\\n\\n        _createPlots () {\\n            let elements = [...this.querySelectorAll('sl-graph-plot')];\\n            return elements.map((item, i) => {\\n                return {\\n                    label: item.getAttribute('label'),\\n                    color: PLOT_COLORS[i % PLOT_COLORS.length]\\n                };\\n            });\\n        }\\n\\n        _render () {\\n            componentUtils.addStylesToElement(this, styles);\\n\\n            let container = document.createElement('div');\\n            container.classList.add('sl-graph-container');\\n            container.innerHTML = `\\n            <ni-cartesian-graph id=\\\"sl-graph-main\\\" graph-ref=\\\"28\\\">\\n                <ni-cartesian-axis id=\\\"sl-graph-x-axis\\\" show axis-ref=\\\"Time\\\" label=\\\"Time\\\" show-label axis-position=\\\"bottom\\\" showTickLabels=\\\"major\\\" format=\\\"LVTime:\\\"></ni-cartesian-axis>\\n                <ni-cartesian-axis id=\\\"sl-graph-y-axis\\\" show axis-ref=\\\"Value\\\" label=\\\"Value\\\" show-label axis-position=\\\"left\\\" format=\\\"Int32\\\"></ni-cartesian-axis>\\n                ${this._plots.map((plot) => html`\\n                    <ni-cartesian-plot show xaxis=\\\"Time\\\" yaxis=\\\"Value\\\" label=\\\"${plot.label}\\\" enable-hover class=\\\"ni-cartesian-plot-element\\\">\\n                        <ni-cartesian-plot-renderer line-width=\\\"1\\\" line-stroke=\\\"${plot.color}\\\" point-color=\\\"${plot.color}\\\" class=\\\"ni-cartesian-plot-renderer-element\\\"></ni-cartesian-plot-renderer>\\n                    </ni-cartesian-plot>\\n                `.trim()).join('')}\\n            </ni-cartesian-graph>\\n            <ni-light-plot-legend show graph-ref=\\\"28\\\"></ni-light-plot-legend>\\n            <ni-plot-legend tooltips graph-ref=\\\"28\\\"></ni-plot-legend>\\n            <ni-graph-tools graph-ref=\\\"28\\\" mode=\\\"locked\\\"></ni-graph-tools>\\n            `;\\n            this.appendChild(container);\\n\\n            this._attachEvents();\\n\\n            let depsScript = document.createElement('script');\\n            depsScript.src = this._webchartsPath;\\n            depsScript.defer = true;\\n            this.appendChild(depsScript);\\n        }\\n\\n        _formatTooltip (xVal, yVal) {\\n            return html`<div class=\\\"sl-graph-tooltip\\\">\\n                            <b>Time: </b>${this._intToDate(xVal)}<br/>\\n                            <b>Value: </b>${yVal}\\n                        </div>`;\\n        }\\n\\n        _attachEvents () {\\n            let graph = this._getGraph();\\n            graph.onReady = () => this._onGraphLoaded();\\n\\n            let plots = [...document.querySelectorAll('ni-cartesian-plot')];\\n            for (let plot of plots) {\\n                plot.hoverFormat = this._formatTooltip.bind(this);\\n            }\\n        }\\n\\n        _renderData (data) {\\n            if (!data || !this._initialized) {\\n                return;\\n            }\\n            let formattedData = data.map((d) => {\\n                return {\\n                    Timestamp: this._formatTimestamps(d.Timestamp),\\n                    Values: d.Values\\n                };\\n            });\\n\\n            this._updateAxis(formattedData);\\n\\n            let graph = this._getGraph();\\n            graph.setData(formattedData);\\n        }\\n\\n        _updateAxis (data) {\\n            let limits = this._getLimits(data);\\n            let x = this._getXAxis();\\n            x.setAttribute('minimum', limits.timestamp.min || 0);\\n            x.setAttribute('maximum', limits.timestamp.max || 0);\\n            let y = this._getYAxis();\\n            y.setAttribute('minimum', limits.value.min || 0);\\n            y.setAttribute('maximum', limits.value.max || 0);\\n        }\\n\\n        _getLimits (data) {\\n            let timestampMin;\\n            let timestampMax;\\n            let valueMin;\\n            let valueMax;\\n            for (let entry of data) {\\n                for (let timestamp of entry.Timestamp) {\\n                    if (timestamp > timestampMax || timestampMax === undefined) {\\n                        timestampMax = timestamp;\\n                    }\\n                    if (timestamp < timestampMin || timestampMin === undefined) {\\n                        timestampMin = timestamp;\\n                    }\\n                }\\n                for (let value of entry.Values) {\\n                    if (value > valueMax || valueMax === undefined) {\\n                        valueMax = value;\\n                    }\\n                    if (value < valueMin || valueMin === undefined) {\\n                        valueMin = value;\\n                    }\\n                }\\n            }\\n\\n            return {\\n                timestamp: { min: timestampMin, max: timestampMax },\\n                value: { min: valueMin, max: valueMax }\\n            };\\n        }\\n\\n        _formatTimestamps (timestamps) {\\n            return timestamps.map((t) => this._dateToInt(t));\\n        }\\n\\n        _dateToInt (date) {\\n            /* global NITimestamp:true */\\n            let niTime = new NITimestamp(date);\\n            return niTime.seconds + EPOCH_OFFSET_IN_SECONDS - LV_EPOCH_DIFF_IN_SECONDS + niTime.fractions;\\n        }\\n\\n        _intToDate (value) {\\n            /* global NITimestamp:true */\\n            let niTime = new NITimestamp(value - EPOCH_OFFSET_IN_SECONDS + LV_EPOCH_DIFF_IN_SECONDS);\\n            let options = {\\n                year: 'numeric',\\n                month: 'short',\\n                day: 'numeric',\\n                hour: 'numeric',\\n                minute: 'numeric',\\n                second: 'numeric'\\n            };\\n            return niTime.toDate().toLocaleDateString(undefined, options);\\n        }\\n\\n        _getGraph () {\\n            return this.querySelector('#sl-graph-main');\\n        }\\n\\n        _getXAxis () {\\n            return this.querySelector('#sl-graph-x-axis');\\n        }\\n\\n        _getYAxis () {\\n            return this.querySelector('#sl-graph-y-axis');\\n        }\\n    }\\n    componentUtils.registerCustomElement('sl-graph', SLGraph);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}