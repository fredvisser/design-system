{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/grid/grid","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../pager/pager.js';\\n\\nimport buttonCss from '../common/styles/button.css';\\nimport checkboxCss from '../common/styles/checkbox.css';\\nimport linkCss from '../common/styles/link.css';\\nimport iconsCss from '../common/styles/icons.css';\\nimport gridStyle from './grid.css';\\n\\nimport { componentUtils } from '../common/component-utils.js';\\nimport { dateUtils } from '../common/date-utils.js';\\n\\nconst styles = [buttonCss, checkboxCss, linkCss, iconsCss, gridStyle];\\n\\n(function () {\\n    class SLGrid extends HTMLElement {\\n        constructor () {\\n            super();\\n\\n            this._outsideMenuClickHandler = e => {\\n                let target = e.composedPath()[0];\\n\\n                let contents = this.shadowRoot.querySelectorAll('.sl-grid-dropdown-content');\\n                for (let content of contents) {\\n                    if (target.getAttribute('data-grid-menu-row') !== content.getAttribute('data-grid-menu-row')) {\\n                        content.parentNode.removeChild(content);\\n                    }\\n                }\\n                contents = this.shadowRoot.querySelectorAll('.sl-grid-column-select-dropdown-content');\\n                for (let content of contents) {\\n                    if (target.getAttribute('column-select-menu') !== content.getAttribute('column-select-menu')) {\\n                        content.parentNode.removeChild(content);\\n                    }\\n                }\\n            };\\n        }\\n\\n        set data (data) {\\n            this._items = data.items;\\n            this._totalCount = data.totalCount;\\n\\n            this._renderItems();\\n        }\\n\\n        connectedCallback () {\\n            componentUtils.upgradeProperty(this, 'data');\\n            if (!this.shadowRoot) {\\n                this._init();\\n                this._renderGrid();\\n            }\\n            this._renderItems();\\n            document.addEventListener('click', this._outsideMenuClickHandler);\\n        }\\n\\n        disconnectedCallback () {\\n            document.removeEventListener('click', this._outsideMenuClickHandler);\\n        }\\n\\n        _renderGrid () {\\n            this.attachShadow({ mode: 'open' });\\n\\n            let container = document.createElement('div');\\n            container.classList.add('sl-grid-main');\\n\\n            let header = this._createHeader();\\n            container.appendChild(header);\\n\\n            let body = this._createBody();\\n            container.appendChild(body);\\n\\n            let pager = this._createPager();\\n\\n            let dynamicStyle = this._createGridTemplateStyle();\\n            let dynamicStyleElement = componentUtils.createStyleElement(dynamicStyle);\\n            dynamicStyleElement.id = 'sl-grid-dynamic-style';\\n\\n            componentUtils.addStylesToElement(this.shadowRoot, styles);\\n            this.shadowRoot.appendChild(dynamicStyleElement);\\n            this.shadowRoot.appendChild(container);\\n            this.shadowRoot.appendChild(pager);\\n        }\\n\\n        _init () {\\n            this._page = 1;\\n            this._pageSize = this._parseInteger(this.getAttribute('page-size') || '20');\\n            this._pageSizeLabel = this.getAttribute('page-size-label');\\n            this._goToPageLabel = this.getAttribute('go-to-page-label');\\n            this._currentPageLabel = this.getAttribute('current-page-label');\\n            this._locale = this.getAttribute('locale');\\n            this._showSelectAll = this._parseBoolean(this.getAttribute('show-select-all') || 'false');\\n\\n            this._settings = this._loadSettings();\\n            this._columns = this._createColumns();\\n        }\\n\\n        _createColumns () {\\n            let elements = [...this.querySelectorAll('sl-grid-column')];\\n            return elements.map((item) => {\\n                return {\\n                    type: item.getAttribute('type'),\\n                    name: item.getAttribute('name'),\\n                    title: item.getAttribute('title'),\\n                    field: item.getAttribute('field'),\\n                    width: item.getAttribute('width'),\\n                    icon: item.getAttribute('icon'),\\n                    optional: this._parseBoolean(item.getAttribute('optional') || 'false'),\\n                    show: this._isColumnVisible(item),\\n                    showOnMobile: this._parseBoolean(item.getAttribute('show-on-mobile') || 'true'),\\n                    sortable: this._parseBoolean(item.getAttribute('sortable') || 'true'),\\n                    items: this._createColumnItems(item)\\n                };\\n            });\\n        }\\n\\n        _isColumnVisible (item) {\\n            let name = item.getAttribute('name');\\n            let columnSettings = this._settings.columns[name];\\n            if (columnSettings) {\\n                return columnSettings.visible;\\n            }\\n            return this._parseBoolean(item.getAttribute('show') || 'true');\\n        }\\n\\n        _createColumnItems (item) {\\n            let elements = [...item.querySelectorAll('sl-grid-column-item')];\\n            return elements.map((item) => {\\n                return {\\n                    name: item.getAttribute('name'),\\n                    title: item.getAttribute('title')\\n                };\\n            });\\n        }\\n\\n        _parseInteger (str) {\\n            return parseInt(str);\\n        }\\n\\n        _parseBoolean (str) {\\n            return str === 'true';\\n        }\\n\\n        _updateSort (sortBy, sortOrder) {\\n            let headerTexts = this._getHeaderTexts();\\n            for (let text of headerTexts) {\\n                let columnName = text.parentNode.getAttribute('data-column-name');\\n                if (columnName === sortBy && sortOrder === 'asc') {\\n                    text.classList.remove('sl-grid-sort-desc');\\n                    text.classList.add('sl-grid-sort-asc');\\n                } else if (columnName === sortBy && sortOrder === 'desc') {\\n                    text.classList.add('sl-grid-sort-desc');\\n                    text.classList.remove('sl-grid-sort-asc');\\n                } else {\\n                    text.classList.remove('sl-grid-sort-desc');\\n                    text.classList.remove('sl-grid-sort-asc');\\n                }\\n            }\\n        }\\n\\n        _createGridTemplateStyle () {\\n            let widths = '';\\n            let mobileWidths = '';\\n            for (let column of this._columns) {\\n                let width = column.show ? (column.width || '1fr') : ' 0px';\\n                widths += ' ' + width;\\n                mobileWidths += column.showOnMobile ? ' ' + width : ' 0px';\\n            }\\n\\n            let dynamicStyle = `\\n                .sl-grid-row {\\n                    display: grid;\\n                    grid-template-columns: ${widths};\\n                }\\n\\n                @media (max-width: 425px) {\\n                    .sl-grid-row {\\n                        grid-template-columns: ${mobileWidths};\\n                    }\\n                }\\n                `;\\n            return dynamicStyle;\\n        }\\n\\n        _createHeader () {\\n            let header = document.createElement('div');\\n            header.classList.add('sl-grid-header');\\n            header.classList.add('sl-grid-row');\\n\\n            for (let column of this._columns) {\\n                let element = this._createHeaderCell(column);\\n                if (this._showHeaderMenu(column, this._columns)) {\\n                    this._renderHeaderCellMenu(element);\\n                }\\n                header.appendChild(element);\\n            }\\n            return header;\\n        }\\n\\n        _createHeaderCell (column) {\\n            let element = document.createElement('div');\\n            element.classList.add('sl-grid-cell');\\n            element.setAttribute('data-column-name', column.name);\\n            element.id = 'header-cell-column-' + column.name;\\n\\n            let title = document.createElement('div');\\n            title.classList.add('sl-grid-header-text');\\n            title.textContent = column.title;\\n            element.appendChild(title);\\n\\n            if (column.sortable) {\\n                title.addEventListener('click', () => {\\n                    if (this._sortBy !== column.name) {\\n                        this._sortBy = column.name;\\n                        this._sortOrder = 'asc';\\n                    } else if (this._sortBy === column.name && this._sortOrder === 'asc') {\\n                        this._sortOrder = 'desc';\\n                    } else if (this._sortBy === column.name) {\\n                        delete this._sortBy;\\n                        delete this._sortOrder;\\n                    }\\n                    this._updateSort(this._sortBy, this._sortOrder);\\n                    this._updateEvent();\\n                });\\n            }\\n            if (this._showSelectAll && column.type === 'checkbox') {\\n                this._appendSelectAll(element);\\n            }\\n            return element;\\n        }\\n\\n        _renderHeaderCellMenu (cell) {\\n            let iconElement = document.createElement('div');\\n            iconElement.classList.add('sl-grid-cell-icon-menu');\\n            iconElement.classList.add('sl-grid-header-cell-menu');\\n            let icon = document.createElement('strong');\\n            iconElement.appendChild(icon);\\n            icon.classList.add('fa');\\n            icon.innerHTML = '&#xf078';\\n            cell.appendChild(iconElement);\\n\\n            iconElement.addEventListener('click', (e) => {\\n                if (!this._isMenuOpen('column-select-menu', cell.id)) {\\n                    let menu = this._renderColumnSelectMenu(cell.id);\\n                    menu.style.display = 'block';\\n                    menu.style.visibility = 'hidden';\\n                    this.shadowRoot.appendChild(menu);\\n\\n                    let buttonRect = iconElement.getBoundingClientRect();\\n                    let menuRect = menu.getBoundingClientRect();\\n                    menu.style.left = this._calculateInsideViewPort(buttonRect.left, menuRect.width, window.innerWidth) + 'px';\\n                    menu.style.top = (buttonRect.bottom + window.scrollY) + 'px';\\n                    menu.style.visibility = 'visible';\\n                }\\n            });\\n\\n            iconElement.setAttribute('column-select-menu', cell.id);\\n            icon.setAttribute('column-select-menu', cell.id);\\n        }\\n\\n        _calculateInsideViewPort (start, size, total) {\\n            if (start + size > total) {\\n                return total - size;\\n            }\\n            return start;\\n        }\\n\\n        _renderColumnSelectMenu (id) {\\n            let content = document.createElement('div');\\n            content.setAttribute('column-select-menu', id);\\n            content.classList.add('sl-grid-column-select-dropdown-content');\\n            content.classList.add('sl-grid-dropdown-content');\\n\\n            for (let column of this._columns) {\\n                if (column.optional) {\\n                    let menuItem = this._renderColumnSelectMenuItem(column, id);\\n                    content.appendChild(menuItem);\\n                }\\n            }\\n            return content;\\n        }\\n\\n        _renderColumnSelectMenuItem (column, id) {\\n            let checkbox = document.createElement('input');\\n            checkbox.type = 'checkbox';\\n            checkbox.id = 'sl-column-select-' + column.title;\\n            checkbox.classList.add('mc-checkbox');\\n            checkbox.classList.add('sl-grid-checkbox');\\n            checkbox.checked = column.show;\\n            checkbox.setAttribute('column-select-menu', id);\\n\\n            let label = document.createElement('label');\\n            label.setAttribute('for', checkbox.id);\\n            label.innerHTML = column.title;\\n            label.classList.add('sl-column-select-checkbox-label');\\n            label.setAttribute('column-select-menu', id);\\n\\n            let menuItem = document.createElement('div');\\n            menuItem.setAttribute('column-select-menu', id);\\n            menuItem.classList.add('dropdown-menu-item');\\n\\n            menuItem.appendChild(checkbox);\\n            menuItem.appendChild(label);\\n\\n            menuItem.addEventListener('click', () => {\\n                checkbox.checked = !checkbox.checked;\\n                column.show = checkbox.checked;\\n                let style = this._getDynamicStyleElement();\\n                style.textContent = this._createGridTemplateStyle();\\n                this._settings.columns[column.name] = { visible: checkbox.checked };\\n                this._saveSettings(this._settings);\\n            });\\n\\n            return menuItem;\\n        }\\n\\n        _appendSelectAll (element) {\\n            let checkbox = document.createElement('input');\\n            checkbox.id = 'sl-grid-select-all-checkbox';\\n            checkbox.type = 'checkbox';\\n            checkbox.classList.add('mc-checkbox');\\n            checkbox.addEventListener('change', () => {\\n                let checked = checkbox.checked;\\n                for (let c of this._getCheckboxes()) {\\n                    if (c.checked !== checked) {\\n                        c.checked = checked;\\n                        c.dispatchEvent(new Event('change'));\\n                    }\\n                }\\n            });\\n\\n            let label = document.createElement('label');\\n            label.setAttribute('for', checkbox.id);\\n\\n            element.classList.add('sl-grid-cell-checkbox');\\n            element.appendChild(checkbox);\\n            element.appendChild(label);\\n        }\\n\\n        _updateHeaderCheckbox () {\\n            if (this._showSelectAll) {\\n                let checked = true;\\n                for (let c of this._getCheckboxes()) {\\n                    if (!c.checked) {\\n                        checked = false;\\n                        break;\\n                    }\\n                }\\n\\n                let selectAllCheckbox = this._getSelectAllCheckbox();\\n                selectAllCheckbox.checked = checked;\\n            }\\n        }\\n\\n        _createBody () {\\n            let body = document.createElement('div');\\n            body.classList.add('sl-grid-body');\\n            return body;\\n        }\\n\\n        _renderItems () {\\n            if (!this._items) {\\n                return;\\n            }\\n\\n            let body = this._getBody();\\n            body.innerHTML = '';\\n            for (let [rowNumber, item] of this._items.entries()) {\\n                let row = this._renderRow(rowNumber, item);\\n                body.appendChild(row);\\n            }\\n\\n            this._updatePager();\\n            this._updateHeaderCheckbox();\\n        }\\n\\n        _renderRow (rowNumber, item) {\\n            let row = document.createElement('div');\\n            row.classList.add('sl-grid-row');\\n            if (this._isAlternateRow(rowNumber)) {\\n                row.classList.add('sl-grid-row-alt');\\n            }\\n            for (let column of this._columns) {\\n                let cell = this._renderCell(rowNumber, column, item);\\n                row.appendChild(cell);\\n            }\\n            return row;\\n        }\\n\\n        _isAlternateRow (rowNumber) {\\n            return (rowNumber & 1) === 1;\\n        }\\n\\n        _renderCell (rowNumber, column, item) {\\n            let cell = document.createElement('div');\\n            cell.classList.add('sl-grid-cell');\\n\\n            switch (column.type) {\\n            case 'checkbox':\\n                this._renderCellCheckbox(cell, column, item, rowNumber);\\n                break;\\n            case 'icon':\\n                this._renderCellIcon(cell, column, item);\\n                break;\\n            case 'icon-menu':\\n                this._renderCellIconMenu(cell, column, item, rowNumber);\\n                break;\\n            case 'text':\\n                this._renderCellText(cell, column, item);\\n                break;\\n            case 'url':\\n                this._renderCellUrl(cell, column, item);\\n                break;\\n            case 'date':\\n                this._renderCellDate(cell, column, item);\\n                break;\\n            case 'button':\\n                this._renderCellButton(cell, column, item);\\n                break;\\n            }\\n            return cell;\\n        }\\n\\n        _showHeaderMenu (column, allColumns) {\\n            let anyOptionalColumns = allColumns.some((c) => c.optional);\\n            return anyOptionalColumns && !(['checkbox', 'icon', 'icon-menu'].includes(column.type));\\n        }\\n\\n        _renderCellCheckbox (cell, column, item, rowNumber) {\\n            cell.classList.add('sl-grid-cell-checkbox');\\n\\n            let checkbox = document.createElement('input');\\n            checkbox.id = 'sl-grid-checkbox-' + rowNumber;\\n            checkbox.type = 'checkbox';\\n            checkbox.classList.add('mc-checkbox');\\n            checkbox.classList.add('sl-grid-checkbox');\\n            checkbox.checked = item.checked;\\n            checkbox.addEventListener('change', () => {\\n                item.checked = checkbox.checked;\\n                this._checkboxChangeEvent(item.checked, item);\\n                this._updateHeaderCheckbox();\\n            });\\n\\n            let label = document.createElement('label');\\n            label.setAttribute('for', checkbox.id);\\n\\n            cell.appendChild(checkbox);\\n            cell.appendChild(label);\\n        }\\n\\n        _renderCellIcon (cell, column, item) {\\n            cell.classList.add('sl-grid-cell-icon');\\n            cell.addEventListener('click', e => {\\n                this._actionEvent(column.name, item);\\n            });\\n\\n            let iconElement = document.createElement('strong');\\n            iconElement.classList.add('fa');\\n            iconElement.textContent = column.icon;\\n            cell.appendChild(iconElement);\\n        }\\n\\n        _renderCellText (cell, column, item) {\\n            cell.textContent = this._getField(item, column.field);\\n        }\\n\\n        _renderCellUrl (cell, column, item) {\\n            let text = this._getField(item, column.field);\\n            let url = this._getField(item, column.field + 'Url');\\n\\n            let link = document.createElement('a');\\n            link.classList.add('mc-link');\\n            link.href = url;\\n            link.textContent = text;\\n            cell.appendChild(link);\\n        }\\n\\n        _renderCellDate (cell, column, item) {\\n            let value = this._getField(item, column.field);\\n            let formattedDate = dateUtils.format(value, this._locale);\\n            cell.textContent = formattedDate;\\n        }\\n\\n        _renderCellButton (cell, column, item) {\\n            let button = document.createElement('button');\\n            button.classList.add('mc-button');\\n            button.classList.add('sl-grid-button');\\n            button.textContent = this._getField(item, column.field);\\n            button.addEventListener('click', e => {\\n                this._actionEvent(column.name, item);\\n            });\\n            cell.appendChild(button);\\n        }\\n\\n        _renderCellIconMenu (cell, column, item, rowNumber) {\\n            cell.classList.add('sl-grid-cell-icon-menu');\\n            cell.setAttribute('data-grid-menu-row', rowNumber);\\n\\n            let iconElement = document.createElement('strong');\\n            iconElement.classList.add('fa');\\n            iconElement.textContent = column.icon;\\n            iconElement.setAttribute('data-grid-menu-row', rowNumber);\\n            cell.appendChild(iconElement);\\n\\n            cell.addEventListener('click', (e) => {\\n                if (this._isMenuOpen('data-grid-menu-row', rowNumber)) {\\n                    return;\\n                }\\n\\n                let menu = this._createMenu(column.items, item);\\n                menu.setAttribute('data-grid-menu-row', rowNumber);\\n                let rect = cell.getBoundingClientRect();\\n                menu.style.left = (rect.left + window.scrollX) + 'px';\\n                menu.style.top = (rect.bottom + window.scrollY) + 'px';\\n                this.shadowRoot.appendChild(menu);\\n            });\\n        }\\n\\n        _getField (item, field) {\\n            let pathArray = field.split('.');\\n            return pathArray.reduce((obj, key) => (obj && obj[key] !== 'undefined') ? obj[key] : '', item);\\n        }\\n\\n        _isMenuOpen (indexAttribute, value) {\\n            return this.shadowRoot.querySelector(`.sl-grid-dropdown-content[${indexAttribute}=\\\"${value}\\\"]`) !== null;\\n        }\\n\\n        _createMenu (menuItems, item) {\\n            let content = document.createElement('div');\\n            content.classList.add('sl-grid-dropdown-content');\\n\\n            for (let menuItem of menuItems) {\\n                let link = this._createMenuItemLink(menuItem, item);\\n                content.appendChild(link);\\n            }\\n            return content;\\n        }\\n\\n        _createMenuItemLink (menuItem, item) {\\n            let link = document.createElement('a');\\n            link.textContent = menuItem.title;\\n            link.addEventListener('click', e => {\\n                this._actionEvent(menuItem.name, item);\\n            });\\n            return link;\\n        }\\n\\n        _createPager () {\\n            let pager = document.createElement('mc-pager');\\n            pager.setAttribute('page-size-label', this._pageSizeLabel);\\n            pager.setAttribute('go-to-page-label', this._goToPageLabel);\\n            pager.setAttribute('current-page-label', this._currentPageLabel);\\n\\n            pager.addEventListener('page-change', (e) => {\\n                this._page = e.detail.page;\\n                this._pageSize = e.detail.pageSize;\\n                this._updateEvent();\\n            });\\n\\n            return pager;\\n        }\\n\\n        _updatePager () {\\n            let pager = this.shadowRoot.querySelector('mc-pager');\\n            pager.setAttribute('page-size', this._pageSize);\\n            pager.setAttribute('page', this._page);\\n            pager.setAttribute('items', this._totalCount);\\n        }\\n\\n        _checkboxChangeEvent (checked, item) {\\n            let event = new Event('grid-checkbox-change');\\n            event.detail = {\\n                checked: checked,\\n                item: item\\n            };\\n            this.dispatchEvent(event);\\n        }\\n\\n        _actionEvent (action, item) {\\n            let event = new Event('grid-action');\\n            event.detail = {\\n                action: action,\\n                item: item\\n            };\\n            this.dispatchEvent(event);\\n        }\\n\\n        _updateEvent () {\\n            let eventData = {\\n                page: this._page,\\n                pageSize: this._pageSize,\\n                sortBy: this._sortBy,\\n                sortOrder: this._sortOrder\\n            };\\n            this.dispatchEvent(new CustomEvent('grid-update-data', { detail: eventData }));\\n        }\\n\\n        _getHeaderTexts () {\\n            return this.shadowRoot.querySelectorAll('.sl-grid-header-text');\\n        }\\n\\n        _getBody () {\\n            return this.shadowRoot.querySelector('.sl-grid-body');\\n        }\\n\\n        _getSelectAllCheckbox () {\\n            return this.shadowRoot.querySelector('#sl-grid-select-all-checkbox');\\n        }\\n\\n        _getCheckboxes () {\\n            return this.shadowRoot.querySelectorAll('.sl-grid-checkbox');\\n        }\\n\\n        _getDynamicStyleElement () {\\n            return this.shadowRoot.querySelector('#sl-grid-dynamic-style');\\n        }\\n\\n        _loadSettings () {\\n            let settings = localStorage.getItem(this.id + '-settings');\\n            if (!settings) {\\n                return { columns: {} };\\n            }\\n            return JSON.parse(settings);\\n        }\\n\\n        _saveSettings (settings) {\\n            if (this._shouldSaveSettings()) {\\n                localStorage.setItem(this.id + '-settings', JSON.stringify(settings));\\n            }\\n        }\\n\\n        _shouldSaveSettings () {\\n            if (this.id) {\\n                return true;\\n            }\\n            return false;\\n        }\\n    }\\n\\n    componentUtils.registerCustomElement('sl-grid', SLGrid);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}