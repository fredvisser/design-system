{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/grid/test/grid-test","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../grid.js';\\n\\nimport { createFixture, isVisible } from '../../test/test-utils.js';\\nimport { GridPage } from './grid-page.js';\\n\\ndescribe('SL Grid', () => {\\n    let generateItems = function (count) {\\n        let result = [];\\n        for (let i = 1; i <= count; i++) {\\n            result.push({\\n                id: i,\\n                name: 'webapp ' + i,\\n                nameUrl: 'https://www.systemlinkcloud.com/' + i,\\n                sharing: 'public',\\n                dateCreated: new Date(2019, 2, 3, 14, 1, 1, 123),\\n                update: 'UPDATE'\\n            });\\n        }\\n        return result;\\n    };\\n\\n    let loadItems = function (totalCount, page, pageSize, sortBy, sortOrder) {\\n        let allItems = generateItems(totalCount);\\n        if (sortBy === 'name' && sortOrder === 'desc') {\\n            allItems.reverse();\\n        }\\n\\n        let startIndex = (page - 1) * pageSize;\\n        let endIndex = page * pageSize;\\n        return allItems.slice(startIndex, endIndex);\\n    };\\n\\n    let isCellVisible = function (cell) {\\n        return window.getComputedStyle(cell).getPropertyValue('width') !== '0px';\\n    };\\n\\n    beforeEach(function () {\\n        localStorage.clear();\\n        this.page = new GridPage();\\n    });\\n\\n    describe('Basic', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<sl-grid page-size=\\\"5\\\" locale=\\\"en-US\\\" go-to-page-label=\\\"Go to page: \\\" page-size-label=\\\"Show rows: \\\" current-page-label=\\\"{from}-{to} of {total}\\\">\\n                   <sl-grid-column type=\\\"checkbox\\\" name=\\\"selection\\\" width=\\\"35px\\\"></sl-grid-column>\\n                   <sl-grid-column type=\\\"icon-menu\\\" name=\\\"edit\\\" width=\\\"30px\\\" icon=\\\"&#xf013;\\\">\\n                     <sl-grid-column-item name=\\\"rename\\\" title=\\\"Rename\\\"></sl-grid-column-item>\\n                     <sl-grid-column-item name=\\\"delete\\\" title=\\\"Delete\\\"></sl-grid-column-item>\\n                     <sl-grid-column-item name=\\\"modify-policy\\\" title=\\\"Modify security policy\\\"></sl-grid-column-item>\\n                   </sl-grid-column>\\n                   <sl-grid-column type=\\\"icon\\\" name=\\\"share\\\" width=\\\"30px\\\" icon=\\\"&#xf1e0;\\\"></sl-grid-column>\\n                   <sl-grid-column type=\\\"url\\\" name=\\\"name\\\" title=\\\"Name\\\" field=\\\"name\\\"></sl-grid-column>\\n                   <sl-grid-column type=\\\"text\\\" optional=\\\"true\\\" name=\\\"sharing\\\" title=\\\"Sharing\\\" field=\\\"sharing\\\" width=\\\"100px\\\" show-on-mobile=\\\"false\\\"></sl-grid-column>\\n                   <sl-grid-column type=\\\"date\\\" optional=\\\"true\\\" show=\\\"false\\\" name=\\\"dateCreated\\\" title=\\\"Date added\\\" field=\\\"dateCreated\\\" width=\\\"200px\\\" show-on-mobile=\\\"false\\\"></sl-grid-column>\\n                   <sl-grid-column type=\\\"button\\\" name=\\\"update\\\" title=\\\"\\\" field=\\\"update\\\" width=\\\"100px\\\" show-on-mobile=\\\"false\\\"></sl-grid-column>\\n                 </sl-grid>`);\\n            this.element.data = {\\n                items: loadItems(11, 1, 5),\\n                totalCount: 11\\n            };\\n            this.element.addEventListener('grid-update-data', (e) => {\\n                let page = e.detail.page;\\n                let pageSize = e.detail.pageSize;\\n                let sortBy = e.detail.sortBy;\\n                let sortOrder = e.detail.sortOrder;\\n                this.element.data = {\\n                    items: loadItems(11, page, pageSize, sortBy, sortOrder),\\n                    totalCount: 11\\n                };\\n            });\\n        });\\n\\n        it('should show grid', function () {\\n            let main = this.page.getMain();\\n\\n            expect(isVisible(main)).toBeTruthy();\\n        });\\n\\n        it('should render header', function () {\\n            let headerTexts = this.page.getHeaderTexts();\\n\\n            expect(headerTexts[0].textContent).toBe('');\\n            expect(headerTexts[1].textContent).toBe('');\\n            expect(headerTexts[2].textContent).toBe('');\\n            expect(headerTexts[3].textContent).toBe('Name');\\n            expect(headerTexts[4].textContent).toBe('Sharing');\\n            expect(headerTexts[5].textContent).toBe('Date added');\\n            expect(headerTexts[6].textContent).toBe('');\\n        });\\n\\n        it('should render url cell', function () {\\n            let cell = this.page.getCell(0, 3);\\n            let link = this.page.getLink(cell);\\n\\n            expect(link.textContent).toBe('webapp 1');\\n            expect(link.href).toBe('https://www.systemlinkcloud.com/1');\\n        });\\n\\n        it('should render text cell', function () {\\n            let cell = this.page.getCell(0, 4);\\n            expect(cell.textContent).toBe('public');\\n        });\\n\\n        it('should render date cell', function () {\\n            let cell = this.page.getCell(0, 5);\\n            expect(cell.textContent).toBe('Mar 3, 2019 at 2:01 PM');\\n        });\\n\\n        it('should render button cell', function () {\\n            let cell = this.page.getCell(0, 6);\\n            let button = this.page.getButton(cell);\\n\\n            expect(button.textContent).toBe('UPDATE');\\n        });\\n\\n        it('should render checkbox cell', function () {\\n            let cell = this.page.getCell(0, 0);\\n            let checkbox = this.page.getInput(cell);\\n\\n            expect(isVisible(checkbox)).toBeTruthy();\\n            expect(checkbox.checked).toBe(false);\\n        });\\n\\n        it('should hide column when show is false', function () {\\n            let cell = this.page.getCell(0, 5);\\n\\n            expect(isCellVisible(cell)).toBeFalsy();\\n        });\\n\\n        it('should not display show/hide menu for checkbox/icon/icon-menu columns', function () {\\n            expect(this.page.getHeaderCellMenuButtons().length).toBe(4);\\n        });\\n\\n        it('should not display show/hide menu when there are no optional columns', function () {\\n            this.element = createFixture(\\n                `<sl-grid page-size=\\\"5\\\" locale=\\\"en-US\\\" go-to-page-label=\\\"Go to page: \\\" page-size-label=\\\"Show rows: \\\" current-page-label=\\\"{from}-{to} of {total}\\\">\\n                    <sl-grid-column type=\\\"text\\\" name=\\\"name\\\" title=\\\"Name\\\" field=\\\"name\\\"></sl-grid-column>\\n                 </sl-grid>`);\\n            this.element.data = {\\n                items: [\\n                    { name: 'my-name' },\\n                    { name: 'my-name2' }\\n                ],\\n                totalCount: 2\\n            };\\n\\n            expect(this.page.getHeaderCellMenuButtons().length).toBe(0);\\n        });\\n    });\\n\\n    describe('Show/Hide columns', () => {\\n        let gridHtml =\\n            `<sl-grid id=\\\"my-grid\\\" page-size=\\\"5\\\" locale=\\\"en-US\\\" go-to-page-label=\\\"Go to page: \\\" page-size-label=\\\"Show rows: \\\" current-page-label=\\\"{from}-{to} of {total}\\\">\\n                <sl-grid-column optional=\\\"true\\\" type=\\\"text\\\" name=\\\"name\\\" title=\\\"Name\\\" field=\\\"name\\\"></sl-grid-column>\\n                <sl-grid-column type=\\\"text\\\" name=\\\"description\\\" title=\\\"Description\\\" field=\\\"description\\\"></sl-grid-column>\\n                <sl-grid-column optional=\\\"true\\\" show=\\\"false\\\" type=\\\"text\\\" name=\\\"updated\\\" title=\\\"Updated\\\" field=\\\"updated\\\"></sl-grid-column>\\n            </sl-grid>`;\\n        let data = {\\n            items: [\\n                { name: 'my-name', description: 'my-description', updated: '2017' },\\n                { name: 'my-name2', description: 'my-description2', updated: '2018' }\\n            ],\\n            totalCount: 2\\n        };\\n\\n        beforeEach(function () {\\n            this.element = createFixture(gridHtml);\\n            this.element.data = data;\\n        });\\n\\n        it('should show menu with all optional columns and check the visible ones', function () {\\n            this.page.clickHeaderCellMenuButton(0);\\n\\n            let items = this.page.getHeaderCellMenuItems();\\n\\n            expect(items.length).toBe(2);\\n            expect(items[0].textContent).toBe('Name');\\n            expect(items[1].textContent).toBe('Updated');\\n\\n            let checkboxes = this.page.getHeaderCellMenuCheckboxes();\\n            expect(checkboxes.length).toBe(2);\\n            expect(checkboxes[0].checked).toBe(true);\\n            expect(checkboxes[1].checked).toBe(false);\\n        });\\n\\n        it('should hide column when de-selecting', function () {\\n            this.page.clickHeaderCellMenuButton(0);\\n\\n            this.page.clickHeaderCellMenuItem(0);\\n\\n            let cell = this.page.getCell(0, 0);\\n            expect(isCellVisible(cell)).toBeFalsy();\\n        });\\n\\n        it('should show column when selecting and deselecting', function () {\\n            this.page.clickHeaderCellMenuButton(0);\\n\\n            this.page.clickHeaderCellMenuItem(0);\\n            this.page.clickHeaderCellMenuItem(0);\\n\\n            let cell = this.page.getCell(0, 0);\\n            expect(isCellVisible(cell)).toBeTruthy();\\n        });\\n\\n        it('should load local storage settings and hide previously shown columns', function () {\\n            this.page.clickHeaderCellMenuButton(0);\\n            this.page.clickHeaderCellMenuItem(0);\\n\\n            this.element = createFixture(gridHtml);\\n            this.element.data = data;\\n\\n            let cell = this.page.getCell(0, 0);\\n            expect(isCellVisible(cell)).toBeFalsy();\\n        });\\n\\n        it('should load local storage settings and show previously hidden columns', function () {\\n            this.page.clickHeaderCellMenuButton(0);\\n            this.page.clickHeaderCellMenuItem(1);\\n\\n            this.element = createFixture(gridHtml);\\n            this.element.data = data;\\n\\n            let cell = this.page.getCell(0, 2);\\n            expect(isCellVisible(cell)).toBeTruthy();\\n        });\\n    });\\n\\n    describe('Select All', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<sl-grid page-size=\\\"5\\\" show-select-all=\\\"true\\\" locale=\\\"en-US\\\" go-to-page-label=\\\"Go to page: \\\" page-size-label=\\\"Show rows: \\\" current-page-label=\\\"{from}-{to} of {total}\\\">\\n                    <sl-grid-column type=\\\"checkbox\\\" name=\\\"selection\\\" width=\\\"35px\\\"></sl-grid-column>\\n                    <sl-grid-column type=\\\"text\\\" name=\\\"name\\\" title=\\\"Name\\\" field=\\\"name\\\"></sl-grid-column>\\n                 </sl-grid>`);\\n            this.element.data = {\\n                items: [\\n                    { name: 'my-name' },\\n                    { name: 'my-name2' }\\n                ],\\n                totalCount: 2\\n            };\\n        });\\n\\n        it('should check all checkboxes', function () {\\n            let selectAll = this.page.getSelectAll();\\n\\n            selectAll.click();\\n\\n            for (let checkbox of this.page.getCheckboxes()) {\\n                expect(checkbox.checked).toBe(true);\\n            }\\n        });\\n\\n        it('should uncheck all checkboxes', function () {\\n            let selectAll = this.page.getSelectAll();\\n            selectAll.click();\\n\\n            selectAll.click();\\n\\n            for (let checkbox of this.page.getCheckboxes()) {\\n                expect(checkbox.checked).toBe(false);\\n            }\\n        });\\n\\n        it('checking all single checkboxes should also check select-all checkbox', function () {\\n            for (let checkbox of this.page.getCheckboxes()) {\\n                checkbox.click();\\n            }\\n\\n            let selectAll = this.page.getSelectAll();\\n            expect(selectAll.checked).toBe(true);\\n        });\\n\\n        it('unchecking a single checkbox should also uncheck select-all checkbox', function () {\\n            let selectAll = this.page.getSelectAll();\\n            selectAll.click();\\n\\n            let checkbox = this.page.getCheckboxes()[0];\\n            checkbox.click();\\n\\n            expect(selectAll.checked).toBe(false);\\n        });\\n    });\\n\\n    describe('Paging', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<sl-grid page-size=\\\"5\\\" locale=\\\"en-US\\\" go-to-page-label=\\\"Go to page: \\\" page-size-label=\\\"Show rows: \\\" current-page-label=\\\"{from}-{to} of {total}\\\">\\n                   <sl-grid-column type=\\\"text\\\" name=\\\"name\\\" title=\\\"Name\\\" field=\\\"name\\\"></sl-grid-column>\\n                 </sl-grid>`);\\n            this.element.data = {\\n                items: loadItems(11, 1, 5),\\n                totalCount: 11\\n            };\\n        });\\n\\n        it('should render only items of the current page', function () {\\n            let rows = this.page.getRows();\\n\\n            expect(rows.length).toBe(5);\\n            expect(this.page.getCell(0, 0).textContent).toBe('webapp 1');\\n            expect(this.page.getCell(1, 0).textContent).toBe('webapp 2');\\n            expect(this.page.getCell(2, 0).textContent).toBe('webapp 3');\\n            expect(this.page.getCell(3, 0).textContent).toBe('webapp 4');\\n            expect(this.page.getCell(4, 0).textContent).toBe('webapp 5');\\n        });\\n\\n        it('should fire grid-update event on pager change event', function () {\\n            let event;\\n            this.element.addEventListener('grid-update-data', (e) => {\\n                event = e;\\n            });\\n\\n            this.page.clickNextPage();\\n\\n            expect(event.detail.page).toBe(2);\\n            expect(event.detail.pageSize).toBe(5);\\n        });\\n    });\\n\\n    describe('DataBinding', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<sl-grid page-size=\\\"5\\\" locale=\\\"en-US\\\" go-to-page-label=\\\"Go to page: \\\" page-size-label=\\\"Show rows: \\\" current-page-label=\\\"{from}-{to} of {total}\\\">\\n                   <sl-grid-column type=\\\"text\\\" name=\\\"name\\\" title=\\\"Name\\\" field=\\\"name.value\\\"></sl-grid-column>\\n                   <sl-grid-column type=\\\"text\\\" name=\\\"title\\\" title=\\\"Title\\\" field=\\\"title.value\\\"></sl-grid-column>\\n                 </sl-grid>`);\\n            this.element.data = {\\n                items: [\\n                    { name: { value: 'my-name' } }\\n                ],\\n                totalCount: 1\\n            };\\n        });\\n\\n        it('should support nested fields', function () {\\n            let rows = this.page.getRows();\\n\\n            expect(rows.length).toBe(1);\\n            expect(this.page.getCell(0, 0).textContent).toBe('my-name');\\n        });\\n\\n        it('should render empty cell when field does not exist', function () {\\n            let rows = this.page.getRows();\\n\\n            expect(rows.length).toBe(1);\\n            expect(this.page.getCell(0, 1).textContent).toBe('');\\n        });\\n    });\\n\\n    describe('Sorting', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<sl-grid page-size=\\\"5\\\" locale=\\\"en-US\\\" go-to-page-label=\\\"Go to page: \\\" page-size-label=\\\"Show rows: \\\" current-page-label=\\\"{from}-{to} of {total}\\\">\\n                   <sl-grid-column type=\\\"text\\\" name=\\\"name\\\" title=\\\"Name\\\" field=\\\"name\\\"></sl-grid-column>\\n                   <sl-grid-column type=\\\"text\\\" name=\\\"other\\\" title=\\\"Other\\\" field=\\\"other\\\"></sl-grid-column>\\n                 </sl-grid>`);\\n            this.element.data = {\\n                items: loadItems(11, 1, 5),\\n                totalCount: 11\\n            };\\n        });\\n\\n        it('should fire grid-update event on header click with ascending sort order', function () {\\n            let event;\\n            this.element.addEventListener('grid-update-data', (e) => {\\n                event = e;\\n            });\\n\\n            this.page.clickHeaderText(0);\\n\\n            expect(event.detail.sortBy).toBe('name');\\n            expect(event.detail.sortOrder).toBe('asc');\\n        });\\n\\n        it('should fire grid-update event on second header click with descending sort order', function () {\\n            let event;\\n            this.element.addEventListener('grid-update-data', (e) => {\\n                event = e;\\n            });\\n\\n            this.page.clickHeaderText(0);\\n            this.page.clickHeaderText(0);\\n\\n            expect(event.detail.sortBy).toBe('name');\\n            expect(event.detail.sortOrder).toBe('desc');\\n        });\\n\\n        it('should fire grid-update event on third header click without sort order', function () {\\n            let event;\\n            this.element.addEventListener('grid-update-data', (e) => {\\n                event = e;\\n            });\\n\\n            this.page.clickHeaderText(0);\\n            this.page.clickHeaderText(0);\\n            this.page.clickHeaderText(0);\\n\\n            expect(event.detail.sortBy).toBeUndefined();\\n            expect(event.detail.sortOrder).toBeUndefined();\\n        });\\n\\n        it('should fire grid-update event with descending sort order when clicking another column', function () {\\n            let event;\\n            this.element.addEventListener('grid-update-data', (e) => {\\n                event = e;\\n            });\\n\\n            this.page.clickHeaderText(0);\\n            this.page.clickHeaderText(1);\\n\\n            expect(event.detail.sortBy).toBe('other');\\n            expect(event.detail.sortOrder).toBe('asc');\\n        });\\n    });\\n\\n    describe('Icons', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<sl-grid locale=\\\"en-US\\\" go-to-page-label=\\\"Go to page: \\\" page-size-label=\\\"Show rows: \\\" current-page-label=\\\"{from}-{to} of {total}\\\">\\n                   <sl-grid-column type=\\\"icon-menu\\\" name=\\\"edit\\\" width=\\\"30px\\\" icon=\\\"&#xf013;\\\">\\n                     <sl-grid-column-item name=\\\"rename\\\" title=\\\"Rename\\\"></sl-grid-column-item>\\n                     <sl-grid-column-item name=\\\"delete\\\" title=\\\"Delete\\\"></sl-grid-column-item>\\n                     <sl-grid-column-item name=\\\"modify-policy\\\" title=\\\"Modify security policy\\\"></sl-grid-column-item>\\n                   </sl-grid-column>\\n                   <sl-grid-column type=\\\"icon\\\" name=\\\"share\\\" width=\\\"30px\\\" icon=\\\"&#xf1e0;\\\"></sl-grid-column>\\n                 </sl-grid>`);\\n            this.element.data = {\\n                items: loadItems(10, 1, 10),\\n                totalCount: 10\\n            };\\n        });\\n\\n        it('should fire action event on icon cell click', function () {\\n            let event;\\n            this.element.addEventListener('grid-action', (e) => {\\n                event = e;\\n            });\\n\\n            this.page.clickCell(0, 1);\\n\\n            expect(event.detail.action).toBe('share');\\n            expect(event.detail.item.id).toBe(1);\\n            expect(event.detail.item.name).toBe('webapp 1');\\n        });\\n\\n        it('should fire action event on menu entry click', function () {\\n            let event;\\n            this.element.addEventListener('grid-action', (e) => {\\n                event = e;\\n            });\\n\\n            this.page.clickCell(3, 0);\\n            this.page.clickMenuEntry(0);\\n\\n            expect(event.detail.action).toBe('rename');\\n            expect(event.detail.item.id).toBe(4);\\n            expect(event.detail.item.name).toBe('webapp 4');\\n        });\\n    });\\n});\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}