{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/header/header","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import headerCss from './header.css';\\n\\nimport { componentUtils } from '../common/component-utils.js';\\nimport { html } from '../../library/html-utils.js';\\n\\nconst styles = [headerCss];\\n\\n(function () {\\n    class MCHeader extends HTMLElement {\\n        constructor () {\\n            super();\\n\\n            this._menuClickHandler = e => {\\n                e.srcElement.parentNode.classList.toggle('mc-header-dropdown-show');\\n            };\\n            this._outsideMenuClickHandler = e => {\\n                let target = e.composedPath()[0];\\n                let targetParent = target.parentNode;\\n\\n                let contents = this.shadowRoot.querySelectorAll('.mc-header-dropdown-content');\\n                for (let content of contents) {\\n                    if (content.parentNode !== targetParent) {\\n                        content.parentNode.classList.remove('mc-header-dropdown-show');\\n                    }\\n                }\\n            };\\n        }\\n\\n        _render () {\\n            this.attachShadow({ mode: 'open' });\\n\\n            let header = document.createElement('header');\\n            header.classList.add('mc-header-page');\\n\\n            componentUtils.addStylesToElement(this.shadowRoot, styles);\\n            this.shadowRoot.appendChild(header);\\n        }\\n\\n        get userName () {\\n            return this.getAttribute('user-name');\\n        }\\n\\n        set userName (value) {\\n            this.setAttribute('user-name', value);\\n        }\\n\\n        get showUserMenu () {\\n            return this.getAttribute('show-user-menu');\\n        }\\n\\n        set showUserMenu (value) {\\n            this.setAttribute('show-user-menu', value);\\n        }\\n\\n        get showHelpMenu () {\\n            return this.getAttribute('show-help-menu');\\n        }\\n\\n        set showHelpMenu (value) {\\n            this.setAttribute('show-help-menu', value);\\n        }\\n\\n        set config (value) {\\n            this._config = value;\\n            this._renderItems(value);\\n        }\\n\\n        static get observedAttributes () {\\n            return ['user-name', 'show-user-menu', 'show-help-menu'];\\n        }\\n\\n        attributeChangedCallback (name, oldValue, newValue) {\\n            if (!this._config || !this.shadowRoot) {\\n                return;\\n            }\\n\\n            switch (name) {\\n            case 'user-name': {\\n                let userName = this._getUserName();\\n                userName.textContent = newValue || '';\\n                break;\\n            }\\n            case 'show-user-menu': {\\n                if (newValue === 'false') {\\n                    this._getUserMenu().classList.add('mc-header-dropdown-hidden');\\n                } else {\\n                    this._getUserMenu().classList.remove('mc-header-dropdown-hidden');\\n                }\\n                break;\\n            }\\n            case 'show-help-menu': {\\n                if (newValue === 'false') {\\n                    this._getHelpMenu().classList.add('mc-header-dropdown-hidden');\\n                } else {\\n                    this._getHelpMenu().classList.remove('mc-header-dropdown-hidden');\\n                }\\n                break;\\n            }\\n            }\\n        }\\n\\n        connectedCallback () {\\n            componentUtils.upgradeProperty(this, 'config');\\n            if (!this.shadowRoot) {\\n                this._render();\\n                this._renderItems(this._config);\\n            }\\n            this._attachDocumentEventHandlers();\\n        }\\n\\n        disconnectedCallback () {\\n            this._removeDocumentEventHandlers();\\n        }\\n\\n        _attachDocumentEventHandlers () {\\n            document.addEventListener('click', this._outsideMenuClickHandler);\\n        }\\n\\n        _removeDocumentEventHandlers () {\\n            document.removeEventListener('click', this._outsideMenuClickHandler);\\n        }\\n\\n        _attachClickHandler (element, config, eventName) {\\n            element.addEventListener('click', e => {\\n                if (!this.dispatchEvent(new CustomEvent(eventName, { cancelable: true, detail: config }))) {\\n                    e.preventDefault();\\n                }\\n            });\\n        }\\n\\n        _renderItems (config) {\\n            if (!this.shadowRoot || !this._config) {\\n                return;\\n            }\\n\\n            // Create three header sections\\n            let headerLeft = document.createElement('div');\\n            headerLeft.id = 'mc-header-left';\\n            headerLeft.classList.add('mc-header-left');\\n\\n            let headerCenter = document.createElement('div');\\n            headerCenter.id = 'mc-header-center';\\n            headerCenter.classList.add('mc-header-center');\\n\\n            let headerRight = document.createElement('div');\\n            headerCenter.id = 'mc-header-right';\\n            headerRight.classList.add('mc-header-right');\\n\\n            this._populateHeader(config, headerLeft, headerCenter, headerRight);\\n\\n            let header = this._getHeaderPage();\\n            header.innerHTML = '';\\n            header.appendChild(headerLeft);\\n            header.appendChild(headerCenter);\\n            header.appendChild(headerRight);\\n        }\\n\\n        _populateHeader (config, left, center, right) {\\n            let homeButton = this._createHome(config.app);\\n            left.appendChild(homeButton);\\n\\n            let navigation = this._createNavigation(config.categories);\\n            center.appendChild(navigation);\\n\\n            let userText = this._createUserText();\\n            right.appendChild(userText);\\n            let userMenu = this._createMenu(config.userMenu, 'user-menu', this.showUserMenu);\\n            right.appendChild(userMenu);\\n            let helpMenu = this._createMenu(config.helpMenu, 'help-menu', this.showHelpMenu);\\n            right.appendChild(helpMenu);\\n        }\\n\\n        _createHome (appConfig) {\\n            let button = document.createElement('button');\\n            button.classList.add('mc-header-app-title-button');\\n            button.innerHTML = html`<div class=\\\"mc-header-app-title\\\">${appConfig.text}</div>`;\\n            button.addEventListener('click', e => {\\n                if (this.dispatchEvent(new CustomEvent('app-title-click', { cancelable: true, detail: appConfig }))) {\\n                    this._openHref(appConfig.href, appConfig.target);\\n                }\\n            });\\n            return button;\\n        }\\n\\n        _createNavigation (items) {\\n            let navElement = document.createElement('nav');\\n            navElement.classList.add('mc-header-nav');\\n            navElement.innerHTML = '<a href=\\\"#\\\" class=\\\"mc-header-menu-icon\\\"></a>';\\n\\n            let headerCategories = document.createElement('ul');\\n            headerCategories.classList.add('mc-header-categories');\\n            navElement.appendChild(headerCategories);\\n\\n            for (let item of items) {\\n                let navLinkListItem = this._createNavigationItem(item);\\n                headerCategories.appendChild(navLinkListItem);\\n            }\\n\\n            return navElement;\\n        }\\n\\n        _createNavigationItem (item) {\\n            let navLinkItem = document.createElement('a');\\n            navLinkItem.classList.add('mc-header-category');\\n            navLinkItem.text = item.text;\\n            navLinkItem.href = item.href;\\n            navLinkItem.target = item.target || '_self';\\n            if (item.active) {\\n                navLinkItem.classList.add('mc-header-active');\\n            }\\n            this._attachClickHandler(navLinkItem, item, 'category-click');\\n\\n            let navLinkListItem = document.createElement('li');\\n            navLinkListItem.appendChild(navLinkItem);\\n            return navLinkListItem;\\n        }\\n\\n        _createUserText () {\\n            let userDiv = document.createElement('div');\\n            userDiv.id = 'mc-header-user-name';\\n            userDiv.classList.add('mc-header-user-name');\\n            userDiv.innerText = this.userName;\\n            return userDiv;\\n        }\\n\\n        _createMenu (menuConfig, name, show) {\\n            let links = [];\\n            for (let item of menuConfig) {\\n                links.push(this._createMenuItemLink(name, item));\\n            }\\n            return this._createDropDown(name, links, show);\\n        }\\n\\n        _createMenuItemLink (name, item) {\\n            let link = document.createElement('a');\\n            link.href = item.href;\\n            link.target = item.target || '_self';\\n            link.textContent = item.text;\\n            this._attachClickHandler(link, item, name + '-click');\\n            return link;\\n        }\\n\\n        _createDropDown (name, links, display) {\\n            let dropdown = document.createElement('div');\\n            dropdown.id = 'mc-header-' + name;\\n            dropdown.classList.add('mc-header-dropdown');\\n            if (display === 'false') {\\n                dropdown.classList.add('mc-header-dropdown-hidden');\\n            }\\n\\n            let button = document.createElement('div');\\n            button.classList.add('mc-header-dropdown-button');\\n            button.classList.add('mc-header-' + name + '-button');\\n            button.addEventListener('click', this._menuClickHandler);\\n\\n            let content = document.createElement('div');\\n            content.classList.add('mc-header-dropdown-content');\\n            for (let link of links) {\\n                content.appendChild(link);\\n            }\\n\\n            dropdown.appendChild(button);\\n            dropdown.appendChild(content);\\n            return dropdown;\\n        }\\n\\n        _openHref (href, target) {\\n            let win = window.open(href, target);\\n            // win is undefined, if the window cannot be opened (e.g.popup blocker)\\n            if (win) {\\n                win.focus();\\n            }\\n        }\\n\\n        _getUserName () {\\n            return this.shadowRoot.querySelector('#mc-header-user-name');\\n        }\\n\\n        _getUserMenu () {\\n            return this.shadowRoot.querySelector('#mc-header-user-menu');\\n        }\\n\\n        _getHelpMenu () {\\n            return this.shadowRoot.querySelector('#mc-header-help-menu');\\n        }\\n\\n        _getHeaderPage () {\\n            return this.shadowRoot.querySelector('.mc-header-page');\\n        }\\n    }\\n\\n    componentUtils.registerCustomElement('mc-header', MCHeader);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}