{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/header/test/header-test","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../header.js';\\n\\nimport { createFixture, isVisible } from '../../test/test-utils.js';\\nimport { HeaderPage } from './header-page.js';\\n\\ndescribe('Header', () => {\\n    beforeEach(function () {\\n        this.defaultConfig = {\\n            app: { name: 'SystemLinkCloud', text: 'SystemLink Cloud', href: '#', target: '_self' },\\n            categories: [\\n                { name: 'Home', text: 'Home', href: '#', target: '_self', active: true },\\n                { name: 'Dashboards', text: 'Dashboards', href: '/dashboardhosting', target: '_self' },\\n                { name: 'WebApps', text: 'Web apps', href: '/webapphosting', target: '_self' },\\n                { name: 'Security', text: 'Security', href: '/security', target: '_self' }\\n            ],\\n            userMenu: [\\n                { name: 'Account', text: 'Account', href: '#', target: '_self' },\\n                { name: 'Logout', text: 'Logout', href: '/logout', target: '_self' }\\n            ],\\n            helpMenu: [\\n                { name: 'FAQ', text: 'FAQ', href: 'https://dev.systemlinkcloud.com/faq', target: '_blank' },\\n                { name: 'Support', text: 'Support', href: '#', target: '_self' },\\n                { name: 'Feedback', text: 'Give feedback', href: 'mailto:lvcloudoperations@ni.com', target: '_self' }\\n            ]\\n        };\\n        this.page = new HeaderPage();\\n        this.element = createFixture('<mc-header></mc-header>',\\n            element => {\\n                element.config = this.defaultConfig;\\n            });\\n    });\\n\\n    it('should show the header and fields', function () {\\n        let header = this.page.getHeader();\\n        let appTitle = this.page.getAppTitle();\\n\\n        expect(isVisible(header)).toBeTruthy();\\n        expect(appTitle.textContent).toBe('SystemLink Cloud');\\n    });\\n\\n    it('should highlight the active category', function () {\\n        let activeCategory = this.page.getActiveCategory();\\n\\n        expect(activeCategory.textContent).toBe('Home');\\n    });\\n\\n    it('should fire event when clicking app title', function () {\\n        let clickEvent;\\n        this.element.addEventListener('app-title-click', function (e) {\\n            clickEvent = e;\\n        });\\n\\n        this.page.getAppTitle().click();\\n\\n        expect(clickEvent.detail.name).toBe('SystemLinkCloud');\\n        expect(clickEvent.detail.text).toBe('SystemLink Cloud');\\n    });\\n\\n    it('should fire event when clicking category', function () {\\n        let clickEvent;\\n        this.element.addEventListener('category-click', function (e) {\\n            clickEvent = e;\\n        });\\n\\n        this.page.getActiveCategory().click();\\n\\n        expect(clickEvent.detail.name).toBe('Home');\\n        expect(clickEvent.detail.text).toBe('Home');\\n    });\\n\\n    it('should render link in user menu entry', function () {\\n        let link = this.page.getUserMenuEntries()[1];\\n\\n        expect(link.textContent).toBe('Logout');\\n        expect(link.href).toContain('/logout');\\n        expect(link.target).toBe('_self');\\n    });\\n\\n    it('should render link in help menu entry', function () {\\n        let link = this.page.getHelpMenuEntries()[2];\\n\\n        expect(link.textContent).toBe('Give feedback');\\n        expect(link.href).toBe('mailto:lvcloudoperations@ni.com');\\n        expect(link.target).toBe('_self');\\n    });\\n\\n    it('should fire event when clicking user menu entry', function () {\\n        let clickEvent;\\n        this.element.addEventListener('user-menu-click', function (e) {\\n            clickEvent = e;\\n        });\\n\\n        this.page.getUserMenuEntries()[0].click();\\n\\n        expect(clickEvent.detail.name).toBe('Account');\\n    });\\n\\n    it('should fire event when clicking help menu entry', function () {\\n        let clickEvent;\\n        this.element.addEventListener('help-menu-click', function (e) {\\n            clickEvent = e;\\n        });\\n\\n        this.page.getHelpMenuEntries()[1].click();\\n\\n        expect(clickEvent.detail.name).toBe('Support');\\n    });\\n\\n    it('should not perform category action when event was cancelled', function () {\\n        this.element.addEventListener('category-click', function (evt) {\\n            evt.preventDefault();\\n        });\\n\\n        this.page.getCategories()[1].click();\\n\\n        expect(window.location.href).not.toContain('/dashboardhosting');\\n    });\\n\\n    it('should not perform user menu action when event was cancelled', function () {\\n        this.element.addEventListener('user-menu-click', function (evt) {\\n            evt.preventDefault();\\n        });\\n\\n        this.page.getHelpMenuEntries()[1].click();\\n\\n        expect(window.location.href).not.toContain('/logout');\\n    });\\n\\n    it('should not perform help menu action when event was cancelled', function () {\\n        this.element.addEventListener('help-menu-click', function (evt) {\\n            evt.preventDefault();\\n        });\\n\\n        this.page.getHelpMenuEntries()[0].click();\\n\\n        expect(window.location.href).not.toContain('/faq');\\n    });\\n\\n    it('should hide the user menu', function () {\\n        this.element = createFixture('<mc-header show-user-menu=\\\"false\\\"></mc-header>',\\n            element => {\\n                element.config = this.defaultConfig;\\n            });\\n\\n        let userMenu = this.page.getUserMenuButton();\\n\\n        expect(isVisible(userMenu)).toBeFalsy();\\n    });\\n\\n    it('should hide the help menu', function () {\\n        this.element = createFixture('<mc-header show-help-menu=\\\"false\\\"></mc-header>',\\n            element => {\\n                element.config = this.defaultConfig;\\n            });\\n\\n        let helpMenu = this.page.getHelpMenuButton();\\n\\n        expect(isVisible(helpMenu)).toBeFalsy();\\n    });\\n\\n    it('should show the user name', function () {\\n        this.element = createFixture('<mc-header user-name=\\\"Thomas Schmitt\\\"></mc-header>',\\n            element => {\\n                element.config = this.defaultConfig;\\n            });\\n\\n        let userName = this.page.getUserName();\\n\\n        expect(userName.textContent).toBe('Thomas Schmitt');\\n    });\\n\\n    it('should update the user name and user menu', function () {\\n        this.element = createFixture('<mc-header show-user-menu=\\\"false\\\"></mc-header>',\\n            element => {\\n                element.config = this.defaultConfig;\\n            });\\n\\n        this.element.setAttribute('show-user-menu', 'true');\\n        this.element.setAttribute('user-name', 'Thomas Schmitt');\\n\\n        let userMenu = this.page.getUserMenuButton();\\n        expect(isVisible(userMenu)).toBeTruthy();\\n\\n        let userName = this.page.getUserName();\\n        expect(userName.textContent).toBe('Thomas Schmitt');\\n    });\\n\\n    it('should allow late binding of config options', function () {\\n        this.element = createFixture('<mc-header></mc-header>');\\n        this.element.config = this.defaultConfig;\\n\\n        let appTitle = this.page.getAppTitle();\\n        expect(appTitle.textContent).toBe('SystemLink Cloud');\\n        let categories = this.page.getCategories();\\n        expect(categories.length).toBe(4);\\n        let helpMenuEntries = this.page.getHelpMenuEntries();\\n        expect(helpMenuEntries.length).toBe(3);\\n        let userMenuEntries = this.page.getUserMenuEntries();\\n        expect(userMenuEntries.length).toBe(2);\\n    });\\n\\n    it('should allow re-binding of config options', function () {\\n        this.element = createFixture('<mc-header show-user-menu=\\\"false\\\"></mc-header>',\\n            element => {\\n                element.config = this.defaultConfig;\\n            });\\n\\n        let modifiedConfig = this.defaultConfig;\\n        modifiedConfig.app.text = 'New App Name';\\n        this.element.config = modifiedConfig;\\n\\n        let appTitle = this.page.getAppTitle();\\n        expect(appTitle.textContent).toBe('New App Name');\\n    });\\n\\n    it('should render user-name as text', function () {\\n        this.element = createFixture('<mc-header user-name=\\\"<a href>evil</a>\\\"></mc-header>',\\n            element => {\\n                element.config = this.defaultConfig;\\n            });\\n\\n        let userName = this.page.getUserName();\\n\\n        expect(userName.textContent).toBe('<a href>evil</a>');\\n    });\\n\\n    it('should escape app text', function () {\\n        this.element = createFixture('<mc-header></mc-header>');\\n\\n        let modifiedConfig = this.defaultConfig;\\n        modifiedConfig.app.text = '<a href>evil</a>';\\n        this.element.config = modifiedConfig;\\n\\n        let appTitle = this.page.getAppTitle();\\n        expect(appTitle.textContent).toBe('<a href>evil</a>');\\n    });\\n});\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}