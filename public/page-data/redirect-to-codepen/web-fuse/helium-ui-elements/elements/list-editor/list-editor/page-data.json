{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/list-editor/list-editor","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import iconsCss from '../common/styles/icons.css';\\nimport inputCss from '../common/styles/input.css';\\nimport listEditorCss from './list-editor.css';\\n\\nimport { componentUtils } from '../common/component-utils.js';\\n\\nconst styles = [iconsCss, inputCss, listEditorCss];\\n\\n(function () {\\n    class SLListEditor extends HTMLElement {\\n        constructor () {\\n            super();\\n\\n            this._data = [];\\n        }\\n\\n        set data (data) {\\n            this._data = data;\\n            this._renderItems();\\n        }\\n\\n        connectedCallback () {\\n            componentUtils.upgradeProperty(this, 'data');\\n            if (!this.shadowRoot) {\\n                this._type = this.getAttribute('type');\\n                this._keyPlaceHolder = this.getAttribute('placeholder') || this.getAttribute('key-placeholder') || '';\\n                this._valuePlaceHolder = this.getAttribute('value-placeholder') || '';\\n                this._render();\\n                this._renderItems();\\n            }\\n        }\\n\\n        _render () {\\n            this.attachShadow({ mode: 'open' });\\n            componentUtils.addStylesToElement(this.shadowRoot, styles);\\n\\n            let main = document.createElement('div');\\n            main.classList.add('sl-list-editor-main');\\n            this.shadowRoot.appendChild(main);\\n        }\\n\\n        _renderItems () {\\n            let main = this._getMain();\\n            main.innerHTML = '';\\n\\n            for (let item of this._data) {\\n                this._appendRow(item);\\n            }\\n\\n            this._appendNewRowIfNotExists();\\n        }\\n\\n        _appendRow (item) {\\n            let row = document.createElement('div');\\n            row.classList.add('sl-list-editor-row');\\n\\n            let icon = this._createRemoveIcon();\\n            icon.addEventListener('click', () => {\\n                row.remove();\\n                this._fireListChangeEvent();\\n            });\\n            row.appendChild(icon);\\n\\n            let input = this._createKeyInput(item);\\n            input.addEventListener('change', () => {\\n                this._fireListChangeEvent();\\n            });\\n            row.appendChild(input);\\n\\n            if (this._type === 'KeyValue') {\\n                let valueInput = this._createValueInput(item);\\n                valueInput.addEventListener('change', () => {\\n                    this._fireListChangeEvent();\\n                });\\n                row.appendChild(valueInput);\\n            }\\n\\n            let main = this._getMain();\\n            main.appendChild(row);\\n            input.focus();\\n        }\\n\\n        _createAddIcon () {\\n            let icon = document.createElement('div');\\n            icon.classList.add('sl-list-editor-icon');\\n            icon.classList.add('sl-list-editor-add-icon');\\n            return icon;\\n        }\\n\\n        _createRemoveIcon () {\\n            let icon = document.createElement('div');\\n            icon.classList.add('fa');\\n            icon.classList.add('sl-list-editor-icon');\\n            icon.classList.add('sl-list-editor-remove-icon');\\n            icon.innerHTML = '&#xf00d;';\\n            return icon;\\n        }\\n\\n        _createKeyInput (item) {\\n            let value = item || '';\\n            if (this._type === 'KeyValue') {\\n                value = item ? item.key : '';\\n            }\\n            return this._createInput(value, this._keyPlaceHolder);\\n        }\\n\\n        _createValueInput (item) {\\n            let value = item || '';\\n            if (this._type === 'KeyValue') {\\n                value = item ? item.value : '';\\n            }\\n            return this._createInput(value, this._valuePlaceHolder);\\n        }\\n\\n        _createInput (value, placeholder) {\\n            let input = document.createElement('input');\\n            input.classList.add('mc-input');\\n            input.classList.add('sl-list-editor-input');\\n            input.value = value || '';\\n            input.placeholder = placeholder;\\n            return input;\\n        }\\n\\n        _appendNewRowIfNotExists () {\\n            let existingNewRow = this.shadowRoot.querySelector('.sl-list-editor-new-row');\\n            if (existingNewRow) {\\n                return;\\n            }\\n            let newRow = this._createNewRow();\\n            let main = this._getMain();\\n            main.appendChild(newRow);\\n        }\\n\\n        _createNewRow () {\\n            let newRow = document.createElement('div');\\n            newRow.classList.add('sl-list-editor-row');\\n            newRow.classList.add('sl-list-editor-new-row');\\n\\n            let icon = this._createAddIcon();\\n            newRow.appendChild(icon);\\n\\n            let input = this._createKeyInput();\\n            input.addEventListener('focus', () => {\\n                newRow.remove();\\n                this._appendRow();\\n                this._appendNewRowIfNotExists();\\n            });\\n            newRow.appendChild(input);\\n\\n            if (this._type === 'KeyValue') {\\n                let valueInput = this._createValueInput();\\n                valueInput.addEventListener('focus', () => {\\n                    newRow.remove();\\n                    this._appendRow();\\n                    this._appendNewRowIfNotExists();\\n                });\\n                newRow.appendChild(valueInput);\\n            }\\n            return newRow;\\n        }\\n\\n        _fireListChangeEvent () {\\n            let eventData = {\\n                data: this._createList()\\n            };\\n            this.dispatchEvent(new CustomEvent('list-change', { detail: eventData }));\\n        }\\n\\n        _createList () {\\n            let rows = [...this._getRows()];\\n            return rows\\n                .map((r) => this._getListItem(r))\\n                .filter(function (item) {\\n                    return item !== undefined;\\n                });\\n        }\\n\\n        _getListItem (row) {\\n            let inputs = row.querySelectorAll('.sl-list-editor-input');\\n            if (!this._hasValue(inputs)) {\\n                return;\\n            }\\n            if (inputs.length === 2) {\\n                return { key: inputs[0].value, value: inputs[1].value };\\n            } else {\\n                return inputs[0].value;\\n            }\\n        }\\n\\n        _hasValue (inputs) {\\n            for (let input of inputs) {\\n                if (input.value !== '') {\\n                    return true;\\n                }\\n            }\\n            return false;\\n        }\\n\\n        _getRows () {\\n            return this.shadowRoot.querySelectorAll('.sl-list-editor-row');\\n        }\\n\\n        _getMain () {\\n            return this.shadowRoot.querySelector('.sl-list-editor-main');\\n        }\\n    }\\n\\n    componentUtils.registerCustomElement('sl-list-editor', SLListEditor);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}