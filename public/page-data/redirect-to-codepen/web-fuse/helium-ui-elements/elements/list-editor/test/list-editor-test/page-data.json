{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/list-editor/test/list-editor-test","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../list-editor.js';\\n\\nimport { createFixture, isVisible, focus, enterValue } from '../../test/test-utils.js';\\nimport { ListEditorPage } from './list-editor-page.js';\\n\\ndescribe('SL List Editor', () => {\\n    beforeEach(function () {\\n        this.page = new ListEditorPage();\\n    });\\n\\n    describe('List Edit', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<sl-list-editor placeholder=\\\"Keyword\\\"></sl-list-editor>`);\\n            this.element.data = ['keywordA', 'keywordB'];\\n        });\\n\\n        it('should show the list editor', function () {\\n            let main = this.page.getMain();\\n\\n            expect(isVisible(main)).toBeTruthy();\\n        });\\n\\n        it('should show only one input', function () {\\n            let inputs = this.page.getInputs(0);\\n\\n            expect(inputs.length).toBe(1);\\n        });\\n\\n        it('should render the data rows', function () {\\n            let rows = this.page.getRows();\\n            expect(rows.length).toBe(3);\\n\\n            let inputsFirstRow = this.page.getInputs(0);\\n            expect(inputsFirstRow[0].value).toBe('keywordA');\\n\\n            let inputsSecondRow = this.page.getInputs(1);\\n            expect(inputsSecondRow[0].value).toBe('keywordB');\\n\\n            let inputsThirdRow = this.page.getInputs(2);\\n            expect(inputsThirdRow[0].value).toBe('');\\n        });\\n\\n        it('should add a new row on focus of the last rows input', function () {\\n            let inputs = this.page.getInputs(2);\\n            focus(inputs[0]);\\n\\n            let rows = this.page.getRows();\\n            expect(rows.length).toBe(4);\\n        });\\n\\n        it('should delete a row on delete icon click', function () {\\n            this.page.clickIcon(1);\\n\\n            let rows = this.page.getRows();\\n            expect(rows.length).toBe(2);\\n        });\\n\\n        it('should fire list-change event on delete icon click', function () {\\n            this.element.addEventListener('list-change', (e) => {\\n                this.clickEvent = e;\\n            });\\n            this.page.clickIcon(1);\\n\\n            expect(this.clickEvent.detail).toEqual({ data: ['keywordA'] });\\n        });\\n\\n        it('should fire list-change event on input change', function () {\\n            this.element.addEventListener('list-change', (e) => {\\n                this.clickEvent = e;\\n            });\\n            enterValue(this.page.getInputs(0)[0], 'new keyword');\\n\\n            expect(this.clickEvent.detail).toEqual({ data: ['new keyword', 'keywordB'] });\\n        });\\n    });\\n\\n    describe('KeyValue Edit', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<sl-list-editor type=\\\"KeyValue\\\" key-placeholder=\\\"Key\\\" value-placeholder=\\\"Value\\\"></sl-list-editor>`);\\n            this.element.data = [\\n                { key: 'key-a', value: 'value-a' },\\n                { key: 'key-b', value: 'value-b' }\\n            ];\\n        });\\n\\n        it('should show the list editor', function () {\\n            let main = this.page.getMain();\\n\\n            expect(isVisible(main)).toBeTruthy();\\n        });\\n\\n        it('should show inputs for key and value', function () {\\n            let inputs = this.page.getInputs(0);\\n\\n            expect(inputs.length).toBe(2);\\n        });\\n\\n        it('should render the data rows', function () {\\n            let rows = this.page.getRows();\\n            expect(rows.length).toBe(3);\\n\\n            let inputsFirstRow = this.page.getInputs(0);\\n            expect(inputsFirstRow[0].value).toBe('key-a');\\n            expect(inputsFirstRow[1].value).toBe('value-a');\\n\\n            let inputsSecondRow = this.page.getInputs(1);\\n            expect(inputsSecondRow[0].value).toBe('key-b');\\n            expect(inputsSecondRow[1].value).toBe('value-b');\\n\\n            let inputsThirdRow = this.page.getInputs(2);\\n            expect(inputsThirdRow[0].value).toBe('');\\n            expect(inputsThirdRow[1].value).toBe('');\\n        });\\n\\n        it('should add a new row on focus of the last rows key input', function () {\\n            let inputs = this.page.getInputs(2);\\n            focus(inputs[0]);\\n\\n            let rows = this.page.getRows();\\n            expect(rows.length).toBe(4);\\n        });\\n\\n        it('should add a new row on focus of the last rows value input', function () {\\n            let inputs = this.page.getInputs(2);\\n            focus(inputs[1]);\\n\\n            let rows = this.page.getRows();\\n            expect(rows.length).toBe(4);\\n        });\\n\\n        it('should delete a row on delete icon click', function () {\\n            this.page.clickIcon(1);\\n\\n            let rows = this.page.getRows();\\n            expect(rows.length).toBe(2);\\n        });\\n\\n        it('should fire list-change event on delete icon click', function () {\\n            this.element.addEventListener('list-change', (e) => {\\n                this.clickEvent = e;\\n            });\\n            this.page.clickIcon(1);\\n\\n            expect(this.clickEvent.detail).toEqual({ data: [{ key: 'key-a', value: 'value-a' }] });\\n        });\\n\\n        it('should fire list-change event on key-input change', function () {\\n            this.element.addEventListener('list-change', (e) => {\\n                this.clickEvent = e;\\n            });\\n            enterValue(this.page.getInputs(0)[0], 'new key');\\n\\n            expect(this.clickEvent.detail).toEqual({\\n                data: [\\n                    { key: 'new key', value: 'value-a' },\\n                    { key: 'key-b', value: 'value-b' }\\n                ]\\n            });\\n        });\\n\\n        it('should fire list-change event on value-input change', function () {\\n            this.element.addEventListener('list-change', (e) => {\\n                this.clickEvent = e;\\n            });\\n            enterValue(this.page.getInputs(0)[1], 'new value');\\n\\n            expect(this.clickEvent.detail).toEqual({\\n                data: [\\n                    { key: 'key-a', value: 'new value' },\\n                    { key: 'key-b', value: 'value-b' }\\n                ]\\n            });\\n        });\\n    });\\n});\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}