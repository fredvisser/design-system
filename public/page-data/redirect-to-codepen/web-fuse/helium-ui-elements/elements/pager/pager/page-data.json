{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/pager/pager","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import iconsCss from '../common/styles/icons.css';\\nimport pagerCss from './pager.css';\\n\\nimport { componentUtils } from '../common/component-utils.js';\\nimport { stringUtils } from '../common/string-utils.js';\\n\\nconst styles = [iconsCss, pagerCss];\\n\\n(function () {\\n    class MCPager extends HTMLElement {\\n        get items () {\\n            let items = this.getAttribute('items') || '0';\\n            return parseInt(items);\\n        }\\n\\n        get page () {\\n            let page = this.getAttribute('page') || '1';\\n            return parseInt(page);\\n        }\\n\\n        set page (value) {\\n            let pageCount = this._pageCount();\\n            if (value > pageCount) {\\n                value = pageCount;\\n            }\\n            if (value < 1) {\\n                value = 1;\\n            }\\n            this.setAttribute('page', value);\\n            this._sendPageChangeEvent();\\n        }\\n\\n        get pageSize () {\\n            let pageSize = this.getAttribute('page-size') || '20';\\n            return parseInt(pageSize);\\n        }\\n\\n        set pageSize (value) {\\n            this.setAttribute('page-size', value);\\n            this._sendPageChangeEvent();\\n        }\\n\\n        get pageSizeLabel () {\\n            return this.getAttribute('page-size-label');\\n        }\\n\\n        set pageSizeLabel (value) {\\n            this.setAttribute('page-size-label', value);\\n        }\\n\\n        get goToPageLabel () {\\n            return this.getAttribute('go-to-page-label');\\n        }\\n\\n        set goToPageLabel (value) {\\n            this.setAttribute('go-to-page-label', value);\\n        }\\n\\n        get currentPageLabel () {\\n            return this.getAttribute('current-page-label');\\n        }\\n\\n        set currentPageLabel (value) {\\n            this.setAttribute('current-page-label', value);\\n        }\\n\\n        get pageSizes () {\\n            let pageSizes = this.getAttribute('page-sizes') || '5,10,20';\\n            return pageSizes.split(',').map(function (item) {\\n                return parseInt(item);\\n            });\\n        }\\n\\n        static get observedAttributes () {\\n            return ['items', 'page', 'page-size'];\\n        }\\n\\n        attributeChangedCallback (name, oldValue, newValue) {\\n            if (!this.shadowRoot) {\\n                return;\\n            }\\n            switch (name) {\\n            case 'items': {\\n                this._update();\\n                break;\\n            }\\n            case 'page': {\\n                this._update();\\n                break;\\n            }\\n            case 'page-size': {\\n                this._update();\\n                break;\\n            }\\n            }\\n        }\\n\\n        connectedCallback () {\\n            if (!this.shadowRoot) {\\n                this._render();\\n            }\\n        }\\n\\n        _render () {\\n            let main = document.createElement('div');\\n            main.classList.add('mc-pager-main');\\n\\n            main.appendChild(this._createGoToPageText());\\n            main.appendChild(this._createGoToPageInput());\\n            main.appendChild(this._createPageSizeText());\\n            main.appendChild(this._createPageSizeSelect());\\n            main.appendChild(this._createPagerItemText());\\n            main.appendChild(this._createPreviousLink());\\n            main.appendChild(this._createNextLink());\\n\\n            this.attachShadow({ mode: 'open' });\\n\\n            componentUtils.addStylesToElement(this.shadowRoot, styles);\\n\\n            this.shadowRoot.appendChild(main);\\n            this._update();\\n        }\\n\\n        _createGoToPageText () {\\n            let text = document.createElement('span');\\n            text.classList.add('mc-pager-go-to-page-text');\\n            text.textContent = this.goToPageLabel;\\n            return text;\\n        }\\n\\n        _createGoToPageInput () {\\n            let input = document.createElement('input');\\n            input.classList.add('mc-pager-go-to-page');\\n            input.name = 'go-to-page';\\n            input.type = 'number';\\n            input.min = 1;\\n            input.addEventListener('change', () => {\\n                this.page = input.value;\\n            });\\n            return input;\\n        }\\n\\n        _createPageSizeText () {\\n            let text = document.createElement('span');\\n            text.classList.add('mc-pager-page-size-text');\\n            text.textContent = this.pageSizeLabel;\\n            return text;\\n        }\\n\\n        _createPageSizeSelect () {\\n            let select = document.createElement('select');\\n            select.classList.add('mc-pager-page-size');\\n            select.value = this.pageSize;\\n            for (let pageSize of this.pageSizes) {\\n                let option = document.createElement('option');\\n                option.value = option.textContent = pageSize;\\n                select.appendChild(option);\\n            }\\n            select.addEventListener('change', () => {\\n                this.pageSize = select.value;\\n            });\\n            return select;\\n        }\\n\\n        _createPagerItemText () {\\n            let text = document.createElement('span');\\n            text.classList.add('mc-pager-item-text');\\n            return text;\\n        }\\n\\n        _createPreviousLink () {\\n            let button = document.createElement('button');\\n            button.href = '';\\n            button.classList.add('fa');\\n            button.classList.add('mc-pager-button');\\n            button.classList.add('mc-pager-button-previous');\\n            button.innerHTML = '<span class=\\\"mc-pager-button-icon-previous\\\"></span>';\\n            button.addEventListener('click', (e) => {\\n                this.page = this.page - 1;\\n                e.preventDefault();\\n            });\\n            return button;\\n        }\\n\\n        _createNextLink () {\\n            let button = document.createElement('button');\\n            button.href = '';\\n            button.classList.add('fa');\\n            button.classList.add('mc-pager-button');\\n            button.classList.add('mc-pager-button-next');\\n            button.innerHTML = '<span class=\\\"mc-pager-button-icon-next\\\"></span>';\\n            button.addEventListener('click', (e) => {\\n                this.page = this.page + 1;\\n                e.preventDefault();\\n            });\\n            return button;\\n        }\\n\\n        _update () {\\n            let input = this._getGoToPageInput();\\n            input.max = this._pageCount();\\n            input.value = this.page;\\n\\n            let select = this._getPageSizeSelect();\\n            select.value = this.pageSize;\\n\\n            let itemText = this._getItemText();\\n            itemText.textContent = this._getItemTextContent();\\n        }\\n\\n        _getItemTextContent () {\\n            let startItem = (this.page - 1) * this.pageSize + 1;\\n            let endItem = Math.min(this.page * this.pageSize, this.items);\\n            startItem = Math.min(startItem, endItem);\\n\\n            return stringUtils.format(this.currentPageLabel, { from: startItem, to: endItem, total: this.items });\\n        }\\n\\n        _sendPageChangeEvent () {\\n            this.dispatchEvent(new CustomEvent('page-change', {\\n                detail: {\\n                    page: this.page,\\n                    pageSize: this.pageSize,\\n                    items: this.items\\n                }\\n            }));\\n        }\\n\\n        _pageCount () {\\n            return Math.ceil(this.items / this.pageSize);\\n        }\\n\\n        _getGoToPageInput () {\\n            return this.shadowRoot.querySelector('.mc-pager-go-to-page');\\n        }\\n\\n        _getPageSizeSelect () {\\n            return this.shadowRoot.querySelector('.mc-pager-page-size');\\n        }\\n\\n        _getItemText () {\\n            return this.shadowRoot.querySelector('.mc-pager-item-text');\\n        }\\n    }\\n\\n    componentUtils.registerCustomElement('mc-pager', MCPager);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}