{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/pager/test/pager-test","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../pager.js';\\n\\nimport { createFixture, isVisible, selectOption, enterValue } from '../../test/test-utils.js';\\nimport { PagerPage } from './pager-page.js';\\n\\ndescribe('Pager', () => {\\n    beforeEach(function () {\\n        this.page = new PagerPage();\\n    });\\n\\n    describe('Basic', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<mc-pager page=\\\"1\\\" page-size=\\\"20\\\" items=\\\"49\\\" go-to-page-label=\\\"Go to page: \\\" page-size-label=\\\"Show rows: \\\" current-page-label=\\\"{from}-{to} of {total}\\\"></mc-pager>`);\\n        });\\n\\n        it('should show pager', function () {\\n            let pager = this.page.getPager();\\n\\n            expect(isVisible(pager)).toBeTruthy();\\n        });\\n\\n        it('should show pager controls', function () {\\n            let itemText = this.page.getItemText();\\n            let input = this.page.getGoToPageInput();\\n            let options = this.page.getPageSizeOptions();\\n\\n            expect(itemText.textContent).toBe('1-20 of 49');\\n            expect(input.value).toBe('1');\\n            expect(options.length).toBe(3);\\n            expect(options[0].textContent).toBe('5');\\n            expect(options[1].textContent).toBe('10');\\n            expect(options[2].textContent).toBe('20');\\n        });\\n\\n        it('should show pager without items', function () {\\n            this.element = createFixture(\\n                `<mc-pager go-to-page-label=\\\"Go to page: \\\" page-size-label=\\\"Show rows: \\\" current-page-label=\\\"{from}-{to} of {total}\\\"></mc-pager>`);\\n\\n            let itemText = this.page.getItemText();\\n\\n            expect(itemText.textContent).toBe('0-0 of 0');\\n        });\\n\\n        it('should render multiple pagers on the same page', function () {\\n            this.element = createFixture(\\n                `<mc-pager page=\\\"1\\\" page-size=\\\"20\\\" items=\\\"50\\\" go-to-page-label=\\\"Go to page: \\\" page-size-label=\\\"Show rows: \\\" current-page-label=\\\"{from}-{to} of {total}\\\"></mc-pager>\\n                 <mc-pager page=\\\"2\\\" page-size=\\\"10\\\" items=\\\"105\\\" go-to-page-label=\\\"Go to page: \\\" page-size-label=\\\"Show rows: \\\" current-page-label=\\\"{from}-{to} of {total}\\\"></mc-pager>`);\\n\\n            let count = this.page.getPagerCount();\\n\\n            expect(count).toBe(2);\\n        });\\n\\n        it('should change page on next click', function () {\\n            this.page.clickNext();\\n\\n            let itemText = this.page.getItemText();\\n            let input = this.page.getGoToPageInput();\\n\\n            expect(itemText.textContent).toBe('21-40 of 49');\\n            expect(input.value).toBe('2');\\n        });\\n\\n        it('should change page on previous click', function () {\\n            this.element = createFixture(\\n                `<mc-pager page=\\\"3\\\" page-size=\\\"10\\\" items=\\\"22\\\" go-to-page-label=\\\"Go to page: \\\" page-size-label=\\\"Show rows: \\\" current-page-label=\\\"{from}-{to} of {total}\\\"></mc-pager>`);\\n\\n            this.page.clickPrevious();\\n\\n            let itemText = this.page.getItemText();\\n            let input = this.page.getGoToPageInput();\\n\\n            expect(itemText.textContent).toBe('11-20 of 22');\\n            expect(input.value).toBe('2');\\n        });\\n\\n        it('should stay on last page when clicking next', function () {\\n            this.element = createFixture(\\n                `<mc-pager page=\\\"3\\\" page-size=\\\"10\\\" items=\\\"22\\\" go-to-page-label=\\\"Go to page: \\\" page-size-label=\\\"Show rows: \\\" current-page-label=\\\"{from}-{to} of {total}\\\"></mc-pager>`);\\n\\n            this.page.clickNext();\\n\\n            let itemText = this.page.getItemText();\\n            let input = this.page.getGoToPageInput();\\n\\n            expect(itemText.textContent).toBe('21-22 of 22');\\n            expect(input.value).toBe('3');\\n        });\\n\\n        it('should stay on first page when clicking previous', function () {\\n            this.page.clickPrevious();\\n\\n            let itemText = this.page.getItemText();\\n            let input = this.page.getGoToPageInput();\\n\\n            expect(itemText.textContent).toBe('1-20 of 49');\\n            expect(input.value).toBe('1');\\n        });\\n\\n        it('should fire event on next click', function () {\\n            this.element.addEventListener('page-change', (e) => {\\n                this.clickEvent = e;\\n            });\\n\\n            this.page.clickNext();\\n\\n            expect(this.clickEvent.detail).toEqual({ page: 2, pageSize: 20, items: 49 });\\n        });\\n\\n        it('should fire event on previous click', function () {\\n            this.element = createFixture(\\n                `<mc-pager page=\\\"2\\\" page-size=\\\"10\\\" items=\\\"22\\\" go-to-page-label=\\\"Go to page: \\\" page-size-label=\\\"Show rows: \\\" current-page-label=\\\"{from}-{to} of {total}\\\"></mc-pager>`);\\n\\n            this.element.addEventListener('page-change', (e) => {\\n                this.clickEvent = e;\\n            });\\n\\n            this.page.clickPrevious();\\n\\n            expect(this.clickEvent.detail).toEqual({ page: 1, pageSize: 10, items: 22 });\\n        });\\n\\n        it('should fire event on page size change', function () {\\n            this.element.addEventListener('page-change', (e) => {\\n                this.clickEvent = e;\\n            });\\n\\n            selectOption(this.page.getPageSizeSelect(), '5');\\n\\n            expect(this.clickEvent.detail).toEqual({ page: 1, pageSize: 5, items: 49 });\\n        });\\n\\n        it('should fire event on go to page input', function () {\\n            this.element.addEventListener('page-change', (e) => {\\n                this.clickEvent = e;\\n            });\\n\\n            enterValue(this.page.getGoToPageInput(), '3');\\n\\n            expect(this.clickEvent.detail).toEqual({ page: 3, pageSize: 20, items: 49 });\\n        });\\n    });\\n});\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}