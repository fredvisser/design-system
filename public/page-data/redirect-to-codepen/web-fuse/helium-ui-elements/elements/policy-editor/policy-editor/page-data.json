{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/policy-editor/policy-editor","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import buttonCss from '../common/styles/button.css';\\nimport inputCss from '../common/styles/input.css';\\nimport checkboxCss from '../common/styles/checkbox.css';\\nimport policyEditorCss from './policy-editor.css';\\n\\nimport { componentUtils } from '../common/component-utils.js';\\nimport { html } from '../../library/html-utils.js';\\n\\nconst styles = [buttonCss, inputCss, policyEditorCss, checkboxCss];\\n\\n(function () {\\n    class MCPolicyEditor extends HTMLElement {\\n        constructor () {\\n            super();\\n            this._isError = false;\\n\\n            this._keyboardAction = (event) => {\\n                if (!this._isError && event.key === 'Enter') {\\n                    this._handleAction('update');\\n                } else if (event.key === 'Escape') {\\n                    this._handleAction('cancel');\\n                }\\n            };\\n        }\\n\\n        _renderMain () {\\n            const template = document.createElement('template');\\n            template.innerHTML =\\n                html`<div id=\\\"mc-slide-menu-modal\\\" class=\\\"mc-slide-menu-animation\\\">\\n                    <div tabindex=\\\"-1\\\" id=\\\"mc-policy-editor-content\\\">\\n                        <h2 id=\\\"policytitle\\\" class=\\\"mc-policy-editor-header\\\">${this._i18n.header}</h2>\\n                        <input type=\\\"text\\\" id=\\\"policyNameInput\\\" ${this._disableNameEdit ? 'readonly' : ''} class=\\\"mc-input mc-policy-editor-name-input\\\"></input>\\n                        <div id=\\\"policy-validation-notification-container\\\"></div>\\n                        <h3 id=\\\"statementtitle\\\" class=\\\"mc-policy-editor-statement-title\\\">${this._i18n.tags.header}</h3>\\n                        <h4 id=\\\"tagpermissions\\\" class=\\\"mc-policy-editor-permissions\\\">${this._i18n.tags.permissions}</h4>\\n\\n                        <input type=\\\"checkbox\\\" class=\\\"mc-checkbox mc-permissions-checkbox\\\" id=\\\"readCheck\\\"></input>\\n                        <label for=\\\"readCheck\\\" class=\\\"mc-permissions-checkbox-label\\\">${this._i18n.tags.read}</label>\\n\\n                        <input type=\\\"checkbox\\\" class=\\\"mc-checkbox mc-permissions-checkbox\\\" id=\\\"writeCheck\\\"></input>\\n                        <label for=\\\"writeCheck\\\" class=\\\"mc-permissions-checkbox-label\\\">${this._i18n.tags.write}</label>\\n\\n                        <input type=\\\"checkbox\\\" class=\\\"mc-checkbox mc-permissions-checkbox\\\" id=\\\"modifyCheck\\\"></input>\\n                        <label for=\\\"modifyCheck\\\" class=\\\"mc-permissions-checkbox-label\\\">${this._i18n.tags.modify}</label>\\n\\n                        <input type=\\\"checkbox\\\" class=\\\"mc-checkbox mc-permissions-checkbox\\\" id=\\\"deleteCheck\\\"></input>\\n                        <label for=\\\"deleteCheck\\\" class=\\\"mc-permissions-checkbox-label\\\">${this._i18n.tags.delete}</label>\\n\\n                        <input type=\\\"checkbox\\\" class=\\\"mc-checkbox mc-permissions-checkbox\\\" id=\\\"createCheck\\\"></input>\\n                        <label for=\\\"createCheck\\\" class=\\\"mc-permissions-checkbox-label\\\">${this._i18n.tags.create}</label>\\n\\n                        <div class=\\\"mc-wildcardtitle\\\"><span style=\\\"font-weight: bold;\\\">${this._i18n.tags.path}</span> ${this._i18n.tags.pathDescription}</div>\\n\\n                        <input type=\\\"text\\\" id=\\\"tagWildCardInput\\\" placeholder=\\\"${this._i18n.tags.wildcardPlaceholder}\\\" class=\\\"mc-policy-permisions-wildcard mc-input\\\"></input>\\n                        <a target=\\\"_blank\\\" href=\\\"faq#what-is-a-wildcard\\\" class=\\\"mc-wildcard-doclink\\\">${this._i18n.tags.helpLink}</a>\\n\\n                        <h3 id=\\\"mpsstatementtitle\\\" class=\\\"mc-policy-editor-statement-title\\\">${this._i18n.messages.header}</h3>\\n                        <h4 id=\\\"mpsservicepermissions\\\" class=\\\"mc-policy-editor-permissions\\\">${this._i18n.messages.permissions}</h4>\\n\\n                        <input type=\\\"checkbox\\\" class=\\\"mc-checkbox mc-permissions-checkbox\\\" id=\\\"subscribeCheck\\\"></input>\\n                        <label for=\\\"subscribeCheck\\\" class=\\\"mc-permissions-checkbox-label\\\">${this._i18n.messages.subscribe}</label>\\n\\n                        <input type=\\\"checkbox\\\" class=\\\"mc-checkbox mc-permissions-checkbox\\\" id=\\\"publishCheck\\\"></input>\\n                        <label for=\\\"publishCheck\\\" class=\\\"mc-permissions-checkbox-label\\\">${this._i18n.messages.publish}</label>\\n\\n                        <div class=\\\"mc-wildcardtitle\\\"><span style=\\\"font-weight: bold;\\\">${this._i18n.messages.topic}</span> >${this._i18n.messages.topicDescription}</div>\\n                        <input type=\\\"text\\\" id=\\\"topicWildCardInput\\\" placeholder=\\\"${this._i18n.messages.wildcardPlaceholder}\\\" class=\\\"mc-policy-permisions-wildcard mc-input\\\"></input>\\n                        <a target=\\\"_blank\\\" href=\\\"faq#what-is-a-wildcard\\\" class=\\\"mc-wildcard-doclink\\\">${this._i18n.messages.helpLink}</a>\\n                        <button class=\\\"mc-button mc-policy-editor-button\\\" id=\\\"update\\\">${this._forNew ? this._i18n.create : this._i18n.update}</button>\\n                        <button class=\\\"mc-button mc-policy-editor-button ${this._disableDelete ? 'mc-slide-menu-hidden' : ''}\\\" id=\\\"delete\\\">${this._i18n.delete}</button>\\n                        <button class=\\\"mc-button mc-policy-editor-button\\\" id=\\\"cancel\\\">${this._i18n.cancel}</button>\\n                    </div>\\n                </div>`;\\n\\n            this.attachShadow({ mode: 'open' });\\n\\n            componentUtils.addStylesToElement(this.shadowRoot, styles);\\n\\n            this.shadowRoot.appendChild(template.content.cloneNode(true));\\n        }\\n\\n        static get observedAttributes () {\\n            return ['disable-delete', 'for-new', 'disable-name-edit'];\\n        }\\n\\n        attributeChangedCallback (name, oldValue, newValue) {\\n            if (!this.shadowRoot) {\\n                return;\\n            }\\n\\n            switch (name) {\\n            case 'disable-name-edit':\\n                if (newValue === 'false') {\\n                    this._policyNameInput.removeAttribute('readonly');\\n                } else {\\n                    this._policyNameInput.setAttribute('readonly', '');\\n                }\\n                break;\\n            case 'disable-delete':\\n                if (newValue === 'false') {\\n                    this._deleteButton.classList.remove('mc-slide-menu-hidden');\\n                } else {\\n                    this._deleteButton.classList.add('mc-slide-menu-hidden');\\n                }\\n                break;\\n            case 'for-new':\\n                if (newValue === 'false') {\\n                    this._updateButton.textContent = this._i18n.update;\\n                } else {\\n                    this._updateButton.textContent = this._i18n.create;\\n                }\\n                break;\\n            }\\n        }\\n\\n        connectedCallback () {\\n            componentUtils.upgradeProperty(this, 'i18n');\\n            this._render();\\n            this._addDocumentEventHandlers();\\n        }\\n\\n        _render () {\\n            if (!this.shadowRoot) {\\n                this._renderMain();\\n                this._setupInitialData();\\n                this._attachEventHandlers();\\n            }\\n        }\\n\\n        _addDocumentEventHandlers () {\\n            document.addEventListener('keydown', this._keyboardAction);\\n        }\\n\\n        _removeDocumentEventHandlers () {\\n            document.removeEventListener('keydown', this._keyboardAction);\\n        }\\n\\n        disconnectedCallback () {\\n            this._removeDocumentEventHandlers();\\n        }\\n\\n        handleError (displayedMessage) {\\n            let tn = document.createTextNode(displayedMessage);\\n            this._validationNotificationContainer.innerHTML = '<div class=\\\"mc-policy-editor-error-message\\\" id=\\\"policy-validation\\\"></div>';\\n            this.shadowRoot.getElementById('policy-validation').appendChild(tn);\\n            this._showErrors();\\n        }\\n\\n        _setupInitialData () {\\n            this._setPolicyName(this.policy.name);\\n            this._setTagPath(this.policy.tagPathFilter);\\n            this._setMessageTopic(this.policy.messageTopicFilter);\\n\\n            this._setTagActions(this.policy.tagActions);\\n            this._setMessageActions(this.policy.messageActions);\\n\\n            if (this.forNew) {\\n                this._deleteButton.style.display = 'none';\\n                this._updateButton.textContent = this._i18n.create;\\n            }\\n\\n            if (this.forWebapp) {\\n                this._deleteButton.style.display = 'none';\\n                this._policyNameInput.setAttribute('readonly', true);\\n            }\\n        }\\n\\n        _attachEventHandlers () {\\n            // text inputs\\n            this._policyNameInput.addEventListener('input', () => {\\n                this._handleNameChange();\\n            });\\n\\n            this._tagWildcardInput.addEventListener('input', () => {\\n                this._handleTagPathChange();\\n            });\\n\\n            this._topicWildCardInput.addEventListener('input', () => {\\n                this._handleMessageTopicChange();\\n            });\\n\\n            // checkboxes\\n            this._attachChangeEvent(this._readTagCheckBox, 'tag', 'read');\\n            this._attachChangeEvent(this._writeTagCheckBox, 'tag', 'write');\\n            this._attachChangeEvent(this._modifyTagCheckBox, 'tag', 'modify');\\n            this._attachChangeEvent(this._createTagCheckBox, 'tag', 'create');\\n            this._attachChangeEvent(this._deleteTagCheckBox, 'tag', 'delete');\\n            this._attachChangeEvent(this._subscribeMessageCheckBox, 'message', 'subscribe');\\n            this._attachChangeEvent(this._publishMessageCheckBox, 'message', 'publish');\\n\\n            // buttons\\n            this._attachClickEvent(this._updateButton, 'update');\\n            this._attachClickEvent(this._cancelButton, 'cancel');\\n            this._attachClickEvent(this._deleteButton, 'delete');\\n\\n            // Allow closing the dialog by clicking the modal background,\\n            // but prevent closing it by clicking the dialog itself.\\n            this._slideModal.addEventListener('click', e => {\\n                this._handleAction('cancel');\\n            });\\n            this._slideContent.addEventListener('click', e => {\\n                if (e.stopPropagation) {\\n                    e.stopPropagation();\\n                }\\n                if (e.cancelBubble != null) {\\n                    e.cancelBubble = true;\\n                }\\n            });\\n        }\\n\\n        _handleNameChange () {\\n            if (this._isError) {\\n                this._hideErrors();\\n                this._enableButton('update');\\n            }\\n            let newName = this._getPopilcyName();\\n            if (this._isHTML(newName)) {\\n                newName = escape(newName);\\n            }\\n\\n            this.dispatchEvent(new CustomEvent('policyNameChange', { detail: { name: newName } }));\\n        }\\n\\n        _handleTagPathChange () {\\n            if (!this._isError) {\\n                this._enableButton('update');\\n            }\\n            let val = this._getTagPath();\\n            if (this._isHTML(val)) {\\n                val = escape(val);\\n            }\\n            this.dispatchEvent(new CustomEvent('tagPathFilterChange', { detail: { tagPathFilter: val } }));\\n        }\\n\\n        _handleMessageTopicChange () {\\n            if (!this._isError) {\\n                this._enableButton('update');\\n            }\\n            let val = this._getMessageTopic();\\n            if (this._isHTML(val)) {\\n                val = escape(val);\\n            }\\n            this.dispatchEvent(new CustomEvent('messageTopicFilterChange', { detail: { messageTopicFilter: val } }));\\n        }\\n\\n        _attachClickEvent (button, action) {\\n            button.addEventListener('click', async () => {\\n                this._handleAction(action);\\n            });\\n        }\\n\\n        _handleAction (action) {\\n            this.dispatchEvent(new CustomEvent(action, { cancelable: true }));\\n        }\\n\\n        _attachChangeEvent (checkbox, type, action) {\\n            checkbox.addEventListener('change', (event) => {\\n                this.dispatchEvent(new CustomEvent('permissionChanged', { detail:\\n                    {\\n                        type: type,\\n                        action: action,\\n                        value: checkbox.checked\\n                    } }));\\n                this._enableButton('update');\\n            });\\n        }\\n\\n        _isHTML (str) {\\n            return /<[a-z][\\\\s\\\\S]*>/i.test(str); // tests if string contains html tags\\n        }\\n\\n        get _slideModal () {\\n            return this.shadowRoot.getElementById('mc-slide-menu-modal');\\n        }\\n\\n        get _slideContent () {\\n            return this.shadowRoot.getElementById('mc-policy-editor-content');\\n        }\\n\\n        set i18n (i18n) {\\n            this._i18n = i18n;\\n        }\\n\\n        get _forNew () {\\n            return this.getAttribute('for-new') === 'true';\\n        }\\n\\n        get _disableDelete () {\\n            return this.getAttribute('disable-delete') === 'true';\\n        }\\n\\n        get _disableNameEdit () {\\n            return this.getAttribute('disable-name-edit') === 'true';\\n        }\\n\\n        get _deleteButton () {\\n            return this.shadowRoot.getElementById('delete');\\n        }\\n\\n        get _updateButton () {\\n            return this.shadowRoot.getElementById('update');\\n        }\\n\\n        get _cancelButton () {\\n            return this.shadowRoot.getElementById('cancel');\\n        }\\n\\n        get _policyNameInput () {\\n            return this.shadowRoot.getElementById('policyNameInput');\\n        }\\n\\n        get _validationNotificationContainer () {\\n            return this.shadowRoot.getElementById('policy-validation-notification-container');\\n        }\\n\\n        get _tagWildcardInput () {\\n            return this.shadowRoot.getElementById('tagWildCardInput');\\n        }\\n\\n        get _topicWildCardInput () {\\n            return this.shadowRoot.getElementById('topicWildCardInput');\\n        }\\n\\n        get _readTagCheckBox () {\\n            return this.shadowRoot.getElementById('readCheck');\\n        }\\n\\n        get _writeTagCheckBox () {\\n            return this.shadowRoot.getElementById('writeCheck');\\n        }\\n\\n        get _modifyTagCheckBox () {\\n            return this.shadowRoot.getElementById('modifyCheck');\\n        }\\n\\n        get _deleteTagCheckBox () {\\n            return this.shadowRoot.getElementById('deleteCheck');\\n        }\\n\\n        get _createTagCheckBox () {\\n            return this.shadowRoot.getElementById('createCheck');\\n        }\\n\\n        get _subscribeMessageCheckBox () {\\n            return this.shadowRoot.getElementById('subscribeCheck');\\n        }\\n\\n        get _publishMessageCheckBox () {\\n            return this.shadowRoot.getElementById('publishCheck');\\n        }\\n\\n        _getPopilcyName () {\\n            return this._policyNameInput.value;\\n        }\\n\\n        _setPolicyName (name) {\\n            this._policyNameInput.value = name;\\n        }\\n\\n        _getTagPath () {\\n            return this._tagWildcardInput.value;\\n        }\\n\\n        _setTagPath (value) {\\n            this._tagWildcardInput.value = value;\\n        }\\n\\n        _getMessageTopic () {\\n            return this._topicWildCardInput.value;\\n        }\\n\\n        _setMessageTopic (value) {\\n            this._topicWildCardInput.value = value;\\n        }\\n\\n        _enableButton (buttonId) {\\n            let button = this.shadowRoot.getElementById(`${buttonId}`);\\n            button.removeAttribute('disabled');\\n        };\\n\\n        _disableButton (buttonId) {\\n            let button = this.shadowRoot.getElementById(`${buttonId}`);\\n            button.setAttribute('disabled', true);\\n        };\\n\\n        _hideErrors () {\\n            this._policyNameInput.classList.remove('error');\\n            this._validationNotificationContainer.innerHTML = '';\\n            this._isError = false;\\n        };\\n\\n        _showErrors () {\\n            this._policyNameInput.classList.add('error');\\n            this._disableButton('update');\\n            this._isError = true;\\n        };\\n\\n        _setTagActions (actions) {\\n            actions.forEach(action => {\\n                switch (action) {\\n                case 'read':\\n                    this._readTagCheckBox.checked = true;\\n                    break;\\n                case 'write':\\n                    this._writeTagCheckBox.checked = true;\\n                    break;\\n                case 'delete':\\n                    this._deleteTagCheckBox.checked = true;\\n                    break;\\n                case 'modify':\\n                    this._modifyTagCheckBox.checked = true;\\n                    break;\\n                case 'create':\\n                    this._createTagCheckBox.checked = true;\\n                    break;\\n                default:\\n                    break;\\n                }\\n            });\\n        }\\n\\n        _setMessageActions (actions) {\\n            actions.forEach(action => {\\n                switch (action) {\\n                case 'subscribe':\\n                    this._subscribeMessageCheckBox.checked = true;\\n                    break;\\n                case 'publish':\\n                    this._publishMessageCheckBox.checked = true;\\n                    break;\\n                default:\\n                    break;\\n                }\\n            });\\n        }\\n    }\\n\\n    componentUtils.registerCustomElement('mc-policy-editor', MCPolicyEditor);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}