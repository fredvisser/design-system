{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/policy-editor/test/policy-editor-test","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../policy-editor.js';\\n\\nimport { createFixture, pressKey } from '../../test/test-utils.js';\\nimport { PolicyEditorPage } from './policy-editor-page.js';\\n\\nconst POLICY_EDITOR_I18N = {\\n    header: 'Policy settings',\\n    tags: {\\n        header: 'Tag service',\\n        permissions: 'Permissions',\\n        read: 'Read',\\n        write: 'Write',\\n        modify: 'Modify',\\n        delete: 'Delete',\\n        create: 'Create',\\n        path: 'Tag path',\\n        pathDescription: 'Set tag permissions based on tag path',\\n        wildcardPlaceholder: 'Wildcard path...',\\n        helpLink: 'Learn more about using wildcard syntax.'\\n    },\\n    messages: {\\n        header: 'Message service',\\n        permissions: 'Permissions',\\n        subscribe: 'Subscribe',\\n        publish: 'Publish',\\n        topic: 'Message Topic',\\n        topicDescription: 'Set permissions to specific topic or topics',\\n        wildcardPlaceholder: 'Wildcard path...',\\n        helpLink: 'Learn more about using wildcard syntax.'\\n    },\\n    create: 'Create',\\n    update: 'Update',\\n    delete: 'Delete',\\n    cancel: 'Cancel'\\n};\\n\\ndescribe('PolicyEditor ', () => {\\n    describe('for new ', () => {\\n        beforeEach(function () {\\n            this.page = new PolicyEditorPage();\\n            this.element = createFixture(`<mc-policy-editor for-new=\\\"true\\\" disable-delete=\\\"true\\\"></mc-policy-editor>`,\\n                (element) => {\\n                    element.i18n = POLICY_EDITOR_I18N;\\n                    element.policy = {\\n                        name: 'my-policy-name',\\n                        tagPathFilter: 'my-tag-path',\\n                        messageTopicFilter: 'my-message-topic',\\n                        tagActions: ['read', 'write'],\\n                        messageActions: ['publish']\\n                    };\\n                });\\n        });\\n\\n        it('should have Create button', function () {\\n            let button = this.page.getUpdateButton();\\n            expect(button.innerHTML).toBe('Create');\\n        });\\n\\n        it('should have Delete button hidden', function () {\\n            let button = this.page.getDeleteButton();\\n            expect(button.classList.value.includes('mc-slide-menu-hidden')).toBe(true);\\n        });\\n    });\\n\\n    describe('for webapp ', () => {\\n        beforeEach(function () {\\n            this.page = new PolicyEditorPage();\\n            this.element = createFixture(`<mc-policy-editor disable-delete=\\\"true\\\" disable-name-edit=\\\"true\\\"></mc-policy-editor>`,\\n                (element) => {\\n                    element.i18n = POLICY_EDITOR_I18N;\\n                    element.policy = {\\n                        name: 'my-policy-name',\\n                        tagPathFilter: 'my-tag-path',\\n                        messageTopicFilter: 'my-message-topic',\\n                        tagActions: ['read', 'write'],\\n                        messageActions: ['publish']\\n                    };\\n                });\\n        });\\n\\n        it('should have Delete button hidden', function () {\\n            let button = this.page.getDeleteButton();\\n            expect(button.classList.value.includes('mc-slide-menu-hidden')).toBe(true);\\n        });\\n\\n        it('cannot edit policy name', function () {\\n            let input = this.page.getPolicyNameInput();\\n            expect(input.hasAttribute('readonly')).toBe(true);\\n        });\\n    });\\n\\n    describe('', () => {\\n        beforeEach(function () {\\n            this.page = new PolicyEditorPage();\\n            this.element = createFixture(`<mc-policy-editor disable-name-edit=\\\"false\\\"></mc-policy-editor>`,\\n                (element) => {\\n                    element.i18n = POLICY_EDITOR_I18N;\\n                    element.policy = {\\n                        name: 'my-policy-name',\\n                        tagPathFilter: 'my-tag-path',\\n                        messageTopicFilter: 'my-message-topic',\\n                        tagActions: ['read', 'write'],\\n                        messageActions: ['publish']\\n                    };\\n                });\\n        });\\n\\n        it('can edit policy name', function () {\\n            let input = this.page.getPolicyNameInput();\\n            expect(input.hasAttribute('readonly')).toBe(false);\\n        });\\n\\n        it('should display title', function () {\\n            let title = this.page.getTitle();\\n\\n            expect(title.textContent).toBe('Policy settings');\\n        });\\n\\n        it('should show tag section', function () {\\n            let tagSection = this.page.getTagSection();\\n\\n            expect(tagSection.textContent).toBe('Tag service');\\n        });\\n\\n        it('should show message section', function () {\\n            let messageSection = this.page.getMessageSection();\\n\\n            expect(messageSection.textContent).toBe('Message service');\\n        });\\n\\n        it('should display policy name', function () {\\n            let policyName = this.page.getPolicyNameInput();\\n\\n            expect(policyName.value).toBe('my-policy-name');\\n        });\\n\\n        it('should display tag path filter', function () {\\n            let tagPath = this.page.getTagPathFilterInput();\\n\\n            expect(tagPath.value).toBe('my-tag-path');\\n        });\\n\\n        it('should display message topic filter', function () {\\n            let messageTopic = this.page.getMessageTopicFilterInput();\\n\\n            expect(messageTopic.value).toBe('my-message-topic');\\n        });\\n\\n        it('should trigger name change envent with new name when editing the name input', async function () {\\n            let policyName = this.page.getPolicyNameInput();\\n\\n            let newName;\\n            this.element.addEventListener('policyNameChange', (evt) => {\\n                newName = evt.detail.name;\\n            });\\n\\n            this.page.setEditBoxValue(policyName, 'new-name');\\n            expect(newName).toBe('new-name');\\n        });\\n\\n        it('should trigger tag path change event with new tagPathFilter when editing the tag path wildcard input input', async function () {\\n            let tagPathFilter = this.page.getTagPathFilterInput();\\n\\n            let newValue;\\n            this.element.addEventListener('tagPathFilterChange', (evt) => {\\n                newValue = evt.detail.tagPathFilter;\\n            });\\n\\n            this.page.setEditBoxValue(tagPathFilter, 'new-tag');\\n            expect(newValue).toBe('new-tag');\\n        });\\n\\n        it('should trigger message topic change event with new messageTopicFilter when editing the topic wildcard input', async function () {\\n            let filter = this.page.getMessageTopicFilterInput();\\n\\n            let newValue;\\n            this.element.addEventListener('messageTopicFilterChange', (evt) => {\\n                newValue = evt.detail.messageTopicFilter;\\n            });\\n\\n            this.page.setEditBoxValue(filter, 'new-message');\\n            expect(newValue).toBe('new-message');\\n        });\\n\\n        it('should trigger the permissionChanged event with the propper details when clicking on the readCheck check box ', async function () {\\n            let readTag = this.page.getReadTagCheckBox();\\n            let expectedValue = !readTag.checked;\\n\\n            let type;\\n            let action;\\n            let value;\\n            this.element.addEventListener('permissionChanged', (evt) => {\\n                type = evt.detail.type;\\n                action = evt.detail.action;\\n                value = evt.detail.value;\\n            });\\n\\n            this.page.clickCheckBox(readTag);\\n            expect(type).toBe('tag');\\n            expect(action).toBe('read');\\n            expect(value).toBe(expectedValue);\\n        });\\n\\n        it('should trigger the permissionChanged event with the propper details when clicking on the WriteCheck check box ', async function () {\\n            let writeTag = this.page.getWriteTagCheckBox();\\n            let expectedValue = !writeTag.checked;\\n\\n            let type;\\n            let action;\\n            let value;\\n            this.element.addEventListener('permissionChanged', (evt) => {\\n                type = evt.detail.type;\\n                action = evt.detail.action;\\n                value = evt.detail.value;\\n            });\\n\\n            this.page.clickCheckBox(writeTag);\\n            expect(type).toBe('tag');\\n            expect(action).toBe('write');\\n            expect(value).toBe(expectedValue);\\n        });\\n\\n        it('should trigger the permissionChanged event with the propper details when clicking on the deleteCheck check box ', async function () {\\n            let checkBox = this.page.getDeleteTagCheckBox();\\n            let expectedValue = !checkBox.checked;\\n\\n            let type;\\n            let action;\\n            let value;\\n            this.element.addEventListener('permissionChanged', (evt) => {\\n                type = evt.detail.type;\\n                action = evt.detail.action;\\n                value = evt.detail.value;\\n            });\\n\\n            this.page.clickCheckBox(checkBox);\\n            expect(type).toBe('tag');\\n            expect(action).toBe('delete');\\n            expect(value).toBe(expectedValue);\\n        });\\n\\n        it('should trigger the permissionChanged event with the propper details when clicking on the createCheck check box ', async function () {\\n            let checkBox = this.page.getCreateTagCheckBox();\\n            let expectedValue = !checkBox.checked;\\n\\n            let type;\\n            let action;\\n            let value;\\n            this.element.addEventListener('permissionChanged', (evt) => {\\n                type = evt.detail.type;\\n                action = evt.detail.action;\\n                value = evt.detail.value;\\n            });\\n\\n            this.page.clickCheckBox(checkBox);\\n            expect(type).toBe('tag');\\n            expect(action).toBe('create');\\n            expect(value).toBe(expectedValue);\\n        });\\n\\n        it('should trigger the permissionChanged event with the propper details when clicking on the modifyCheck check box ', async function () {\\n            let checkBox = this.page.getModifyTagCheckBox();\\n            let expectedValue = !checkBox.checked;\\n\\n            let type;\\n            let action;\\n            let value;\\n            this.element.addEventListener('permissionChanged', (evt) => {\\n                type = evt.detail.type;\\n                action = evt.detail.action;\\n                value = evt.detail.value;\\n            });\\n\\n            this.page.clickCheckBox(checkBox);\\n            expect(type).toBe('tag');\\n            expect(action).toBe('modify');\\n            expect(value).toBe(expectedValue);\\n        });\\n\\n        it('should trigger the permissionChanged event with the propper details when clicking on the publish message check box ', async function () {\\n            let checkBox = this.page.getPublishToTopicCheckBox();\\n            let expectedValue = !checkBox.checked;\\n\\n            let type;\\n            let action;\\n            let value;\\n            this.element.addEventListener('permissionChanged', (evt) => {\\n                type = evt.detail.type;\\n                action = evt.detail.action;\\n                value = evt.detail.value;\\n            });\\n\\n            this.page.clickCheckBox(checkBox);\\n            expect(type).toBe('message');\\n            expect(action).toBe('publish');\\n            expect(value).toBe(expectedValue);\\n        });\\n\\n        it('should trigger the permissionChanged event with the propper details when clicking on the subscribe message check box ', async function () {\\n            let checkBox = this.page.getSubscribeToTopicCheckBox();\\n            let expectedValue = !checkBox.checked;\\n\\n            let type;\\n            let action;\\n            let value;\\n            this.element.addEventListener('permissionChanged', (evt) => {\\n                type = evt.detail.type;\\n                action = evt.detail.action;\\n                value = evt.detail.value;\\n            });\\n\\n            this.page.clickCheckBox(checkBox);\\n            expect(type).toBe('message');\\n            expect(action).toBe('subscribe');\\n            expect(value).toBe(expectedValue);\\n        });\\n\\n        it('should trigger an update event when clicking Update button ', async function () {\\n            let button = this.page.getUpdateButton();\\n\\n            let triggered = false;\\n            this.element.addEventListener('update', (evt) => {\\n                triggered = true;\\n            });\\n\\n            this.page.clickButton(button);\\n            expect(triggered).toBe(true);\\n        });\\n\\n        it('should trigger a delete event when clicking Delete button ', async function () {\\n            let button = this.page.getDeleteButton();\\n\\n            let triggered = false;\\n            this.element.addEventListener('delete', (evt) => {\\n                triggered = true;\\n            });\\n\\n            this.page.clickButton(button);\\n            expect(triggered).toBe(true);\\n        });\\n\\n        it('should trigger a cancel event when clicking Cancel button', async function () {\\n            let button = this.page.getCancelButton();\\n\\n            let triggered = false;\\n            this.element.addEventListener('cancel', (evt) => {\\n                triggered = true;\\n            });\\n\\n            this.page.clickButton(button);\\n            expect(triggered).toBe(true);\\n        });\\n\\n        it('should trigger update event when pressing Enter', async function () {\\n            let triggered = false;\\n            this.element.addEventListener('update', (evt) => {\\n                triggered = true;\\n            });\\n            pressKey(document, 'Enter');\\n            expect(triggered).toBe(true);\\n        });\\n\\n        it('should trigger cancel event when pressing Escape', async function () {\\n            let triggered = false;\\n            this.element.addEventListener('cancel', (evt) => {\\n                triggered = true;\\n            });\\n            pressKey(document, 'Escape');\\n            expect(triggered).toBe(true);\\n        });\\n    });\\n\\n    describe('in error state ', () => {\\n        beforeEach(function () {\\n            this.page = new PolicyEditorPage();\\n            this.element = createFixture(`<mc-policy-editor></mc-policy-editor>`,\\n                (element) => {\\n                    element.i18n = POLICY_EDITOR_I18N;\\n                    element.policy = {\\n                        name: 'my-policy-name',\\n                        tagPathFilter: 'my-tag-path',\\n                        messageTopicFilter: 'my-message-topic',\\n                        tagActions: ['read', 'write'],\\n                        messageActions: ['publish']\\n                    };\\n                });\\n\\n            this.element.handleError('Awesome Error !!!!');\\n        });\\n\\n        it('should display error message', function () {\\n            let notificationContainer = this.page.getNotificationContainer();\\n            let errorMessage = notificationContainer.querySelector('#policy-validation');\\n            expect(errorMessage.textContent).toBe('Awesome Error !!!!');\\n            expect(errorMessage.classList.value).toBe('mc-policy-editor-error-message');\\n        });\\n\\n        it('should disable Update button', function () {\\n            let button = this.page.getUpdateButton();\\n            expect(button.disabled).toBe(true);\\n        });\\n\\n        it('should underline input with red', function () {\\n            let button = this.page.getPolicyNameInput();\\n            expect(button.classList.value).toBe('mc-input mc-policy-editor-name-input error');\\n        });\\n    });\\n});\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}