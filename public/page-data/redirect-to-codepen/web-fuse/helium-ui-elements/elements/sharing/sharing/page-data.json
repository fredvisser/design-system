{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/sharing/sharing","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import uploadCss from './sharing.css';\\nimport inputCss from '../common/styles/input.css';\\n\\nimport { componentUtils } from '../common/component-utils.js';\\nimport { html } from '../../library/html-utils.js';\\nimport '../autocomplete/autocomplete.js';\\n\\nconst styles = [uploadCss, inputCss];\\n\\n(function () {\\n    class MCSharing extends HTMLElement {\\n        constructor () {\\n            super();\\n            this._selectedEmails = [];\\n        }\\n\\n        _render () {\\n            const template = document.createElement('template');\\n            template.innerHTML =\\n                html`<div class=\\\"mc-sharing-main\\\">\\n                    <h3 id=\\\"mc-sharing-title\\\">${this.header}</h3>\\n                    <mc-autocomplete id=\\\"mc-sharing-email-input\\\" placeholder='${this.emailPlaceholder}'></mc-autocomplete>\\n                    <div id=\\\"mc-sharing-selected-emails\\\"></div>\\n                    <div id=\\\"mc-sharing-user-message\\\">\\n                        <button class=\\\"mc-sharing-message-button hidden\\\" action=\\\"add\\\" id=\\\"mc-sharing-message-button\\\">${this.messageAddText}</button>\\n                        <textarea id=\\\"mc-sharing-text-message\\\" class=\\\"mc-sharing-text-message hidden\\\" autocapitalize=\\\"none\\\" autocomplete=\\\"off\\\" placeholder=\\\"${this.messagePlaceholder}\\\" wrap=\\\"soft\\\" ></textarea>\\n                    </div>\\n                </div>`;\\n            this.attachShadow({ mode: 'open' });\\n\\n            componentUtils.addStylesToElement(this.shadowRoot, styles);\\n\\n            this.shadowRoot.appendChild(template.content.cloneNode(true));\\n        }\\n\\n        static get observedAttributes () {\\n            return ['header'];\\n        }\\n\\n        attributeChangedCallback (name, oldValue, newValue) {\\n            if (!this.shadowRoot) {\\n                return;\\n            }\\n            switch (name) {\\n            case 'header': {\\n                this.heading.innerText = newValue;\\n                break;\\n            }\\n            }\\n        }\\n\\n        connectedCallback () {\\n            componentUtils.upgradeProperty(this, 'selectedEmails');\\n            componentUtils.upgradeProperty(this, 'emailHints');\\n            if (!this.shadowRoot) {\\n                this._render();\\n                this._init();\\n                this._renderSelectedEmails(this._selectedEmails);\\n                this._renderEmailHints(this._emailHints);\\n                this._attachEventHandlers();\\n            }\\n        }\\n\\n        _init () {\\n            this.emailInput.items = this.emailHints;\\n            this._scrollToBottom();\\n        }\\n\\n        _attachEventHandlers () {\\n            this.emailInput.addEventListener('input-submitted', (evt) => {\\n                let newEmail = evt.detail.value;\\n                if (this._isValidEmail(newEmail)) {\\n                    let _shouldScroll = this._shouldScroll();\\n                    if (this._addSelectedEmail(newEmail)) {\\n                        this.emailInput.clear();\\n                        if (_shouldScroll) {\\n                            this._scrollToBottom();\\n                        }\\n                        this.messageButton.classList.remove('hidden');\\n                        this.dispatchEvent(new CustomEvent('email-added', { detail: { email: newEmail } }));\\n                    } else {\\n                        this.emailInput.setAttribute('error-message', `${newEmail === this.everyone ? this.errorMessageAlreadyPublic : this.errorMessageAlreadyUsed}`);\\n                    }\\n                } else {\\n                    this.emailInput.setAttribute('error-message', this.errorMessageInvalidEmail);\\n                }\\n            });\\n\\n            this.messageButton.addEventListener('click', (evt) => {\\n                let action = this.messageButton.getAttribute('action');\\n                switch (action) {\\n                case 'add': {\\n                    this.messageText.classList.remove('hidden');\\n                    this.messageButton.textContent = this.messageRemoveText;\\n                    this.messageButton.setAttribute('action', 'remove');\\n                    break;\\n                }\\n                case 'remove': {\\n                    this.messageText.classList.add('hidden');\\n                    this.messageButton.textContent = this.messageAddText;\\n                    this.messageButton.setAttribute('action', 'add');\\n                    break;\\n                }\\n                }\\n            });\\n\\n            this.messageText.addEventListener('change', (evt) => {\\n                this.dispatchEvent(new CustomEvent('custom-message-changed', { detail: { message: this.messageText.value } }));\\n            });\\n        }\\n\\n        get header () {\\n            return this.getAttribute('header') || '';\\n        }\\n\\n        get emailPlaceholder () {\\n            return this.getAttribute('email-placeholder');\\n        }\\n\\n        get messageAddText () {\\n            return this.getAttribute('message-add-text');\\n        }\\n\\n        get messageRemoveText () {\\n            return this.getAttribute('message-remove-text');\\n        }\\n\\n        get messagePlaceholder () {\\n            return this.getAttribute('message-placeholder');\\n        }\\n\\n        get errorMessageInvalidEmail () {\\n            return this.getAttribute('error-message-invalid-email');\\n        }\\n\\n        get errorMessageAlreadyPublic () {\\n            return this.getAttribute('error-message-already-public');\\n        }\\n\\n        get errorMessageAlreadyUsed () {\\n            return this.getAttribute('error-message-already-used');\\n        }\\n\\n        get everyone () {\\n            return this.getAttribute('everyone') || 'Everyone';\\n        }\\n\\n        get emailHints () {\\n            return this._emailHints !== undefined ? this._emailHints : [];\\n        }\\n\\n        set emailHints (value) {\\n            this._emailHints = value;\\n            this._renderEmailHints(value);\\n        }\\n\\n        get customMessage () {\\n            return this.messageText.value;\\n        }\\n\\n        get heading () {\\n            return this.shadowRoot.getElementById('mc-sharing-title');\\n        }\\n\\n        get title () {\\n            return this.getAttribute('title');\\n        }\\n\\n        set status (value) {\\n            this.setAttribute('title', value);\\n        }\\n\\n        set selectedEmails (value) {\\n            this._selectedEmails = value;\\n            this._renderSelectedEmails(value);\\n        }\\n\\n        get emailInput () {\\n            return this.shadowRoot.getElementById('mc-sharing-email-input');\\n        }\\n\\n        get messageButton () {\\n            return this.shadowRoot.getElementById('mc-sharing-message-button');\\n        }\\n\\n        get messageText () {\\n            return this.shadowRoot.getElementById('mc-sharing-text-message');\\n        }\\n\\n        _addSelectedEmail (value) {\\n            let index = this._selectedEmails.indexOf(value);\\n            if (index === -1) {\\n                this._selectedEmails.push(value);\\n                this._renderSelectedEmails(this._selectedEmails);\\n                return true;\\n            }\\n            return false;\\n        }\\n\\n        _removeSelectedEmail (value) {\\n            let index = this._selectedEmails.indexOf(value);\\n            if (index > -1) {\\n                this._selectedEmails.splice(index, 1);\\n                this._renderSelectedEmails(this._selectedEmails);\\n            }\\n            this.dispatchEvent(new CustomEvent('email-removed', { detail: { email: value } }));\\n        }\\n\\n        _renderEmailHints (emailHints) {\\n            if (!this.shadowRoot) {\\n                return;\\n            }\\n            this.emailInput.items = emailHints;\\n        }\\n\\n        _renderSelectedEmails (selectedEmails) {\\n            if (!this.shadowRoot) {\\n                return;\\n            }\\n            let placeHolder = this._getSelectedEmailsPlaceholder();\\n            placeHolder.innerHTML = '';\\n            for (let email of selectedEmails) {\\n                let element = this._createSelectedEmailElement(email);\\n                placeHolder.appendChild(element);\\n            }\\n        }\\n\\n        _createSelectedEmailElement (email) {\\n            let chipElement = document.createElement('span');\\n            chipElement.classList.add('mc-sharing-selected-email-chip');\\n            chipElement.textContent = email[0];\\n            let textElement = document.createElement('span');\\n            textElement.classList.add('mc-sharing-selected-email-text');\\n            textElement.textContent = ' ' + email;\\n            let removeButton = document.createElement('span');\\n            removeButton.classList.add('mc-sharing-selected-email-remove');\\n            removeButton.addEventListener('click', () => {\\n                this._removeSelectedEmail(email);\\n            });\\n\\n            let item = document.createElement('div');\\n            item.classList.add('mc-sharing-selected-email');\\n            item.appendChild(chipElement);\\n            item.appendChild(textElement);\\n            item.appendChild(removeButton);\\n            return item;\\n        }\\n\\n        _getSelectedEmailsPlaceholder () {\\n            return this.shadowRoot.querySelector('#mc-sharing-selected-emails');\\n        }\\n\\n        _isValidEmail (value) {\\n            return value === this.everyone || value.match('^[^, ]{1,100}@[^, ]{1,300}$');\\n        }\\n\\n        _shouldScroll () {\\n            let element = this._getSelectedEmailsPlaceholder();\\n            return element.scrollTop >= (element.scrollHeight - element.offsetHeight);\\n        }\\n\\n        _scrollToBottom () {\\n            function animateScroll (element, duration) {\\n                let start = element.scrollTop;\\n                let end = element.scrollHeight;\\n                let change = end - start;\\n                let increment = 20;\\n\\n                function easeInOut (currentTime, start, change, duration) {\\n                    currentTime /= duration / 2;\\n                    if (currentTime < 1) {\\n                        return change / 2 * currentTime * currentTime + start;\\n                    }\\n                    currentTime -= 1;\\n                    return -change / 2 * (currentTime * (currentTime - 2) - 1) + start;\\n                }\\n\\n                function animate (elapsedTime) {\\n                    elapsedTime += increment;\\n                    let position = easeInOut(elapsedTime, start, change, duration);\\n                    element.scrollTop = position;\\n                    if (elapsedTime < duration) {\\n                        setTimeout(function () {\\n                            animate(elapsedTime);\\n                        }, increment);\\n                    }\\n                }\\n                animate(0);\\n            }\\n\\n            animateScroll(this._getSelectedEmailsPlaceholder(), 300);\\n        }\\n    }\\n\\n    componentUtils.registerCustomElement('mc-sharing', MCSharing);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}