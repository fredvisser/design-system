{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/sharing/test/sharing-test","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../sharing.js';\\n\\nimport { createFixture, isVisible, pressKey } from '../../test/test-utils.js';\\nimport { SharingPage } from './sharing-page.js';\\nimport { AutocompletePage } from '../../autocomplete/test/autocomplete-page.js';\\n\\ndescribe('Sharing', () => {\\n    beforeEach(function () {\\n        this.element = createFixture(\\n            `<mc-sharing\\n                everyone=\\\"Everyone\\\"\\n                header=\\\"Awesome App that does not really do much.nipkg\\\"\\n                email-placeholder=\\\"Enter an email or 'Everyone'\\\"\\n                message-add-text=\\\"Add message\\\"\\n                message-remove-text=\\\"Remove custom message\\\"\\n                message-placeholder=\\\"Enter your custom message here.\\\"\\n                error-message-invalid-email=\\\"Provide valid email or 'Everyone'\\\"\\n                error-message-already-public=\\\"Already public\\\"\\n                error-message-already-used=\\\"This email is already used\\\">\\n            </mc-sharing>`);\\n        this.page = new SharingPage();\\n        this.autocompletePage = new AutocompletePage(this.page.getSharing());\\n    });\\n\\n    describe('Initial state', () => {\\n        beforeEach(function () {\\n            this.element.emailHints = ['aaa@aaa.com', 'bbb@bbb.com', 'ccc@ccc.com', 'ddd@ddd.com', 'fff@fff.com', 'xxxx@xxx.com'];\\n        });\\n\\n        it('should show sharing', function () {\\n            let sharing = this.page.getSharing();\\n            expect(isVisible(sharing)).toBeTruthy();\\n        });\\n\\n        it('should display title', function () {\\n            let title = this.page.getTitle();\\n            expect(title).toBe('Awesome App that does not really do much.nipkg');\\n        });\\n\\n        it('should display selected emails', function () {\\n            this.element.selectedEmails = ['aaa@bbb.com', 'bbb@bbb.com', 'ccc@ccc.com', 'ddd@ddd.com', 'fff@fff.com', 'xxxx@xxx.com', 'Everyone'];\\n            let emails = this.page.getSelectedEmails();\\n            expect(emails.length).toBe(7);\\n        });\\n\\n        it('should scroll selected emails to bottom', function () {\\n            this.element.selectedEmails = ['aaa@bbb.com', 'bbb@bbb.com', 'ccc@ccc.com', 'ddd@ddd.com', 'fff@fff.com', 'xxxx@xxx.com', 'Everyone'];\\n            let container = this.page.getSelectedEmailsContainer();\\n            expect(container.scrollTop <= (container.scrollHeight - container.offsetHeight)).toBeTruthy();\\n        });\\n\\n        it('should display selected emails and everyone', function () {\\n            this.element.selectedEmails = ['aaa@bbb.com', 'Everyone'];\\n            let emails = this.page.getSelectedEmails();\\n            expect(emails.length).toBe(2);\\n        });\\n\\n        it('should display email chip propperly', function () {\\n            this.element.selectedEmails = ['aaa@bbb.com', 'Everyone'];\\n            let emails = this.page.getSelectedEmails();\\n            let chip = emails.item(0);\\n\\n            let initial = this.page.getSelectedEmailInitial(chip);\\n            let text = this.page.getSelectedEmailText(chip);\\n            let button = this.page.getSelectedEmailCloseButton(chip);\\n            expect(initial.innerText).toBe('a');\\n            expect(text.innerText).toBe('aaa@bbb.com');\\n            expect(button).toBeTruthy();\\n        });\\n\\n        it('should not display Add message button', function () {\\n            this.element.selectedEmails = ['aaa@bbb.com', 'Everyone'];\\n            let button = this.page.getUserMessageButton();\\n            expect(isVisible(button)).toBeFalsy();\\n        });\\n\\n        it('should not display message text area', function () {\\n            this.element.selectedEmails = ['aaa@bbb.com', 'Everyone'];\\n            let message = this.page.getUserMessage();\\n            expect(message.classList.value).toBe('mc-sharing-text-message hidden');\\n        });\\n\\n        it('should remove email chip if clicking on X button', function () {\\n            this.element.selectedEmails = ['aaa@bbb.com', 'Everyone'];\\n\\n            let emails = this.page.getSelectedEmails();\\n            let chip = emails.item(0);\\n            this.page.clickRemoveChipButton(chip);\\n\\n            emails = this.page.getSelectedEmails();\\n            chip = emails.item(0);\\n            let initial = this.page.getSelectedEmailInitial(chip);\\n            let text = this.page.getSelectedEmailText(chip);\\n            expect(emails.length).toBe(1);\\n            expect(initial.innerText).toBe('E');\\n            expect(text.innerText).toBe('Everyone');\\n        });\\n\\n        it('should trigger email-added event', function () {\\n            this.element.selectedEmails = ['aaa@bbb.com', 'Everyone'];\\n\\n            let remoevedEmail;\\n            this.element.addEventListener('email-removed', (evt) => {\\n                remoevedEmail = evt.detail.email;\\n            });\\n\\n            let emails = this.page.getSelectedEmails();\\n            let chip = emails.item(0);\\n            this.page.clickRemoveChipButton(chip);\\n\\n            expect(remoevedEmail).toBe('aaa@bbb.com');\\n        });\\n    });\\n\\n    describe('Adding an email', () => {\\n        it('should add an email chip when typing and hitting enter', function () {\\n            this.autocompletePage.setInputValue('cc@cc.com');\\n            pressKey(this.autocompletePage.getInput(), 'Enter');\\n\\n            let emails = this.page.getSelectedEmails();\\n            expect(emails.length).toBe(1);\\n\\n            let chip = emails[0];\\n\\n            let initial = this.page.getSelectedEmailInitial(chip);\\n            let text = this.page.getSelectedEmailText(chip);\\n            let button = this.page.getSelectedEmailCloseButton(chip);\\n\\n            expect(initial.innerText).toBe('c');\\n            expect(text.innerText).toBe('cc@cc.com');\\n            expect(button).toBeTruthy();\\n        });\\n\\n        it('should clear email input and hitting enter', function () {\\n            this.autocompletePage.setInputValue('cc@cc.com');\\n            pressKey(this.autocompletePage.getInput(), 'Enter');\\n\\n            this.autocompletePage.getInput().value = '';\\n        });\\n\\n        it('should trigger email-added event', function () {\\n            this.autocompletePage.setInputValue('cc@cc.com');\\n            let email;\\n            this.element.addEventListener('email-added', (evt) => {\\n                email = evt.detail.email;\\n            });\\n\\n            pressKey(this.autocompletePage.getInput(), 'Enter');\\n            expect(email).toBe('cc@cc.com');\\n        });\\n\\n        it('should display Add message button', function () {\\n            this.autocompletePage.setInputValue('cc@cc.com');\\n            pressKey(this.autocompletePage.getInput(), 'Enter');\\n            let button = this.page.getUserMessageButton();\\n            expect(isVisible(button)).toBeTruthy();\\n        });\\n\\n        it('should not add the same email', function () {\\n            this.element.selectedEmails = ['aaa@bbb.com', 'bbb@bbb.com'];\\n            this.autocompletePage.setInputValue('aaa@bbb.com');\\n            pressKey(this.autocompletePage.getInput(), 'Enter');\\n\\n            let emails = this.page.getSelectedEmails();\\n            expect(emails.length).toBe(2);\\n\\n            expect(this.page.getEmailInput().getAttribute('error-message')).toBe('This email is already used');\\n        });\\n\\n        it('should not add Everyone twice', function () {\\n            this.element.selectedEmails = ['Everyone', 'bbb@bbb.com'];\\n            this.autocompletePage.setInputValue('Everyone');\\n            pressKey(this.autocompletePage.getInput(), 'Enter');\\n\\n            let emails = this.page.getSelectedEmails();\\n            expect(emails.length).toBe(2);\\n\\n            expect(this.page.getEmailInput().getAttribute('error-message')).toBe('Already public');\\n        });\\n\\n        it('should not add an invalid email and not clear input', function () {\\n            this.autocompletePage.setInputValue('cccc.com');\\n            pressKey(this.autocompletePage.getInput(), 'Enter');\\n\\n            let emails = this.page.getSelectedEmails();\\n            expect(emails.length).toBe(0);\\n\\n            expect(this.autocompletePage.getInput().value).toBe('cccc.com');\\n            expect(this.page.getEmailInput().getAttribute('error-message')).toBe(`Provide valid email or 'Everyone'`);\\n        });\\n\\n        it('should scroll to bottom', function () {\\n            this.element.selectedEmails = ['aaa@bbb.com', 'bbb@bbb.com', 'ccc@ccc.com', 'ddd@ddd.com', 'fff@fff.com', 'xxxx@xxx.com', 'Everyone'];\\n            this.autocompletePage.setInputValue('cc@cc.com');\\n            pressKey(this.autocompletePage.getInput(), 'Enter');\\n            let container = this.page.getSelectedEmailsContainer();\\n            expect(container.scrollTop <= (container.scrollHeight - container.offsetHeight)).toBeTruthy();\\n        });\\n    });\\n\\n    describe('Add message button', () => {\\n        beforeEach(function () {\\n            this.autocompletePage.setInputValue('cc@cc.com');\\n            pressKey(this.autocompletePage.getInput(), 'Enter');\\n        });\\n\\n        it('should show text area', function () {\\n            this.page.clickAddMessageButton();\\n            let message = this.page.getUserMessage();\\n            expect(message.classList.value).toBe('mc-sharing-text-message');\\n        });\\n    });\\n\\n    describe('Custom message area', () => {\\n        beforeEach(function () {\\n            this.autocompletePage.setInputValue('cc@cc.com');\\n            pressKey(this.autocompletePage.getInput(), 'Enter');\\n            this.page.clickAddMessageButton();\\n        });\\n\\n        it('should trigger event when changing message', function () {\\n            let message;\\n            this.element.addEventListener('custom-message-changed', (evt) => {\\n                message = evt.detail.message;\\n            });\\n            this.page.setMessage('Custom message');\\n            expect(message).toBe('Custom message');\\n        });\\n    });\\n});\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}