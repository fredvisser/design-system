{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/storage-graph/storage-graph","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import storageGraphCss from './storage-graph.css';\\n\\nimport { componentUtils } from '../common/component-utils.js';\\nimport { html } from '../../library/html-utils.js';\\nimport { sizeUtils } from '../common/size-utils.js';\\nimport { stringUtils } from '../common/string-utils.js';\\n\\nconst styles = [storageGraphCss];\\nconst GRAPH_1_PERCENT_INCREMENT = 440 / 100;\\n\\n(function () {\\n    class SLStorageGraph extends HTMLElement {\\n        get header () {\\n            return this.getAttribute('header') || '';\\n        }\\n\\n        get used () {\\n            let used = this.getAttribute('used') || '0';\\n            return parseInt(used);\\n        }\\n\\n        get limit () {\\n            let limit = this.getAttribute('limit') || '0';\\n            return parseInt(limit);\\n        }\\n\\n        get mainText () {\\n            return this.getAttribute('main-text');\\n        }\\n\\n        get detailsText () {\\n            return this.getAttribute('details-text');\\n        }\\n\\n        static get observedAttributes () {\\n            return ['header', 'used', 'limit'];\\n        }\\n\\n        attributeChangedCallback (name, oldValue, newValue) {\\n            if (!this.shadowRoot) {\\n                return;\\n            }\\n            switch (name) {\\n            case 'header': {\\n                this._renderData(newValue, this.limit, this.used);\\n                break;\\n            }\\n            case 'used': {\\n                this._renderData(this.header, this.limit, newValue);\\n                break;\\n            }\\n            case 'limit': {\\n                this._renderData(this.header, newValue, this.used);\\n                break;\\n            }\\n            }\\n        }\\n\\n        connectedCallback () {\\n            if (!this.shadowRoot) {\\n                this._render();\\n            }\\n            this._renderData(this.header, this.limit, this.used);\\n        }\\n\\n        _render () {\\n            this.attachShadow({ mode: 'open' });\\n\\n            let main = document.createElement('div');\\n            main.classList.add('sl-storage-graph-main');\\n\\n            let dynamicStyleElement = document.createElement('style');\\n            dynamicStyleElement.id = 'sl-storage-graph-style';\\n            dynamicStyleElement.type = 'text/css';\\n\\n            componentUtils.addStylesToElement(this.shadowRoot, styles);\\n            this.shadowRoot.appendChild(dynamicStyleElement);\\n            this.shadowRoot.appendChild(main);\\n        }\\n\\n        _renderData (header, limit, used) {\\n            let limitFormatted = sizeUtils.format(limit);\\n            let usedFormatted = sizeUtils.format(used);\\n            let percentage = 0;\\n            if (limit > 0) {\\n                percentage = Math.round(used / limit * 100);\\n            }\\n\\n            let data = {\\n                usedValue: usedFormatted.value,\\n                usedUnit: usedFormatted.unit,\\n                limitValue: limitFormatted.value,\\n                limitUnit: limitFormatted.unit\\n            };\\n            let mainText = stringUtils.format(this.mainText, data);\\n            let detailsText = stringUtils.format(this.detailsText, data);\\n\\n            let main = this._getMain();\\n            main.innerHTML = html`\\n                <div class=\\\"sl-storage-graph-header\\\">${header}</div>\\n                <div class=\\\"sl-storage-graph-used\\\">${mainText}</div>\\n                <div class=\\\"sl-storage-graph-limit\\\">${detailsText}</div>\\n                <div class=\\\"sl-storage-graph-donut-graph\\\">\\n                    <div class=\\\"sl-storage-graph-percentage\\\">${percentage} %</div>\\n                    <svg width=\\\"160\\\" height=\\\"160\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n                        <g>\\n                            <circle class=\\\"sl-storage-graph-donut-empty\\\" r=\\\"69.85695\\\" cy=\\\"81\\\" cx=\\\"81\\\" fill=\\\"none\\\"/>\\n                            <circle class=\\\"sl-storage-graph-donut\\\" r=\\\"69.85695\\\" cy=\\\"81\\\" cx=\\\"81\\\" fill=\\\"none\\\"/>\\n                        </g>\\n                    </svg>\\n                </div>`;\\n\\n            let offset = GRAPH_1_PERCENT_INCREMENT * (100 - percentage);\\n            let dynamicStyle = `\\n                @keyframes sl-storage-graph-donut-graph {\\n                    to {\\n                        stroke-dashoffset: ${offset};\\n                    }\\n                }\\n                `;\\n\\n            let dynamicStyleElement = this._getDynamicStyle();\\n            dynamicStyleElement.innerHTML = '';\\n            dynamicStyleElement.appendChild(document.createTextNode(dynamicStyle));\\n        }\\n\\n        _getMain () {\\n            return this.shadowRoot.querySelector('.sl-storage-graph-main');\\n        }\\n\\n        _getDynamicStyle () {\\n            return this.shadowRoot.querySelector('#sl-storage-graph-style');\\n        }\\n    }\\n\\n    componentUtils.registerCustomElement('sl-storage-graph', SLStorageGraph);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}