{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/storage-graph/test/storage-graph-test","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../storage-graph.js';\\n\\nimport { createFixture, isVisible } from '../../test/test-utils.js';\\nimport { StorageGraphPage } from './storage-graph-page.js';\\n\\ndescribe('Storage Graph', () => {\\n    beforeEach(function () {\\n        this.page = new StorageGraphPage();\\n    });\\n\\n    describe('Basic', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<sl-storage-graph header=\\\"File Storage Used\\\" main-text=\\\"{usedValue}\\\" details-text=\\\"{usedUnit} of {limitValue} {limitUnit}\\\" limit=\\\"1073741824\\\" used=\\\"536870912\\\"></sl-storage-graph>`);\\n        });\\n\\n        it('should show storage graph', function () {\\n            let pager = this.page.getMain();\\n\\n            expect(isVisible(pager)).toBeTruthy();\\n        });\\n\\n        it('should show header, storage used, limit and percentage', function () {\\n            let header = this.page.getHeader();\\n            let used = this.page.getUsed();\\n            let limit = this.page.getLimit();\\n            let percentage = this.page.getPercentage();\\n\\n            expect(header.textContent).toBe('File Storage Used');\\n            expect(used.textContent).toBe('512');\\n            expect(limit.textContent).toBe('MB of 1 GB');\\n            expect(percentage.textContent).toBe('50 %');\\n        });\\n\\n        it('should format properly when used is 0', function () {\\n            this.element.setAttribute('limit', '1073741824');\\n            this.element.setAttribute('used', '0');\\n\\n            let used = this.page.getUsed();\\n            let limit = this.page.getLimit();\\n            let percentage = this.page.getPercentage();\\n\\n            expect(used.textContent).toBe('0');\\n            expect(limit.textContent).toBe('B of 1 GB');\\n            expect(percentage.textContent).toBe('0 %');\\n        });\\n\\n        it('should update header on change', function () {\\n            this.element.setAttribute('header', 'Tag Storage Used');\\n\\n            let header = this.page.getHeader();\\n            expect(header.textContent).toBe('Tag Storage Used');\\n        });\\n\\n        it('should update used on change', function () {\\n            this.element.setAttribute('used', '104857600');\\n\\n            let used = this.page.getUsed();\\n            let limit = this.page.getLimit();\\n            let percentage = this.page.getPercentage();\\n\\n            expect(used.textContent).toBe('100');\\n            expect(limit.textContent).toBe('MB of 1 GB');\\n            expect(percentage.textContent).toBe('10 %');\\n        });\\n\\n        it('should update limit on change', function () {\\n            this.element.setAttribute('limit', '636870912');\\n\\n            let used = this.page.getUsed();\\n            let limit = this.page.getLimit();\\n            let percentage = this.page.getPercentage();\\n\\n            expect(used.textContent).toBe('512');\\n            expect(limit.textContent).toBe('MB of 607.37 MB');\\n            expect(percentage.textContent).toBe('84 %');\\n        });\\n    });\\n\\n    describe('Size Format', () => {\\n        it('should format used and limit as gigabyte', function () {\\n            this.element = createFixture(\\n                `<sl-storage-graph header=\\\"File Storage Used\\\" main-text=\\\"{usedValue}\\\" details-text=\\\"{usedUnit} of {limitValue} {limitUnit}\\\" limit=\\\"2147483648\\\" used=\\\"1073741824\\\"></sl-storage-graph>`);\\n\\n            let used = this.page.getUsed();\\n            let limit = this.page.getLimit();\\n\\n            expect(used.textContent).toBe('1');\\n            expect(limit.textContent).toBe('GB of 2 GB');\\n        });\\n\\n        it('should format used as megabyte', function () {\\n            this.element = createFixture(\\n                `<sl-storage-graph header=\\\"File Storage Used\\\" main-text=\\\"{usedValue}\\\" details-text=\\\"{usedUnit} of {limitValue} {limitUnit}\\\" limit=\\\"2147483648\\\" used=\\\"53687091\\\"></sl-storage-graph>`);\\n\\n            let used = this.page.getUsed();\\n            let limit = this.page.getLimit();\\n\\n            expect(used.textContent).toBe('51.2');\\n            expect(limit.textContent).toBe('MB of 2 GB');\\n        });\\n\\n        it('should format used as kilobyte', function () {\\n            this.element = createFixture(\\n                `<sl-storage-graph header=\\\"File Storage Used\\\" main-text=\\\"{usedValue}\\\" details-text=\\\"{usedUnit} of {limitValue} {limitUnit}\\\" limit=\\\"2147483648\\\" used=\\\"357914\\\"></sl-storage-graph>`);\\n\\n            let used = this.page.getUsed();\\n            let limit = this.page.getLimit();\\n\\n            expect(used.textContent).toBe('349.53');\\n            expect(limit.textContent).toBe('kB of 2 GB');\\n        });\\n\\n        it('should format used as byte', function () {\\n            this.element = createFixture(\\n                `<sl-storage-graph header=\\\"File Storage Used\\\" main-text=\\\"{usedValue}\\\" details-text=\\\"{usedUnit} of {limitValue} {limitUnit}\\\" limit=\\\"2147483648\\\" used=\\\"123\\\"></sl-storage-graph>`);\\n\\n            let used = this.page.getUsed();\\n            let limit = this.page.getLimit();\\n\\n            expect(used.textContent).toBe('123');\\n            expect(limit.textContent).toBe('B of 2 GB');\\n        });\\n\\n        it('should format limit as megabyte', function () {\\n            this.element = createFixture(\\n                `<sl-storage-graph header=\\\"File Storage Used\\\" main-text=\\\"{usedValue}\\\" details-text=\\\"{usedUnit} of {limitValue} {limitUnit}\\\" limit=\\\"63687091\\\" used=\\\"53687091\\\"></sl-storage-graph>`);\\n\\n            let used = this.page.getUsed();\\n            let limit = this.page.getLimit();\\n\\n            expect(used.textContent).toBe('51.2');\\n            expect(limit.textContent).toBe('MB of 60.74 MB');\\n        });\\n\\n        it('should format limit as kilobyte', function () {\\n            this.element = createFixture(\\n                `<sl-storage-graph header=\\\"File Storage Used\\\" main-text=\\\"{usedValue}\\\" details-text=\\\"{usedUnit} of {limitValue} {limitUnit}\\\" limit=\\\"457914\\\" used=\\\"357914\\\"></sl-storage-graph>`);\\n\\n            let used = this.page.getUsed();\\n            let limit = this.page.getLimit();\\n\\n            expect(used.textContent).toBe('349.53');\\n            expect(limit.textContent).toBe('kB of 447.18 kB');\\n        });\\n\\n        it('should format limit as byte', function () {\\n            this.element = createFixture(\\n                `<sl-storage-graph header=\\\"File Storage Used\\\" main-text=\\\"{usedValue}\\\" details-text=\\\"{usedUnit} of {limitValue} {limitUnit}\\\" limit=\\\"1000\\\" used=\\\"123\\\"></sl-storage-graph>`);\\n\\n            let used = this.page.getUsed();\\n            let limit = this.page.getLimit();\\n\\n            expect(used.textContent).toBe('123');\\n            expect(limit.textContent).toBe('B of 1000 B');\\n        });\\n    });\\n});\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}