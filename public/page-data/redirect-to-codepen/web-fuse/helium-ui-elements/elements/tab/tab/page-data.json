{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/tab/tab","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import tabCss from './tab.css';\\n\\nimport { componentUtils } from '../common/component-utils.js';\\nimport { html } from '../../library/html-utils.js';\\n\\nconst styles = [tabCss];\\n\\n(function () {\\n    class MCTab extends HTMLElement {\\n        get activeIndex () {\\n            return parseInt(this.getAttribute('active-index') || 0);\\n        }\\n\\n        set activeIndex (value) {\\n            this.setAttribute('active-index', value.toString());\\n        }\\n\\n        static get observedAttributes () {\\n            return ['active-index'];\\n        }\\n\\n        attributeChangedCallback (name, oldValue, newValue) {\\n            if (!this.shadowRoot) {\\n                return;\\n            }\\n            switch (name) {\\n            case 'active-index': {\\n                if (oldValue === newValue) {\\n                    break;\\n                }\\n                let newIndex = parseInt(newValue || 0);\\n                this._updateSlotVisibility(newIndex);\\n\\n                let name;\\n                let menuEntries = this._getMenuEntries();\\n                for (let entry of menuEntries) {\\n                    this._updateActiveEntry(entry, newIndex);\\n                    if (this._isActive(entry, newIndex)) {\\n                        name = entry.id;\\n                    }\\n                }\\n                let detail = {\\n                    name: name,\\n                    index: newIndex\\n                };\\n                this.dispatchEvent(new CustomEvent('tab-change', { detail: detail }));\\n            }\\n            }\\n        }\\n\\n        _render () {\\n            let main = document.createElement('div');\\n            main.classList.add('mc-tab-main');\\n            main.innerHTML =\\n                `<div class=\\\"mc-tab-menu\\\"></div>\\n                 <div class=\\\"mc-tab-container\\\"></div>`;\\n\\n            this.attachShadow({ mode: 'open' });\\n\\n            componentUtils.addStylesToElement(this.shadowRoot, styles);\\n            componentUtils.addStylesToElement(this.shadowRoot, [\\n                `.mc-tab-menu-entry-font {\\n                    font-family: var(--${this.id}-label-icon-font), var(--mc-headline-font);\\n                }`\\n            ]);\\n            this.shadowRoot.appendChild(main);\\n        }\\n\\n        _updateSlotVisibility (activeIndex) {\\n            this._removeAllSlots();\\n            let slot = this._createSlot(activeIndex);\\n            let container = this._getTabContainer();\\n            container.appendChild(slot);\\n        }\\n\\n        _removeAllSlots () {\\n            let slots = this._getSlots();\\n            for (let slot of slots) {\\n                slot.parentNode.removeChild(slot);\\n            }\\n        }\\n\\n        connectedCallback () {\\n            if (!this.shadowRoot) {\\n                this._render();\\n                this._renderItems();\\n            }\\n        }\\n\\n        _createConfig () {\\n            let tabItems = [...this.querySelectorAll('mc-tab-item')];\\n            let config = [];\\n            for (const [i, tabItem] of tabItems.entries()) {\\n                config.push({\\n                    name: tabItem.getAttribute('name'),\\n                    icon: tabItem.getAttribute('icon'),\\n                    text: tabItem.getAttribute('text'),\\n                    index: i\\n                });\\n            }\\n            return config;\\n        }\\n\\n        _renderItems () {\\n            let config = this._createConfig();\\n            let menu = this._getTabMenu();\\n            let container = this._getTabContainer();\\n            menu.innerHTML = '';\\n\\n            for (let item of config) {\\n                let menuEntry = this._createMenuEntry(item);\\n                this._updateActiveEntry(menuEntry, this.activeIndex);\\n                menu.appendChild(menuEntry);\\n\\n                if (this._isActive(menuEntry, this.activeIndex)) {\\n                    let slot = this._createSlot(item.index);\\n                    container.appendChild(slot);\\n                }\\n            }\\n        }\\n\\n        _createMenuEntry (item) {\\n            let entry = document.createElement('div');\\n            entry.id = item.name;\\n            entry.classList.add('mc-tab-menu-entry');\\n            entry.classList.add('mc-tab-menu-entry-font');\\n            entry.index = item.index;\\n            entry.addEventListener('click', (e) => {\\n                this.activeIndex = item.index;\\n            });\\n            entry.innerHTML = html`<span>${item.icon || ''}</span> <span class=\\\"mc-tab-menu-entry-text\\\">${item.text}</span>`;\\n            return entry;\\n        }\\n\\n        _createSlot (index) {\\n            let slot = document.createElement('slot');\\n            slot.name = 'content-' + index;\\n            slot.index = index;\\n            return slot;\\n        }\\n\\n        _updateActiveEntry (menuEntry, activeIndex) {\\n            if (this._isActive(menuEntry, activeIndex)) {\\n                menuEntry.classList.add('mc-tab-menu-entry-active');\\n                menuEntry.classList.remove('mc-tab-menu-entry-inactive');\\n            } else {\\n                menuEntry.classList.remove('mc-tab-menu-entry-active');\\n                menuEntry.classList.add('mc-tab-menu-entry-inactive');\\n            }\\n        }\\n\\n        _isActive (element, index) {\\n            return element.index === index;\\n        }\\n\\n        _updateActiveSlot (slot, activeIndex) {\\n            if (this._isActive(slot, activeIndex)) {\\n                slot.classList.remove('mc-tab-content-hidden');\\n            } else {\\n                slot.classList.add('mc-tab-content-hidden');\\n            }\\n        }\\n\\n        _updateActiveContent (content, activeIndex) {\\n            if (content.getAttribute('slot') === 'content-' + activeIndex) {\\n                content.classList.remove('mc-tab-content-hidden');\\n            } else {\\n                content.classList.add('mc-tab-content-hidden');\\n            }\\n        }\\n\\n        _getTab () {\\n            return this.shadowRoot.querySelector('.mc-tab-main');\\n        }\\n\\n        _getTabMenu () {\\n            return this.shadowRoot.querySelector('.mc-tab-menu');\\n        }\\n\\n        _getTabContainer () {\\n            return this.shadowRoot.querySelector('.mc-tab-container');\\n        }\\n\\n        _getMenuEntries () {\\n            return this.shadowRoot.querySelectorAll('.mc-tab-menu-entry');\\n        }\\n\\n        _getSlots () {\\n            return this.shadowRoot.querySelectorAll('slot');\\n        }\\n    }\\n\\n    componentUtils.registerCustomElement('mc-tab', MCTab);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}