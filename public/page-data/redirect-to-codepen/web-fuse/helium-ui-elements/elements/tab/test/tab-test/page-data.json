{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/tab/test/tab-test","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../tab.js';\\n\\nimport { createFixture, isVisible } from '../../test/test-utils.js';\\nimport { TabPage } from './tab-page.js';\\n\\ndescribe('Tab', () => {\\n    beforeEach(function () {\\n        this.page = new TabPage();\\n    });\\n\\n    describe('Basic', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`<mc-tab id=\\\"mc-security-tab\\\">\\n                <mc-tab-item name=\\\"apikeys\\\" icon=\\\"&#xe900\\\" text=\\\"API keys\\\"></mc-tab-item>\\n                <mc-tab-item name=\\\"policies\\\" icon=\\\"&#xe901\\\" text=\\\"Policies\\\"></mc-tab-item>\\n                <span slot=\\\"content-0\\\">My first content</span>\\n                <span slot=\\\"content-1\\\">My second content</span>\\n            </mc-tab>`);\\n        });\\n\\n        it('should show tab', function () {\\n            let tab = this.page.getTab();\\n\\n            expect(isVisible(tab)).toBeTruthy();\\n        });\\n\\n        it('should show tab items', function () {\\n            let items = this.page.getTabMenuEntries();\\n\\n            expect(items.length).toBe(2);\\n            expect(items[0].textContent).toContain('API keys');\\n            expect(items[1].textContent).toContain('Policies');\\n        });\\n\\n        it('should show content of first tab', function () {\\n            let contentFirstTab = this.page.getTabContent(0);\\n            let contentSecondTab = this.page.getTabContent(1);\\n\\n            expect(isVisible(contentFirstTab)).toBeTruthy();\\n            expect(isVisible(contentSecondTab)).toBeFalsy();\\n        });\\n\\n        it('should show content of second tab after tab change', function () {\\n            this.page.clickTabMenuEntry(1);\\n\\n            let contentFirstTab = this.page.getTabContent(0);\\n            let contentSecondTab = this.page.getTabContent(1);\\n\\n            expect(isVisible(contentFirstTab)).toBeFalsy();\\n            expect(isVisible(contentSecondTab)).toBeTruthy();\\n        });\\n\\n        it('should show content of second tab after changing active-index attribute', function () {\\n            this.element.setAttribute('active-index', 1);\\n\\n            let contentFirstTab = this.page.getTabContent(0);\\n            let contentSecondTab = this.page.getTabContent(1);\\n\\n            expect(isVisible(contentFirstTab)).toBeFalsy();\\n            expect(isVisible(contentSecondTab)).toBeTruthy();\\n        });\\n\\n        it('should fire tab-change event on menu entry click', function () {\\n            let changeEvent;\\n            this.element.addEventListener('tab-change', function (e) {\\n                changeEvent = e;\\n            });\\n\\n            this.page.clickTabMenuEntry(1);\\n\\n            expect(changeEvent.detail.name).toBe('policies');\\n            expect(changeEvent.detail.index).toBe(1);\\n        });\\n\\n        it('should fire tab-change event on active-index attribute change', function () {\\n            let changeEvent;\\n            this.element.addEventListener('tab-change', function (e) {\\n                changeEvent = e;\\n            });\\n\\n            this.element.setAttribute('active-index', 1);\\n\\n            expect(changeEvent.detail.name).toBe('policies');\\n            expect(changeEvent.detail.index).toBe(1);\\n        });\\n\\n        it('should fire tab-change event only when active-index actually changed', function () {\\n            this.element.setAttribute('active-index', 1);\\n\\n            let changeEvent;\\n            this.element.addEventListener('tab-change', function (e) {\\n                changeEvent = e;\\n            });\\n\\n            this.element.setAttribute('active-index', 1);\\n\\n            expect(changeEvent).toBeUndefined();\\n        });\\n    });\\n});\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}