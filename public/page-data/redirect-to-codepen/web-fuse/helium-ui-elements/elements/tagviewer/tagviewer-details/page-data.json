{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/tagviewer/tagviewer-details","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../list-editor/list-editor.js';\\n\\nimport { componentUtils } from '../common/component-utils.js';\\nimport { dateUtils } from '../common/date-utils.js';\\nimport { html } from '../../library/html-utils.js';\\nimport { tagViewerUtils } from './tagviewer-utils.js';\\n\\nimport checkboxCss from '../common/styles/checkbox.css';\\nimport inputCss from '../common/styles/input.css';\\nimport selectCss from '../common/styles/select.css';\\nimport tagviewerStyle from './tagviewer.css';\\n\\nconst styles = [checkboxCss, inputCss, selectCss, tagviewerStyle];\\n\\n(function () {\\n    class SLTagViewerDetails extends HTMLElement {\\n        set data (data) {\\n            this._data = data;\\n            this._render();\\n        }\\n\\n        set i18n (i18n) {\\n            this._i18n = i18n;\\n            this._render();\\n        }\\n\\n        connectedCallback () {\\n            componentUtils.upgradeProperty(this, 'data');\\n            componentUtils.upgradeProperty(this, 'i18n');\\n            this._render();\\n        }\\n\\n        _render () {\\n            if (!this.shadowRoot && this._i18n) {\\n                this._renderMain();\\n            }\\n            this._renderData();\\n        }\\n\\n        _renderMain () {\\n            this.attachShadow({ mode: 'open' });\\n            componentUtils.addStylesToElement(this.shadowRoot, styles);\\n\\n            let container = document.createElement('div');\\n            container.classList.add('sl-tagviewer-details-main');\\n            this.shadowRoot.appendChild(container);\\n        }\\n\\n        _getPath (tagsWithValues) {\\n            let paths = tagsWithValues.map(function (tagWithValue) {\\n                return tagWithValue.tag.path;\\n            });\\n            return paths.join(', ');\\n        }\\n\\n        _getCollectAggregates (tagsWithValues) {\\n            let checked = true;\\n            for (let tagWithValue of tagsWithValues) {\\n                if (!tagWithValue.tag.collectAggregates) {\\n                    checked = false;\\n                    break;\\n                }\\n            }\\n            return checked;\\n        }\\n\\n        _getRetention (tagsWithValues) {\\n            let result = {\\n                type: tagsWithValues[0].tag.properties['nitagRetention'] || 'NONE',\\n                count: tagsWithValues[0].tag.properties['nitagMaxHistoryCount'] || '10000',\\n                days: tagsWithValues[0].tag.properties['nitagHistoryTTLDays'] || '30'\\n            };\\n\\n            let defaultResult = {\\n                type: '',\\n                count: '10000',\\n                days: '30'\\n            };\\n            for (let tagWithValue of tagsWithValues) {\\n                let type = tagWithValue.tag.properties['nitagRetention'] || 'NONE';\\n                if (result.type !== type) {\\n                    return defaultResult;\\n                }\\n                let count = tagWithValue.tag.properties['nitagMaxHistoryCount'];\\n                if (result.type === 'COUNT' && result.count !== count) {\\n                    return defaultResult;\\n                }\\n                let days = tagWithValue.tag.properties['nitagHistoryTTLDays'];\\n                if (result.type === 'DURATION' && result.days !== days) {\\n                    return defaultResult;\\n                }\\n            }\\n            return result;\\n        }\\n\\n        _getTagValue (tagsWithValues) {\\n            let result = '';\\n            if (tagsWithValues[0].current) {\\n                result = tagsWithValues[0].current.value.value;\\n            }\\n\\n            for (let tagWithValue of tagsWithValues) {\\n                if (tagWithValue.current && result !== tagWithValue.current.value.value) {\\n                    result = '';\\n                    break;\\n                } else if (!tagWithValue.current && result !== '') {\\n                    result = '';\\n                    break;\\n                }\\n            }\\n            return result;\\n        }\\n\\n        _getTagValueTimestamp (tagsWithValues) {\\n            let result = '';\\n            if (tagsWithValues[0].current) {\\n                result = tagsWithValues[0].current.timestamp;\\n            }\\n\\n            for (let tagWithValue of tagsWithValues) {\\n                if (tagWithValue.current && result !== tagWithValue.current.timestamp) {\\n                    result = '';\\n                    break;\\n                } else if (!tagWithValue.current && result !== '') {\\n                    result = '';\\n                    break;\\n                }\\n            }\\n            return dateUtils.format(result, this._i18n.locale);\\n        }\\n\\n        _keywordsAreEqual (keywordsA, keywordsB) {\\n            return JSON.stringify(keywordsA) === JSON.stringify(keywordsB);\\n        }\\n\\n        _getKeywords (tagsWithValues) {\\n            let result = tagsWithValues[0].tag.keywords;\\n            for (let tagWithValue of tagsWithValues) {\\n                if (!this._keywordsAreEqual(result, tagWithValue.tag.keywords)) {\\n                    result = [];\\n                    break;\\n                }\\n            }\\n            return result || [];\\n        }\\n\\n        propertiesAreEqual (propertiesA, propertiesB) {\\n            let propertyNamesA = Object.getOwnPropertyNames(propertiesA);\\n            let propertyNamesB = Object.getOwnPropertyNames(propertiesB);\\n\\n            if (propertyNamesA.length !== propertyNamesB.length) {\\n                return false;\\n            }\\n\\n            for (let propertyName of propertyNamesA) {\\n                if (propertiesA[propertyName] !== propertiesB[propertyName]) {\\n                    return false;\\n                }\\n            }\\n            return true;\\n        }\\n\\n        _getProperties (tagsWithValues) {\\n            let result = this._filterKnownProperties(tagsWithValues[0].tag.properties);\\n            for (let tagWithValue of tagsWithValues) {\\n                if (!this.propertiesAreEqual(result, this._filterKnownProperties(tagWithValue.tag.properties))) {\\n                    result = [];\\n                    break;\\n                }\\n            }\\n            return this._objectToKeyValueList(result);\\n        }\\n\\n        _getType (tagsWithValues) {\\n            let result = tagsWithValues[0].tag.type;\\n            for (let tagWithValue of tagsWithValues) {\\n                if (result !== tagWithValue.tag.type) {\\n                    result = '';\\n                    break;\\n                }\\n            }\\n            return this._i18n.types[result] || '';\\n        }\\n\\n        _renderData () {\\n            if (!this._data || !this._i18n) {\\n                return;\\n            }\\n\\n            let tagsWithValues = this._data;\\n            let path = this._getPath(tagsWithValues);\\n            let collectAggregates = this._getCollectAggregates(tagsWithValues);\\n            let retention = this._getRetention(tagsWithValues);\\n            let value = this._getTagValue(tagsWithValues);\\n            let updated = this._getTagValueTimestamp(tagsWithValues);\\n            let type = this._getType(tagsWithValues);\\n\\n            let collectAggregatesAttribute = collectAggregates ? 'checked' : '';\\n            let showRetentionDays = retention.type === 'DURATION';\\n            let showRetentionCount = retention.type === 'COUNT';\\n\\n            let main = this._getMain();\\n            main.innerHTML = html`\\n                <div>\\n                    <div class=\\\"sl-tagviewer-form-row\\\">\\n                        <label class=\\\"sl-tagviewer-form-label\\\">${this._i18n.path}</label>\\n                        <span id=\\\"tag-path\\\">${path}</span>\\n                    </div>\\n                    <div class=\\\"sl-tagviewer-form-row\\\">\\n                        <label class=\\\"sl-tagviewer-form-label\\\">${this._i18n.value}</label>\\n                        <input class=\\\"sl-tagviewer-form-input mc-input\\\" id=\\\"tag-value\\\" value=\\\"${value}\\\">\\n                        <div class=\\\"sl-tagviewer-form-error sl-tagviewer-hidden\\\" id=\\\"tag-value-error-message\\\"></div>\\n                    </div>\\n                    <div class=\\\"sl-tagviewer-form-row\\\">\\n                        <label class=\\\"sl-tagviewer-form-label\\\">${this._i18n.updated}</label>\\n                        <span id=\\\"tag-updated\\\">${updated}</span>\\n                    </div>\\n                    <div class=\\\"sl-tagviewer-form-row\\\">\\n                        <label class=\\\"sl-tagviewer-form-label\\\">${this._i18n.collectAggregates}</label>\\n                        <div>\\n                            <input type=\\\"checkbox\\\" id=\\\"tag-collect-aggregates\\\" class=\\\"mc-checkbox\\\" ${collectAggregatesAttribute}>\\n                            <label for=\\\"tag-collect-aggregates\\\"></label>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"sl-tagviewer-form-row\\\">\\n                        <label class=\\\"sl-tagviewer-form-label\\\">${this._i18n.retentionLabels.text}</label>\\n                        <select class=\\\"sl-tagviewer-form-input mc-select\\\" id=\\\"tag-retention\\\">\\n                            <option class=\\\"${retention.type === '' ? '' : 'sl-tagviewer-hidden'}\\\" disabled ${retention.type === '' ? 'selected' : ''} value></option>\\n                            <option value=\\\"NONE\\\" ${retention.type === 'NONE' ? 'selected' : ''}>${this._i18n.retention.NONE}</option>\\n                            <option value=\\\"COUNT\\\" ${retention.type === 'COUNT' ? 'selected' : ''}>${this._i18n.retention.COUNT}</option>\\n                            <option value=\\\"DURATION\\\" ${retention.type === 'DURATION' ? 'selected' : ''}>${this._i18n.retention.DURATION}</option>\\n                            <option value=\\\"PERMANENT\\\" ${retention.type === 'PERMANENT' ? 'selected' : ''}>${this._i18n.retention.PERMANENT}</option>\\n                        </select>\\n                    </div>\\n                    <div id=\\\"tag-retention-count-row\\\" class=\\\"sl-tagviewer-form-row ${showRetentionCount ? '' : 'sl-tagviewer-hidden'}\\\">\\n                        <label class=\\\"sl-tagviewer-form-label\\\"></label>\\n                        <div>\\n                            <label class=\\\"sl-tagviewer-form-label\\\">${this._i18n.retentionLabels.maxCount}</label>\\n                            <input class=\\\"sl-tagviewer-form-retention-input mc-input\\\" type=\\\"number\\\" min=\\\"0\\\" max=\\\"1000000\\\" id=\\\"tag-retention-count\\\" value=\\\"${retention.count}\\\">\\n                        </div>\\n                    </div>\\n                    <div id=\\\"tag-retention-days-row\\\" class=\\\"sl-tagviewer-form-row ${showRetentionDays ? '' : 'sl-tagviewer-hidden'}\\\">\\n                        <label class=\\\"sl-tagviewer-form-label\\\"></label>\\n                        <div>\\n                            <label class=\\\"sl-tagviewer-form-label\\\">${this._i18n.retentionLabels.days}</label>\\n                            <input class=\\\"sl-tagviewer-form-retention-input mc-input\\\" type=\\\"number\\\" min=\\\"0\\\" max=\\\"10000\\\" id=\\\"tag-retention-days\\\" value=\\\"${retention.days}\\\">\\n                        </div>\\n                    </div>\\n                    <div class=\\\"sl-tagviewer-form-row\\\">\\n                        <label class=\\\"sl-tagviewer-form-label\\\">${this._i18n.type}</label>\\n                        <span id=\\\"tag-type\\\">${type}</span>\\n                    </div>\\n                    <div class=\\\"sl-tagviewer-form-row\\\">\\n                        <label class=\\\"sl-tagviewer-form-label\\\">${this._i18n.keywords}</label>\\n                        <sl-list-editor id=\\\"tag-keywords\\\" placeholder=\\\"${this._i18n.keywordsPlaceholder}\\\"></sl-list-editor>\\n                    </div>\\n                    <div class=\\\"sl-tagviewer-form-row\\\">\\n                        <label class=\\\"sl-tagviewer-form-label\\\">${this._i18n.properties}</label>\\n                        <sl-list-editor id=\\\"tag-properties\\\" type=\\\"KeyValue\\\" key-placeholder=\\\"${this._i18n.propertiesKey}\\\" value-placeholder=\\\"${this._i18n.propertiesValue}\\\"></sl-list-editor>\\n                    </div>\\n                </div>\\n            `;\\n            this._attachEventHandlers(tagsWithValues);\\n        }\\n\\n        _updateCollectAggregates (tagsWithValues, checked) {\\n            for (let tagWithValue of tagsWithValues) {\\n                tagWithValue.tag.collectAggregates = checked;\\n            }\\n        }\\n\\n        _updateKeywords (tagsWithValues, keywords) {\\n            for (let tagWithValue of tagsWithValues) {\\n                tagWithValue.tag.keywords = keywords;\\n            }\\n        }\\n\\n        _updateProperties (tagsWithValues, propertiesList) {\\n            for (let tagWithValue of tagsWithValues) {\\n                let properties = this._getKnownProperties(tagWithValue.tag.properties);\\n                for (let item of propertiesList) {\\n                    properties[item.key] = item.value;\\n                }\\n                tagWithValue.tag.properties = properties;\\n            }\\n        }\\n\\n        _attachEventHandlers (tagsWithValues) {\\n            let tagCollectAggregates = this._getCollectAggregatesSelect();\\n            tagCollectAggregates.addEventListener('change', () => {\\n                this._updateCollectAggregates(tagsWithValues, tagCollectAggregates.checked);\\n                this._fireTagUpdateEvent(tagsWithValues);\\n            });\\n\\n            let tagRetentionCount = this._getRetentionCountInput();\\n            tagRetentionCount.addEventListener('change', () => {\\n                this._updateTagRetentionProperties(tagsWithValues, 'COUNT', tagRetentionCount.value, null);\\n                this._fireTagUpdateEvent(tagsWithValues);\\n            });\\n\\n            let tagRetentionDays = this._getRetentionDaysInput();\\n            tagRetentionDays.addEventListener('change', () => {\\n                this._updateTagRetentionProperties(tagsWithValues, 'DURATION', null, tagRetentionDays.value);\\n                this._fireTagUpdateEvent(tagsWithValues);\\n            });\\n\\n            let tagRetention = this._getRetentionSelect();\\n            tagRetention.addEventListener('change', () => {\\n                this._updateTagRetentionProperties(tagsWithValues, tagRetention.value, tagRetentionCount.value, tagRetentionDays.value);\\n                let retention = this._getRetention(tagsWithValues);\\n                this._updateTagRetentionRows(retention);\\n                this._fireTagUpdateEvent(tagsWithValues);\\n            });\\n\\n            let tagKeywords = this._getKeywordsInput();\\n            tagKeywords.data = this._getKeywords(tagsWithValues);\\n            tagKeywords.addEventListener('list-change', (e) => {\\n                this._updateKeywords(tagsWithValues, e.detail.data);\\n                this._fireTagUpdateEvent(tagsWithValues);\\n            });\\n\\n            let tagProperties = this._getPropertiesInput();\\n            tagProperties.data = this._getProperties(tagsWithValues);\\n            tagProperties.addEventListener('list-change', (e) => {\\n                this._updateProperties(tagsWithValues, e.detail.data);\\n                this._fireTagUpdateEvent(tagsWithValues);\\n            });\\n\\n            let tagValueInput = this._getTagValueInput();\\n            tagValueInput.addEventListener('change', () => {\\n                this._updateTagValue(tagsWithValues, tagValueInput.value);\\n                let error = tagViewerUtils.validateValues(tagsWithValues, tagValueInput.value, this._i18n.validationErrors);\\n                this._updateTagValueErrorMessage(error);\\n                this._fireTagUpdateValueEvent(tagValueInput.value, error);\\n            });\\n        }\\n\\n        _updateTagValue (tagsWithValues, value) {\\n            let timestamp = new Date().toISOString();\\n            for (let tagWithValue of tagsWithValues) {\\n                tagWithValue.current = {\\n                    timestamp: timestamp,\\n                    value: {\\n                        value: value,\\n                        type: tagWithValue.tag.type\\n                    }\\n                };\\n            }\\n        }\\n\\n        _updateTagRetentionProperties (tagsWithValues, retention, count, days) {\\n            for (let tagWithValue of tagsWithValues) {\\n                this._updateRetentionProperties(tagWithValue.tag.properties, retention, count, days);\\n            }\\n        }\\n\\n        _updateRetentionProperties (properties, retention, count, days) {\\n            properties['nitagRetention'] = retention;\\n            delete properties['nitagMaxHistoryCount'];\\n            delete properties['nitagHistoryTTLDays'];\\n            if (retention === 'COUNT') {\\n                properties['nitagMaxHistoryCount'] = count;\\n            }\\n            if (retention === 'DURATION') {\\n                properties['nitagHistoryTTLDays'] = days;\\n            }\\n        }\\n\\n        _updateTagRetentionRows (retention) {\\n            let countRow = this._getRetentionCountRow();\\n            let daysRow = this._getRetentionDaysRow();\\n\\n            countRow.classList.add('sl-tagviewer-hidden');\\n            daysRow.classList.add('sl-tagviewer-hidden');\\n            if (retention.type === 'COUNT') {\\n                countRow.classList.remove('sl-tagviewer-hidden');\\n            }\\n            if (retention.type === 'DURATION') {\\n                daysRow.classList.remove('sl-tagviewer-hidden');\\n            }\\n\\n            let countInput = this._getRetentionCountInput();\\n            countInput.value = retention.count || '10000';\\n            let daysInput = this._getRetentionDaysInput();\\n            daysInput.value = retention.days || '30';\\n        }\\n\\n        _filterKnownProperties (properties) {\\n            let filteredProperties = {};\\n            for (let property in properties) {\\n                if (properties.hasOwnProperty(property) && !property.startsWith('nitag')) {\\n                    filteredProperties[property] = properties[property];\\n                }\\n            }\\n            return filteredProperties;\\n        }\\n\\n        _getKnownProperties (properties) {\\n            let nitagProperties = {};\\n            for (let property in properties) {\\n                if (properties.hasOwnProperty(property) && property.startsWith('nitag')) {\\n                    nitagProperties[property] = properties[property];\\n                }\\n            }\\n            return nitagProperties;\\n        }\\n\\n        _objectToKeyValueList (obj) {\\n            obj = obj || {};\\n            return Object.keys(obj).map(function (key) {\\n                return { key: key, value: obj[key] };\\n            });\\n        }\\n\\n        _keyValueListToObject (list) {\\n            let result = {};\\n            for (let item of list) {\\n                result[item.key] = item.value;\\n            }\\n            return result;\\n        }\\n\\n        _updateTagValueErrorMessage (error) {\\n            let tagValueInput = this._getTagValueInput();\\n            let errorMessage = this._getTagValueErrorMessage();\\n            if (error) {\\n                tagValueInput.classList.add('error');\\n                errorMessage.textContent = error;\\n                errorMessage.classList.remove('sl-tagviewer-hidden');\\n            } else {\\n                tagValueInput.classList.remove('error');\\n                errorMessage.classList.add('sl-tagviewer-hidden');\\n            }\\n        }\\n\\n        _fireTagUpdateEvent (tagsWithValues) {\\n            let eventData = {\\n                tags: this._getTagsFromTagsWithValues(tagsWithValues)\\n            };\\n            this.dispatchEvent(new CustomEvent('tag-update', { detail: eventData }));\\n        }\\n\\n        _getTagsFromTagsWithValues (tagsWithValues) {\\n            return tagsWithValues.map(function (tagWithValue) {\\n                return tagWithValue.tag;\\n            });\\n        }\\n\\n        _fireTagUpdateValueEvent (value, error) {\\n            let eventData = {\\n                value: value,\\n                error: error\\n            };\\n            this.dispatchEvent(new CustomEvent('tag-update-value', { detail: eventData }));\\n        }\\n\\n        _getMain () {\\n            return this.shadowRoot.querySelector('.sl-tagviewer-details-main');\\n        }\\n\\n        _getKeywordsInput () {\\n            return this.shadowRoot.querySelector('#tag-keywords');\\n        }\\n\\n        _getPropertiesInput () {\\n            return this.shadowRoot.querySelector('#tag-properties');\\n        }\\n\\n        _getCollectAggregatesSelect () {\\n            return this.shadowRoot.querySelector('#tag-collect-aggregates');\\n        }\\n\\n        _getRetentionSelect () {\\n            return this.shadowRoot.querySelector('#tag-retention');\\n        }\\n\\n        _getRetentionCountRow () {\\n            return this.shadowRoot.querySelector('#tag-retention-count-row');\\n        }\\n\\n        _getRetentionCountInput () {\\n            return this.shadowRoot.querySelector('#tag-retention-count');\\n        }\\n\\n        _getRetentionDaysRow () {\\n            return this.shadowRoot.querySelector('#tag-retention-days-row');\\n        }\\n\\n        _getRetentionDaysInput () {\\n            return this.shadowRoot.querySelector('#tag-retention-days');\\n        }\\n\\n        _getTagValueInput () {\\n            return this.shadowRoot.querySelector('#tag-value');\\n        }\\n\\n        _getTagValueErrorMessage () {\\n            return this.shadowRoot.querySelector('#tag-value-error-message');\\n        }\\n    }\\n    componentUtils.registerCustomElement('sl-tagviewer-details', SLTagViewerDetails);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}