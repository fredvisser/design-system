{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/tagviewer/tagviewer","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../dialog/dialog.js';\\nimport '../toolbar/toolbar.js';\\nimport '../grid/grid.js';\\nimport '../filter-builder/filter-builder.js';\\nimport './tagviewer-details.js';\\n\\nimport { componentUtils } from '../common/component-utils.js';\\nimport { html } from '../../library/html-utils.js';\\nimport { stringUtils } from '../common/string-utils.js';\\n\\nimport inputCss from '../common/styles/input.css';\\nimport tagviewerStyle from './tagviewer.css';\\n\\nconst styles = [inputCss, tagviewerStyle];\\n\\n(function () {\\n    class SLTagViewer extends HTMLElement {\\n        constructor () {\\n            super();\\n            this._selectedTagsWithValues = [];\\n        }\\n\\n        get data () {\\n            return {\\n                items: this._items,\\n                totalCount: this._totalCount\\n            };\\n        }\\n\\n        set data (data) {\\n            this._items = data.items;\\n            this._totalCount = data.totalCount;\\n            this._render();\\n        }\\n\\n        set i18n (i18n) {\\n            this._i18n = i18n;\\n            this._render();\\n        }\\n\\n        showErrorDialog (errorHeader, errorMessage) {\\n            if (this._getDialog()) {\\n                return; // do not show multiple errors\\n            }\\n\\n            let dialog = document.createElement('mc-dialog');\\n            dialog.setAttribute('header', errorHeader);\\n            dialog.setAttribute('show-middle-button', 'false');\\n            dialog.setAttribute('text-right-button', this._i18n.errorDialog.close);\\n            dialog.innerHTML = html`<span id=\\\"content\\\" slot=\\\"content\\\">\\n                <h4>${errorMessage}</h4>\\n            </span>`;\\n            dialog.addEventListener('right-button-click', () => {\\n                this._removeDialog(dialog);\\n            });\\n            dialog.addEventListener('modal-click', () => {\\n                this._removeDialog(dialog);\\n            });\\n            this.shadowRoot.appendChild(dialog);\\n        }\\n\\n        connectedCallback () {\\n            componentUtils.upgradeProperty(this, 'data');\\n            componentUtils.upgradeProperty(this, 'i18n');\\n            this._render();\\n        }\\n\\n        _render () {\\n            if (!this.shadowRoot && this._i18n) {\\n                this._init();\\n                this._renderMain();\\n                this._attachEventHandlers();\\n            }\\n            this._renderItems();\\n        }\\n\\n        _init () {\\n            let pageSize = this.getAttribute('page-size') || 20;\\n            this._search = {\\n                page: 1,\\n                pageSize: pageSize\\n            };\\n        }\\n\\n        _renderMain () {\\n            this.attachShadow({ mode: 'open' });\\n            componentUtils.addStylesToElement(this.shadowRoot, styles);\\n\\n            let container = document.createElement('div');\\n            container.classList.add('sl-tagviewer-main');\\n            container.innerHTML = html`\\n                <div class=\\\"sl-tagviewer-toolbar\\\">\\n                    <mc-toolbar class=\\\"sl-tagviewer-action\\\">\\n                        <mc-toolbar-item name=\\\"create\\\" text=\\\"${this._i18n.toolbar.create}\\\"></mc-toolbar-item>\\n                        <mc-toolbar-item name=\\\"update\\\" text=\\\"${this._i18n.toolbar.update}\\\" disabled=\\\"true\\\"></mc-toolbar-item>\\n                        <mc-toolbar-item name=\\\"reset\\\" text=\\\"${this._i18n.toolbar.resetAggregates}\\\" disabled=\\\"true\\\" show-on-mobile=\\\"false\\\"></mc-toolbar-item>\\n                        <mc-toolbar-item name=\\\"delete\\\" text=\\\"${this._i18n.toolbar.delete}\\\" disabled=\\\"true\\\" show-on-mobile=\\\"false\\\"></mc-toolbar-item>\\n                        <mc-toolbar-item name=\\\"history\\\" text=\\\"${this._i18n.toolbar.history}\\\" disabled=\\\"true\\\"></mc-toolbar-item>\\n                        <mc-toolbar-item name=\\\"export\\\" icon=\\\"&#xf0d7;\\\" icon-position=\\\"right\\\" text=\\\"${this._i18n.toolbar.csvExport}\\\" disabled=\\\"true\\\" show-on-mobile=\\\"false\\\">\\n                            <mc-toolbar-item name=\\\"export-history\\\" text=\\\"${this._i18n.toolbar.csvExportHistory}\\\"></mc-toolbar-item>\\n                            <mc-toolbar-item name=\\\"export-details\\\" text=\\\"${this._i18n.toolbar.csvExportDetails}\\\"></mc-toolbar-item>\\n                        </mc-toolbar-item>\\n                    </mc-toolbar>\\n                    <mc-toolbar class=\\\"sl-tagviewer-filter\\\">\\n                        <mc-toolbar-item name=\\\"filter\\\" icon=\\\"&#xf0b0;\\\" text=\\\"${this._i18n.toolbar.filter}\\\"></mc-toolbar-item>\\n                    </mc-toolbar>\\n                    <div class=\\\"sl-tagviewer-search\\\">\\n                        <input class=\\\"sl-tagviewer-search-input mc-input\\\" placeholder=\\\"${this._i18n.toolbar.search}\\\">\\n                    </div>\\n                </div>\\n                <sl-filter-builder class=\\\"sl-tagviewer-filter-builder sl-tagviewer-filter-builder-hidden\\\">\\n                    <sl-filter-builder-item name=\\\"path\\\" text=\\\"Path\\\" operations=\\\"MATCHES\\\">\\n                        <sl-filter-builder-operation name=\\\"MATCHES\\\" text=\\\"${this._i18n.filter.MATCHES}\\\"></sl-filter-builder-operation>\\n                    </sl-filter-builder-item>\\n                    <sl-filter-builder-item name=\\\"keywords\\\" text=\\\"Keywords\\\" operations=\\\"EQUALS\\\">\\n                        <sl-filter-builder-operation name=\\\"EQUALS\\\" text=\\\"${this._i18n.filter.EQUALS}\\\"></sl-filter-builder-operation>\\n                    </sl-filter-builder-item>\\n                    <sl-filter-builder-item name=\\\"properties\\\" text=\\\"Properties\\\" operations=\\\"EQUALS\\\" type=\\\"KeyValue\\\">\\n                        <sl-filter-builder-operation name=\\\"EQUALS\\\" text=\\\"${this._i18n.filter.EQUALS}\\\"></sl-filter-builder-operation>\\n                    </sl-filter-builder-item>\\n                </sl-filter-builder>\\n                <sl-grid id=\\\"tagviewer-grid\\\" page-size=\\\"20\\\" show-select-all=\\\"true\\\" locale=\\\"${this._i18n.grid.locale}\\\" page-size-label=\\\"${this._i18n.grid.pageSizeLabel}\\\" go-to-page-label=\\\"${this._i18n.grid.goToPageLabel}\\\" current-page-label=\\\"${this._i18n.grid.currentPageLabel}\\\">\\n                    <sl-grid-column type=\\\"checkbox\\\" name=\\\"selection\\\" width=\\\"35px\\\" sortable=\\\"false\\\"></sl-grid-column>\\n                    <sl-grid-column type=\\\"icon\\\" name=\\\"edit\\\" width=\\\"30px\\\" icon=\\\"&#xf040;\\\" sortable=\\\"false\\\"></sl-grid-column>\\n                    <sl-grid-column type=\\\"text\\\" name=\\\"path\\\" width=\\\"3fr\\\" title=\\\"${this._i18n.grid.path}\\\" field=\\\"tag.path\\\"></sl-grid-column>\\n                    <sl-grid-column type=\\\"text\\\" name=\\\"value\\\" optional=\\\"true\\\" title=\\\"${this._i18n.grid.value}\\\" field=\\\"current.value.value\\\"></sl-grid-column>\\n                    <sl-grid-column type=\\\"text\\\" name=\\\"min\\\" optional=\\\"true\\\" title=\\\"${this._i18n.grid.min}\\\" field=\\\"aggregates.min\\\" show-on-mobile=\\\"false\\\"></sl-grid-column>\\n                    <sl-grid-column type=\\\"text\\\" name=\\\"max\\\" optional=\\\"true\\\" title=\\\"${this._i18n.grid.max}\\\" field=\\\"aggregates.max\\\" show-on-mobile=\\\"false\\\"></sl-grid-column>\\n                    <sl-grid-column type=\\\"text\\\" name=\\\"mean\\\" optional=\\\"true\\\" title=\\\"${this._i18n.grid.mean}\\\" field=\\\"aggregates.avg\\\" show-on-mobile=\\\"false\\\"></sl-grid-column>\\n                    <sl-grid-column type=\\\"text\\\" name=\\\"count\\\" optional=\\\"true\\\" title=\\\"${this._i18n.grid.count}\\\" field=\\\"aggregates.count\\\" show-on-mobile=\\\"false\\\"></sl-grid-column>\\n                    <sl-grid-column type=\\\"date\\\" name=\\\"updated\\\" optional=\\\"true\\\" title=\\\"${this._i18n.grid.updated}\\\" field=\\\"current.timestamp\\\" width=\\\"200px\\\" show-on-mobile=\\\"false\\\"></sl-grid-column>\\n                    <sl-grid-column type=\\\"text\\\" name=\\\"keywords\\\" optional=\\\"true\\\" title=\\\"${this._i18n.grid.keywords}\\\" field=\\\"tag.keywords\\\" width=\\\"200px\\\" show=\\\"false\\\" show-on-mobile=\\\"false\\\"></sl-grid-column>\\n                    <sl-grid-column type=\\\"text\\\" name=\\\"type\\\" optional=\\\"true\\\" title=\\\"${this._i18n.grid.type}\\\" field=\\\"tag.formattedType\\\" width=\\\"150px\\\" show=\\\"false\\\" show-on-mobile=\\\"false\\\"></sl-grid-column>\\n                    <sl-grid-column type=\\\"text\\\" name=\\\"collectAggregates\\\" optional=\\\"true\\\" title=\\\"${this._i18n.grid.collectAggregates}\\\" field=\\\"tag.collectAggregates\\\" width=\\\"150px\\\" show=\\\"false\\\" show-on-mobile=\\\"false\\\"></sl-grid-column>\\n                </sl-grid>\\n            `;\\n            this.shadowRoot.appendChild(container);\\n        }\\n\\n        _attachEventHandlers () {\\n            let grid = this._getGrid();\\n            grid.addEventListener('grid-update-data', (e) => {\\n                this._search.page = e.detail.page;\\n                this._search.pageSize = e.detail.pageSize;\\n                this._search.sortBy = e.detail.sortBy;\\n                this._search.sortOrder = e.detail.sortOrder;\\n                this._fireUpdateEvent('grid');\\n            });\\n            grid.addEventListener('grid-checkbox-change', (e) => {\\n                if (e.detail.checked) {\\n                    this._selectItem(e.detail.item);\\n                } else {\\n                    this._unselectItem(e.detail.item);\\n                }\\n                this._updateToolbarItems();\\n            });\\n            grid.addEventListener('grid-action', (e) => {\\n                let tagsWithValues = JSON.parse(JSON.stringify(e.detail.item));\\n                this._showTagDetails([tagsWithValues]);\\n            });\\n            this._getActionToolbar().addEventListener('toolbar-item-click', (e) => {\\n                switch (e.detail.name) {\\n                case 'create': {\\n                    this._showCreateDialog();\\n                    break;\\n                }\\n                case 'update': {\\n                    let tagsWithValues = JSON.parse(JSON.stringify(this._selectedTagsWithValues));\\n                    this._showTagDetails(tagsWithValues);\\n                    break;\\n                }\\n                case 'reset': {\\n                    this._fireResetAggregatesEvent(this._selectedTagsWithValues);\\n                    break;\\n                }\\n                case 'delete': {\\n                    this._showDeleteDialog(this._selectedTagsWithValues);\\n                    break;\\n                }\\n                case 'history': {\\n                    this._fireHistoryEvent(this._selectedTagsWithValues);\\n                    break;\\n                }\\n                case 'export-history': {\\n                    this._showExportHistoryDialog(this._selectedTagsWithValues);\\n                    break;\\n                }\\n                case 'export-details': {\\n                    this._fireExportDetailsEvent(this._selectedTagsWithValues);\\n                    break;\\n                }\\n                }\\n            });\\n\\n            this._getFilterToolbar().addEventListener('toolbar-item-click', (e) => {\\n                switch (e.detail.name) {\\n                case 'filter': {\\n                    this._toggleFilterBuilder();\\n                    break;\\n                }\\n                }\\n            });\\n\\n            let searchInput = this._getSearchInput();\\n            searchInput.addEventListener('input', () => {\\n                this._search.searchTerm = searchInput.value;\\n                this._fireUpdateEvent('search');\\n            });\\n\\n            let filterBuilder = this._getFilterBuilder();\\n            filterBuilder.addEventListener('filter', (e) => {\\n                this._search.filters = e.detail.filters;\\n                this._fireUpdateEvent('filter');\\n            });\\n        }\\n\\n        _toggleFilterBuilder () {\\n            this._showFilterBuilder = !this._showFilterBuilder;\\n            let filterBuilder = this._getFilterBuilder();\\n            if (this._showFilterBuilder) {\\n                filterBuilder.classList.add('sl-tagviewer-filter-builder-show');\\n                filterBuilder.classList.remove('sl-tagviewer-filter-builder-hidden');\\n            } else {\\n                filterBuilder.classList.remove('sl-tagviewer-filter-builder-show');\\n                filterBuilder.classList.add('sl-tagviewer-filter-builder-hidden');\\n            }\\n        }\\n\\n        _selectItem (item) {\\n            if (this._selectedTagsWithValues.indexOf(item) === -1) {\\n                this._selectedTagsWithValues.push(item);\\n            }\\n        }\\n\\n        _unselectItem (item) {\\n            let index = this._selectedTagsWithValues.indexOf(item);\\n            if (index > -1) {\\n                this._selectedTagsWithValues.splice(index, 1);\\n            }\\n        }\\n\\n        _updateToolbarItems () {\\n            let items = this._getActionToolbarItems();\\n            for (let item of items) {\\n                if (item.getAttribute('name') !== 'create') {\\n                    item.setAttribute('disabled', this._selectedTagsWithValues.length === 0);\\n                }\\n            }\\n        }\\n\\n        _showCreateDialog () {\\n            let dialog = document.createElement('mc-dialog');\\n            dialog.setAttribute('header', this._i18n.createDialog.header);\\n            dialog.setAttribute('text-middle-button', this._i18n.createDialog.create);\\n            dialog.setAttribute('text-right-button', this._i18n.createDialog.cancel);\\n            dialog.setAttribute('disabled-middle-button', 'true');\\n            dialog.innerHTML = html`<span id=\\\"content\\\" slot=\\\"content\\\">\\n                <div class=\\\"sl-tagviewer-form-row\\\">\\n                    <label class=\\\"sl-tagviewer-form-label\\\">${this._i18n.createDialog.path}</label>\\n                    <input class=\\\"sl-tagviewer-form-input mc-input\\\" id=\\\"new-tag-path\\\" value=\\\"\\\">\\n                </div>\\n                <div class=\\\"sl-tagviewer-form-row\\\">\\n                    <label class=\\\"sl-tagviewer-form-label\\\">${this._i18n.createDialog.type}</label>\\n                    <select class=\\\"sl-tagviewer-form-input mc-select\\\" id=\\\"new-tag-type\\\">\\n                        <option value=\\\"INT\\\">${this._i18n.types.INT}</option>\\n                        <option value=\\\"DOUBLE\\\">${this._i18n.types.DOUBLE}</option>\\n                        <option value=\\\"U_INT64\\\">${this._i18n.types.U_INT64}</option>\\n                        <option value=\\\"STRING\\\">${this._i18n.types.STRING}</option>\\n                        <option value=\\\"BOOLEAN\\\">${this._i18n.types.BOOLEAN}</option>\\n                        <option value=\\\"DATE_TIME\\\">${this._i18n.types.DATE_TIME}</option>\\n                    </select>\\n                </div>\\n                <div class=\\\"sl-tagviewer-form-row\\\">\\n                    <label class=\\\"sl-tagviewer-form-label\\\">${this._i18n.createDialog.retention}</label>\\n                    <select class=\\\"sl-tagviewer-form-input mc-select\\\" id=\\\"new-tag-retention\\\">\\n                        <option value=\\\"NONE\\\">${this._i18n.retention.NONE}</option>\\n                        <option value=\\\"COUNT\\\">${this._i18n.retention.COUNT}</option>\\n                        <option value=\\\"DURATION\\\">${this._i18n.retention.DURATION}</option>\\n                        <option value=\\\"PERMANENT\\\">${this._i18n.retention.PERMANENT}</option>\\n                    </select>\\n                </div>\\n                <div class=\\\"sl-tagviewer-form-row\\\">\\n                    <label class=\\\"sl-tagviewer-form-label\\\">${this._i18n.createDialog.collectAggregates}</label>\\n                    <div class=\\\"sl-tagviewer-form-input\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"new-tag-collect-aggregates\\\" class=\\\"mc-checkbox\\\">\\n                        <label for=\\\"new-tag-collect-aggregates\\\"></label>\\n                    </div>\\n                </div>\\n            </span>`;\\n            dialog.addEventListener('middle-button-click', () => {\\n                let path = dialog.querySelector('#new-tag-path').value;\\n                let type = dialog.querySelector('#new-tag-type').value;\\n                let retention = dialog.querySelector('#new-tag-retention').value;\\n                let collectAggregates = dialog.querySelector('#new-tag-collect-aggregates').checked;\\n\\n                let properties = {};\\n                this._addRetentionToProperties(properties, retention);\\n\\n                let tag = {\\n                    path: path,\\n                    type: type,\\n                    keywords: [],\\n                    properties: properties,\\n                    collectAggregates: collectAggregates\\n                };\\n                this._fireCreateEvent(tag);\\n                this._removeDialog(dialog);\\n            });\\n            dialog.addEventListener('right-button-click', () => {\\n                this._removeDialog(dialog);\\n            });\\n            dialog.addEventListener('modal-click', () => {\\n                this._removeDialog(dialog);\\n            });\\n            let tagPathInput = dialog.querySelector('#new-tag-path');\\n            tagPathInput.addEventListener('input', () => {\\n                if (tagPathInput.value) {\\n                    dialog.setAttribute('disabled-middle-button', 'false');\\n                } else {\\n                    dialog.setAttribute('disabled-middle-button', 'true');\\n                }\\n            });\\n            this.shadowRoot.appendChild(dialog);\\n            tagPathInput.focus();\\n        }\\n\\n        _addRetentionToProperties (properties, retention) {\\n            properties['nitagRetention'] = retention;\\n            switch (retention) {\\n            case 'COUNT':\\n                properties['nitagMaxHistoryCount'] = '10000';\\n                break;\\n            case 'DURATION':\\n                properties['nitagHistoryTTLDays'] = '30';\\n                break;\\n            }\\n        }\\n\\n        _showDeleteDialog (tagsWithValues, callback) {\\n            let dialog = document.createElement('mc-dialog');\\n            dialog.setAttribute('header', this._deleteTagMessage(tagsWithValues));\\n            dialog.setAttribute('text-middle-button', this._i18n.deleteDialog.delete);\\n            dialog.setAttribute('text-right-button', this._i18n.deleteDialog.cancel);\\n            dialog.addEventListener('middle-button-click', (e) => {\\n                this._fireDeleteEvent(tagsWithValues);\\n                this._removeDialog(dialog);\\n                if (callback) {\\n                    callback();\\n                }\\n            });\\n            dialog.addEventListener('right-button-click', () => {\\n                this._removeDialog(dialog);\\n            });\\n            dialog.addEventListener('modal-click', () => {\\n                this._removeDialog(dialog);\\n            });\\n            this.shadowRoot.appendChild(dialog);\\n        }\\n\\n        _showExportHistoryDialog (tagsWithValues, callback) {\\n            let dialog = document.createElement('mc-dialog');\\n            dialog.setAttribute('header', this._i18n.queryTagHistory.header);\\n            dialog.setAttribute('text-middle-button', this._i18n.queryTagHistory.getHistory);\\n            dialog.setAttribute('text-right-button', this._i18n.queryTagHistory.cancel);\\n            dialog.innerHTML = html`<span id=\\\"content\\\" slot=\\\"content\\\">\\n                <div class=\\\"sl-tagviewer-form-row\\\">\\n                    <label class=\\\"sl-tagviewer-form-label\\\">${this._i18n.queryTagHistory.range}</label>\\n                    <select class=\\\"sl-tagviewer-form-input mc-select\\\" id=\\\"history-range\\\" value=\\\"\\\">\\n                        <option value=\\\"30d\\\">${this._i18n.queryTagHistory._30d}</option>\\n                        <option value=\\\"6m\\\">${this._i18n.queryTagHistory._6m}</option>\\n                        <option value=\\\"1y\\\">${this._i18n.queryTagHistory._1y}</option>\\n                    </select>\\n                </div>\\n                <div class=\\\"sl-tagviewer-form-row\\\">\\n                    <label class=\\\"sl-tagviewer-form-label\\\">${this._i18n.queryTagHistory.samples}</label>\\n                    <input class=\\\"sl-tagviewer-form-input mc-input\\\" id=\\\"history-samples\\\" value=\\\"10000\\\">\\n                </div>\\n                <div class=\\\"sl-tagviewer-form-error sl-tagviewer-hidden\\\" id=\\\"history-samples-error-message\\\"></div>\\n            </span>`;\\n            dialog.addEventListener('middle-button-click', (e) => {\\n                let range = dialog.querySelector('#history-range').value;\\n                let samples = dialog.querySelector('#history-samples').value;\\n\\n                if (this._validateHistorySamplesValue(dialog, samples)) {\\n                    return;\\n                }\\n\\n                let endTime = new Date();\\n                let startTime = new Date();\\n                switch (range) {\\n                case '30d':\\n                    startTime.setDate(endTime.getDate() - 30);\\n                    break;\\n                case '6m':\\n                    startTime.setMonth(endTime.getMonth() - 6);\\n                    break;\\n                case '1y':\\n                    startTime.setFullYear(endTime.getFullYear() - 1);\\n                    break;\\n                }\\n\\n                let params = {\\n                    startTime: startTime.toISOString(),\\n                    endTime: endTime.toISOString(),\\n                    take: samples\\n                };\\n\\n                this._fireExportHistoryEvent(tagsWithValues, params);\\n                this._removeDialog(dialog);\\n                if (callback) {\\n                    callback();\\n                }\\n            });\\n            dialog.addEventListener('right-button-click', () => {\\n                this._removeDialog(dialog);\\n            });\\n            dialog.addEventListener('modal-click', () => {\\n                this._removeDialog(dialog);\\n            });\\n            this.shadowRoot.appendChild(dialog);\\n\\n            let historySamplesInput = dialog.querySelector('#history-samples');\\n            historySamplesInput.addEventListener('change', () => {\\n                this._validateHistorySamplesValue(dialog, historySamplesInput.value);\\n            });\\n        }\\n\\n        _validateHistorySamplesValue (dialog, value) {\\n            let error = (isNaN(value) || value < 0);\\n            this._updateHistorySamplesValueErrorMessage(dialog, error);\\n            return error;\\n        }\\n\\n        _updateHistorySamplesValueErrorMessage (dialog, error) {\\n            let historySamplesInput = dialog.querySelector('#history-range');\\n            let errorMessage = dialog.querySelector('#history-samples-error-message');\\n            if (error) {\\n                historySamplesInput.classList.add('error');\\n                errorMessage.textContent = this._i18n.queryTagHistory.mustBePositiveInteger;\\n                errorMessage.classList.remove('sl-tagviewer-hidden');\\n                dialog.disabledMiddleButton = 'true';\\n            } else {\\n                historySamplesInput.classList.remove('error');\\n                errorMessage.classList.add('sl-tagviewer-hidden');\\n                dialog.disabledMiddleButton = 'false';\\n            }\\n        }\\n\\n        _deleteTagMessage (tagsWithValues) {\\n            if (tagsWithValues.length === 1) {\\n                return stringUtils.format(this._i18n.deleteDialog.singleMessage, { path: tagsWithValues[0].tag.path });\\n            }\\n            return stringUtils.format(this._i18n.deleteDialog.multipleMessage, { count: tagsWithValues.length });\\n        }\\n\\n        _removeDialog (dialog) {\\n            if (dialog && dialog.parentNode) {\\n                dialog.parentNode.removeChild(dialog);\\n            }\\n        }\\n\\n        _renderItems () {\\n            if (!this._items || !this._i18n) {\\n                return;\\n            }\\n\\n            let items = this._items.map((t) => {\\n                return this._convertToInternalStructure(t);\\n            });\\n            this._selectedTagsWithValues = [];\\n            this._updateToolbarItems();\\n            this._getGrid().data = { items: items, totalCount: this._totalCount };\\n        }\\n\\n        _convertToInternalStructure (tagWithValue) {\\n            let formattedType = this._i18n.types[tagWithValue.tag.type];\\n            return {\\n                tag: {\\n                    path: tagWithValue.tag.path,\\n                    type: tagWithValue.tag.type,\\n                    keywords: tagWithValue.tag.keywords,\\n                    properties: tagWithValue.tag.properties,\\n                    collectAggregates: tagWithValue.tag.collectAggregates,\\n                    formattedType: formattedType\\n                },\\n                aggregates: tagWithValue.aggregates,\\n                current: tagWithValue.current\\n            };\\n        }\\n\\n        _convertToExternalTagStructure (tag) {\\n            return {\\n                path: tag.path,\\n                type: tag.type,\\n                keywords: tag.keywords,\\n                properties: tag.properties,\\n                collectAggregates: tag.collectAggregates\\n            };\\n        }\\n\\n        _showTagDetails (tagsWithValues) {\\n            let updated = {};\\n\\n            let dialog = document.createElement('mc-dialog');\\n            dialog.setAttribute('header', this._i18n.detailsDialog.header);\\n            dialog.setAttribute('position', 'right');\\n            dialog.setAttribute('show-left-button', 'true');\\n            dialog.setAttribute('text-left-button', this._i18n.detailsDialog.update);\\n            dialog.setAttribute('text-middle-button', this._i18n.detailsDialog.delete);\\n            dialog.setAttribute('text-right-button', this._i18n.detailsDialog.cancel);\\n            dialog.innerHTML = html`<span id=\\\"content\\\" slot=\\\"content\\\">\\n                <sl-tagviewer-details></sl-tagviewer-details>\\n            </span>`;\\n            dialog.addEventListener('left-button-click', () => {\\n                if (updated.error) {\\n                    return;\\n                }\\n                if (updated.value) {\\n                    this._fireTagValuesUpdateEvent(tagsWithValues, updated.value);\\n                }\\n                if (updated.tags) {\\n                    this._fireTagUpdateEvent(updated.tags);\\n                }\\n                this._removeDialog(dialog);\\n            });\\n            dialog.addEventListener('middle-button-click', () => {\\n                this._showDeleteDialog(tagsWithValues, () => {\\n                    this._removeDialog(dialog);\\n                });\\n            });\\n            dialog.addEventListener('right-button-click', () => {\\n                this._removeDialog(dialog);\\n            });\\n            dialog.addEventListener('modal-click', () => {\\n                this._removeDialog(dialog);\\n            });\\n            this.shadowRoot.appendChild(dialog);\\n\\n            let tagDetails = this._getTagDetails();\\n            tagDetails.addEventListener('tag-update', (e) => {\\n                updated.tags = e.detail.tags;\\n            });\\n            tagDetails.addEventListener('tag-update-value', (e) => {\\n                updated.value = e.detail.value;\\n                updated.error = e.detail.error;\\n            });\\n            tagDetails.i18n = this._i18n.details;\\n            tagDetails.data = tagsWithValues;\\n        }\\n\\n        _fireUpdateEvent (trigger) {\\n            let eventData = {\\n                page: this._search.page,\\n                pageSize: this._search.pageSize,\\n                sortBy: this._search.sortBy,\\n                sortOrder: this._search.sortOrder,\\n                searchTerm: this._search.searchTerm,\\n                filters: this._search.filters,\\n                trigger: trigger\\n            };\\n            this.dispatchEvent(new CustomEvent('tag-data', { detail: eventData }));\\n        }\\n\\n        _fireCreateEvent (tag) {\\n            let eventData = {\\n                tag: this._convertToExternalTagStructure(tag)\\n            };\\n            this.dispatchEvent(new CustomEvent('tag-create', { detail: eventData }));\\n        }\\n\\n        _fireTagUpdateEvent (tags) {\\n            tags = tags.map((tag) => {\\n                return this._convertToExternalTagStructure(tag);\\n            });\\n            let eventData = {\\n                tags: tags\\n            };\\n            this.dispatchEvent(new CustomEvent('tag-update', { detail: eventData }));\\n        }\\n\\n        _fireDeleteEvent (tagsWithValues) {\\n            let eventData = {\\n                tags: this._getTagsFromTagsWithValues(tagsWithValues)\\n            };\\n            this.dispatchEvent(new CustomEvent('tag-delete', { detail: eventData }));\\n        }\\n\\n        _fireResetAggregatesEvent (tagsWithValues) {\\n            let eventData = {\\n                tags: this._getTagsFromTagsWithValues(tagsWithValues)\\n            };\\n            this.dispatchEvent(new CustomEvent('tag-reset-aggregates', { detail: eventData }));\\n        }\\n\\n        _fireTagValuesUpdateEvent (tagsWithValues, value) {\\n            let eventData = {\\n                tags: this._getTagsFromTagsWithValues(tagsWithValues),\\n                value: value\\n            };\\n            this.dispatchEvent(new CustomEvent('tag-update-values', { detail: eventData }));\\n        }\\n\\n        _fireHistoryEvent (tagsWithValues) {\\n            let eventData = {\\n                tags: this._getTagsFromTagsWithValues(tagsWithValues)\\n            };\\n            this.dispatchEvent(new CustomEvent('tag-history', { detail: eventData }));\\n        }\\n\\n        _fireExportDetailsEvent (tagsWithValues) {\\n            let eventData = {\\n                tags: this._getTagsFromTagsWithValues(tagsWithValues)\\n            };\\n            this.dispatchEvent(new CustomEvent('tag-export-details', { detail: eventData }));\\n        }\\n\\n        _fireExportHistoryEvent (tagsWithValues, params) {\\n            let eventData = {\\n                tags: this._getTagsFromTagsWithValues(tagsWithValues),\\n                params: params\\n            };\\n            this.dispatchEvent(new CustomEvent('tag-export-history', { detail: eventData }));\\n        }\\n\\n        _getTagsFromTagsWithValues (tagsWithValues) {\\n            return tagsWithValues.map((tagWithValue) => {\\n                return this._convertToExternalTagStructure(tagWithValue.tag);\\n            });\\n        }\\n\\n        _getTagDetails () {\\n            return this.shadowRoot.querySelector('sl-tagviewer-details');\\n        }\\n\\n        _getGrid () {\\n            return this.shadowRoot.querySelector('sl-grid');\\n        }\\n\\n        _getActionToolbar () {\\n            return this.shadowRoot.querySelector('.sl-tagviewer-action');\\n        }\\n\\n        _getFilterToolbar () {\\n            return this.shadowRoot.querySelector('.sl-tagviewer-filter');\\n        }\\n\\n        _getFilterBuilder () {\\n            return this.shadowRoot.querySelector('sl-filter-builder');\\n        }\\n\\n        _getSearchInput () {\\n            return this.shadowRoot.querySelector('.sl-tagviewer-search-input');\\n        }\\n\\n        _getActionToolbarItems () {\\n            return this._getActionToolbar().querySelectorAll('mc-toolbar-item');\\n        }\\n\\n        _getDialog () {\\n            return this.shadowRoot.querySelector('mc-dialog');\\n        }\\n    }\\n\\n    componentUtils.registerCustomElement('sl-tagviewer', SLTagViewer);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}