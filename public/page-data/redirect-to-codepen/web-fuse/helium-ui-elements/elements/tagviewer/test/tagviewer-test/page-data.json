{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/tagviewer/test/tagviewer-test","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../tagviewer.js';\\n\\nimport { createFixture, isVisible, enterValue, selectOption } from '../../test/test-utils.js';\\nimport { TagViewerPage } from './tagviewer-page.js';\\n\\nconst TAGVIEWER_I18N = {\\n    toolbar: {\\n        create: 'Create',\\n        update: 'Update',\\n        resetAggregates: 'Reset Aggregates',\\n        delete: 'Delete',\\n        history: 'History',\\n        csvExport: 'Export to CSV',\\n        csvExportHistory: 'Export History',\\n        csvExportDetails: 'Export Details',\\n        filter: 'Filter',\\n        search: 'Filter'\\n    },\\n    grid: {\\n        path: 'Path',\\n        value: 'Current Value',\\n        min: 'Min',\\n        max: 'Max',\\n        mean: 'Mean',\\n        count: 'Count',\\n        updated: 'Updated',\\n        type: 'Type',\\n        keywords: 'Keywords',\\n        collectAggregates: 'Collect Aggregates',\\n        goToPageLabel: 'Go to page: ',\\n        pageSizeLabel: 'Show rows: ',\\n        currentPageLabel: '{from}-{to} of {total}',\\n        locale: 'en-US'\\n    },\\n    filter: {\\n        MATCHES: 'matches',\\n        EQUALS: 'equals'\\n    },\\n    createDialog: {\\n        header: 'Create Tag',\\n        create: 'CREATE',\\n        cancel: 'CANCEL',\\n        path: 'Path:',\\n        type: 'Type:',\\n        retention: 'Retention:',\\n        collectAggregates: 'Collect Aggregates:'\\n    },\\n    queryTagHistory: {\\n        header: 'Query for Tag History',\\n        getHistory: 'QUERY HISTORY',\\n        cancel: 'CANCEL',\\n        range: 'Select Time Range:',\\n        samples: 'Samples:',\\n        _30d: '30 Days',\\n        _6m: '6 Months',\\n        _1y: '1 Year',\\n        mustBePositiveInteger: 'Samples must be a positive integer!'\\n    },\\n    types: {\\n        INT: '32-bit Integer',\\n        DOUBLE: 'Double',\\n        U_INT64: '64-bit Unsigned Integer',\\n        STRING: 'String',\\n        BOOLEAN: 'Boolean',\\n        DATE_TIME: 'Timestamp'\\n    },\\n    retention: {\\n        NONE: 'None',\\n        COUNT: 'Count',\\n        DURATION: 'Duration',\\n        PERMANENT: 'Permanent'\\n    },\\n    errorDialog: {\\n        header: {\\n            tagData: 'Could not load tag data!',\\n            tagCreate: 'Could not create tag!',\\n            tagDelete: 'Could not delete tag!',\\n            tagResetAggregates: 'Could not reset tag aggregates!',\\n            tagUpdateValues: 'Could not update tag values!',\\n            tagUpdate: 'Could not update tags!',\\n            tagHistory: 'Could not get tag history!',\\n            tagExportDetails: 'Could not export tag details!',\\n            tagExportHistory: 'Could not export tag history!'\\n        },\\n        close: 'CLOSE'\\n    },\\n    deleteDialog: {\\n        delete: 'DELETE',\\n        cancel: 'CANCEL',\\n        singleMessage: 'Are you sure you want to delete \\\"{path}\\\"?',\\n        multipleMessage: 'Are you sure you want to delete {count} tags?'\\n    },\\n    detailsDialog: {\\n        header: 'Update Tag Details',\\n        update: 'Update',\\n        delete: 'Delete',\\n        cancel: 'Cancel'\\n    },\\n    details: {\\n        path: 'Path:',\\n        value: 'Value:',\\n        updated: 'Updated:',\\n        collectAggregates: 'Collect Aggregates:',\\n        retentionLabels: {\\n            text: 'Retention:',\\n            maxCount: 'Max Count',\\n            days: 'Days:'\\n        },\\n        retention: {\\n            NONE: 'None',\\n            COUNT: 'Count',\\n            DURATION: 'Duration',\\n            PERMANENT: 'Permanent'\\n        },\\n        type: 'Type:',\\n        keywords: 'Keywords:',\\n        keywordsPlaceholder: 'Keyword',\\n        properties: 'Properties:',\\n        propertiesKey: 'Key',\\n        propertiesValue: 'Value',\\n        locale: 'en-US',\\n        types: {\\n            INT: '32-bit Integer',\\n            DOUBLE: 'Double',\\n            U_INT64: '64-bit Unsigned Integer',\\n            STRING: 'String',\\n            BOOLEAN: 'Boolean',\\n            DATE_TIME: 'Timestamp'\\n        },\\n        validationErrors: {\\n            mustBeInteger: 'Tag value must be an integer!',\\n            mustBePositiveInteger: 'Tag value must be a positive integer!',\\n            mustBeDouble: 'Tag value must be a double!',\\n            mustBeTimestamp: 'Tag value must be a timestamp!',\\n            mustBeBoolean: 'Tag value must be boolean! (true or false)'\\n        }\\n    }\\n};\\n\\ndescribe('Tag Viewer', () => {\\n    let createTag = function (path, type, value, collectAggregates, keywords, properties) {\\n        return {\\n            tag: {\\n                path: path,\\n                type: type,\\n                collectAggregates: collectAggregates || false,\\n                properties: properties || {},\\n                keywords: keywords || []\\n            },\\n            current: {\\n                updated: new Date(2019, 2, 3, 14, 1, 1, 123),\\n                value: {\\n                    type: type,\\n                    value: value\\n                }\\n            },\\n            value: value\\n        };\\n    };\\n\\n    let generateItems = function (count) {\\n        let result = [];\\n        for (let i = 1; i <= count; i++) {\\n            result.push({\\n                tag: {\\n                    path: 'tag-' + i,\\n                    type: 'INT',\\n                    collectAggregates: true,\\n                    properties: {\\n                        'a': 1,\\n                        'b': 2,\\n                        'nitagRetention': 'COUNT',\\n                        'nitagMaxHistoryCount': '20'\\n                    },\\n                    keywords: ['keyword-a', 'keyword-b']\\n                },\\n                current: {\\n                    timestamp: new Date(2019, 2, 3, 14, 1, 1, 123),\\n                    value: {\\n                        type: 'INT',\\n                        value: i\\n                    }\\n                },\\n                aggregates: {\\n                    avg: 1.5,\\n                    min: 1,\\n                    max: 2,\\n                    count: 11,\\n                    type: 'INT'\\n                }\\n            });\\n        }\\n        return result;\\n    };\\n\\n    let loadItems = function (totalCount, page, pageSize, sortBy, sortOrder) {\\n        let items = generateItems(totalCount);\\n        let startIndex = (page - 1) * pageSize;\\n        let endIndex = page * pageSize;\\n        return items.slice(startIndex, endIndex);\\n    };\\n\\n    beforeEach(function () {\\n        this.page = new TagViewerPage();\\n    });\\n\\n    describe('Basic', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<sl-tagviewer></sl-tagviewer>`);\\n            this.element.i18n = TAGVIEWER_I18N;\\n            this.element.data = {\\n                items: loadItems(21, 1, 20),\\n                totalCount: 21\\n            };\\n            this.element.addEventListener('tag-data', (e) => {\\n                let page = e.detail.page;\\n                let pageSize = e.detail.pageSize;\\n                let sortBy = e.detail.sortBy;\\n                let sortOrder = e.detail.sortOrder;\\n                this.element.data = {\\n                    items: loadItems(21, page, pageSize, sortBy, sortOrder),\\n                    totalCount: 21\\n                };\\n            });\\n        });\\n\\n        it('should show the tagviewer', function () {\\n            let main = this.page.getMain();\\n\\n            expect(isVisible(main)).toBeTruthy();\\n        });\\n\\n        it('should show the rows', function () {\\n            let rows = this.page.getRows();\\n            expect(rows.length).toBe(20);\\n\\n            let cell1 = this.page.getCell(0, 2);\\n            expect(cell1.textContent).toBe('tag-1');\\n\\n            let cell2 = this.page.getCell(0, 3);\\n            expect(cell2.textContent).toBe('1');\\n\\n            let cell3 = this.page.getCell(0, 4);\\n            expect(cell3.textContent).toBe('1');\\n\\n            let cell4 = this.page.getCell(0, 5);\\n            expect(cell4.textContent).toBe('2');\\n\\n            let cell5 = this.page.getCell(0, 6);\\n            expect(cell5.textContent).toBe('1.5');\\n\\n            let cell6 = this.page.getCell(0, 7);\\n            expect(cell6.textContent).toBe('11');\\n\\n            let cell7 = this.page.getCell(0, 8);\\n            expect(cell7.textContent).toBe('Mar 3, 2019 at 2:01 PM');\\n        });\\n\\n        it('should display dialog on error', function () {\\n            this.element.showErrorDialog(this.element._i18n.errorDialog.header.tagResetAggregates);\\n\\n            expect(this.page.getDialogHeader().textContent).toBe('Could not reset tag aggregates!');\\n        });\\n    });\\n\\n    describe('Create Tag', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`<sl-tagviewer></sl-tagviewer>`);\\n            this.element.i18n = TAGVIEWER_I18N;\\n        });\\n\\n        it('should fire event when creating a new tag', function () {\\n            this.element.addEventListener('tag-create', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCreateTag();\\n            enterValue(this.page.getNewTagPath(), 'my-new-tag');\\n\\n            this.page.clickCreateButton();\\n\\n            expect(this.eventDetail.tag).toEqual({\\n                path: 'my-new-tag',\\n                type: 'INT',\\n                collectAggregates: false,\\n                keywords: [],\\n                properties: {\\n                    nitagRetention: 'NONE'\\n                }\\n            });\\n        });\\n\\n        it('should disable create button without tag path', function () {\\n            this.page.clickCreateTag();\\n\\n            let button = this.page.getCreateButton();\\n\\n            expect(button.disabled).toBeTruthy();\\n        });\\n\\n        it('should create tag with aggregates, count retention and type', function () {\\n            this.element.addEventListener('tag-create', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCreateTag();\\n            enterValue(this.page.getNewTagPath(), 'my-new-tag');\\n            selectOption(this.page.getNewTagType(), 'STRING');\\n            selectOption(this.page.getNewTagRetention(), 'COUNT');\\n            this.page.getNewTagCollectAggregates().click();\\n\\n            this.page.clickCreateButton();\\n\\n            expect(this.eventDetail.tag).toEqual({\\n                path: 'my-new-tag',\\n                type: 'STRING',\\n                collectAggregates: true,\\n                keywords: [],\\n                properties: {\\n                    nitagRetention: 'COUNT',\\n                    nitagMaxHistoryCount: '10000'\\n                }\\n            });\\n        });\\n\\n        it('should create tag with duration retention', function () {\\n            this.element.addEventListener('tag-create', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCreateTag();\\n            enterValue(this.page.getNewTagPath(), 'my-new-tag');\\n            selectOption(this.page.getNewTagType(), 'DATE_TIME');\\n            selectOption(this.page.getNewTagRetention(), 'DURATION');\\n\\n            this.page.clickCreateButton();\\n\\n            expect(this.eventDetail.tag).toEqual({\\n                path: 'my-new-tag',\\n                type: 'DATE_TIME',\\n                collectAggregates: false,\\n                keywords: [],\\n                properties: {\\n                    nitagRetention: 'DURATION',\\n                    nitagHistoryTTLDays: '30'\\n                }\\n            });\\n        });\\n    });\\n\\n    describe('Update Value', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`<sl-tagviewer></sl-tagviewer>`);\\n            this.element.i18n = TAGVIEWER_I18N;\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'INT', '1'),\\n                    createTag('tag-2', 'INT', '2'),\\n                    createTag('tag-3', 'STRING', 'test'),\\n                    createTag('tag-4', 'DOUBLE', '1.2'),\\n                    createTag('tag-5', 'U_INT64', '199'),\\n                    createTag('tag-6', 'DATE_TIME', '2000-01-01T01:01:01Z'),\\n                    createTag('tag-7', 'BOOLEAN', 'true')\\n                ],\\n                totalCount: 7\\n            };\\n        });\\n\\n        it('should fire event when updating a tag value', function () {\\n            this.element.addEventListener('tag-update-values', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickUpdate();\\n\\n            enterValue(this.page.getDetailsPage().getValueInput(), '11');\\n\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail.tags.length).toBe(1);\\n            expect(this.eventDetail.tags[0].path).toBe('tag-1');\\n            expect(this.eventDetail.value).toBe('11');\\n        });\\n\\n        it('should fire event when updating multiple tag values', function () {\\n            this.element.addEventListener('tag-update-values', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(1);\\n            this.page.clickUpdate();\\n\\n            enterValue(this.page.getDetailsPage().getValueInput(), '11');\\n\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail.tags.length).toBe(2);\\n            expect(this.eventDetail.tags[0].path).toBe('tag-1');\\n            expect(this.eventDetail.tags[1].path).toBe('tag-2');\\n            expect(this.eventDetail.value).toBe('11');\\n        });\\n\\n        it('should show validation error when value is not INT', function () {\\n            this.element.addEventListener('tag-update-values', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(1);\\n            this.page.clickUpdate();\\n\\n            enterValue(this.page.getDetailsPage().getValueInput(), 'not-INT');\\n\\n            this.page.clickUpdateButton();\\n\\n            expect(this.page.getDetailsPage().getValueErrorMessage().textContent).toBe('Tag value must be an integer!');\\n        });\\n\\n        it('should allow updating INT and STRING tag values when value is INT', function () {\\n            this.element.addEventListener('tag-update-values', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(2);\\n            this.page.clickUpdate();\\n\\n            enterValue(this.page.getDetailsPage().getValueInput(), '11');\\n\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail.tags.length).toBe(2);\\n            expect(this.eventDetail.tags[0].path).toBe('tag-1');\\n            expect(this.eventDetail.tags[0].type).toBe('INT');\\n            expect(this.eventDetail.tags[1].path).toBe('tag-3');\\n            expect(this.eventDetail.tags[1].type).toBe('STRING');\\n            expect(this.eventDetail.value).toBe('11');\\n        });\\n\\n        it('should show validation error when updating INT and STRING tag values with a STRING value', function () {\\n            this.element.addEventListener('tag-update-values', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(2);\\n            this.page.clickUpdate();\\n\\n            enterValue(this.page.getDetailsPage().getValueInput(), 'not-INT');\\n\\n            this.page.clickUpdateButton();\\n\\n            expect(this.page.getDetailsPage().getValueErrorMessage().textContent).toBe('Tag value must be an integer!');\\n        });\\n\\n        it('should show validation error when updating DOUBLE with an invalid value', function () {\\n            this.element.addEventListener('tag-update-values', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(3);\\n            this.page.clickUpdate();\\n\\n            enterValue(this.page.getDetailsPage().getValueInput(), 'not-Double');\\n\\n            this.page.clickUpdateButton();\\n\\n            expect(this.page.getDetailsPage().getValueErrorMessage().textContent).toBe('Tag value must be a double!');\\n        });\\n\\n        it('should show validation error when updating U_INT64 with an invalid value', function () {\\n            this.element.addEventListener('tag-update-values', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(4);\\n            this.page.clickUpdate();\\n\\n            enterValue(this.page.getDetailsPage().getValueInput(), 'INVALID');\\n\\n            this.page.clickUpdateButton();\\n\\n            expect(this.page.getDetailsPage().getValueErrorMessage().textContent).toBe('Tag value must be a positive integer!');\\n        });\\n\\n        it('should show validation error when updating U_INT64 with a negative number', function () {\\n            this.element.addEventListener('tag-update-values', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(4);\\n            this.page.clickUpdate();\\n\\n            enterValue(this.page.getDetailsPage().getValueInput(), '-1');\\n\\n            this.page.clickUpdateButton();\\n\\n            expect(this.page.getDetailsPage().getValueErrorMessage().textContent).toBe('Tag value must be a positive integer!');\\n        });\\n\\n        it('should show validation error when updating DATE_TIME with an invalid date', function () {\\n            this.element.addEventListener('tag-update-values', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(5);\\n            this.page.clickUpdate();\\n\\n            enterValue(this.page.getDetailsPage().getValueInput(), 'not-DATE');\\n\\n            this.page.clickUpdateButton();\\n\\n            expect(this.page.getDetailsPage().getValueErrorMessage().textContent).toBe('Tag value must be a timestamp!');\\n        });\\n\\n        it('should show validation error when updating BOOLEAN with an invalid value', function () {\\n            this.element.addEventListener('tag-update-values', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(6);\\n            this.page.clickUpdate();\\n\\n            enterValue(this.page.getDetailsPage().getValueInput(), 'not-BOOLEAN');\\n\\n            this.page.clickUpdateButton();\\n\\n            expect(this.page.getDetailsPage().getValueErrorMessage().textContent).toBe('Tag value must be boolean! (true or false)');\\n        });\\n    });\\n\\n    describe('Reset Aggregates', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`<sl-tagviewer></sl-tagviewer>`);\\n            this.element.i18n = TAGVIEWER_I18N;\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'INT', '1')\\n                ],\\n                totalCount: 1\\n            };\\n        });\\n\\n        it('should fire reset aggregates event when clicking toolbar button', function () {\\n            this.element.addEventListener('tag-reset-aggregates', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickResetAggregates();\\n\\n            expect(this.eventDetail.tags.length).toBe(1);\\n            expect(this.eventDetail.tags[0].path).toBe('tag-1');\\n        });\\n    });\\n\\n    describe('Delete Tag', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`<sl-tagviewer></sl-tagviewer>`);\\n            this.element.i18n = TAGVIEWER_I18N;\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'INT', '1'),\\n                    createTag('tag-2', 'STRING', 'my-val'),\\n                    createTag('tag-3', 'DOUBLE', '2.0')\\n                ],\\n                totalCount: 2\\n            };\\n        });\\n\\n        it('should show dialog message when deleting single tag', function () {\\n            this.page.clickCheckbox(0);\\n            this.page.clickDeleteTag();\\n\\n            expect(this.page.getDialogHeader().textContent).toBe('Are you sure you want to delete \\\"tag-1\\\"?');\\n        });\\n\\n        it('should show dialog message when deleting multiple tags', function () {\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(2);\\n            this.page.clickDeleteTag();\\n\\n            expect(this.page.getDialogHeader().textContent).toBe('Are you sure you want to delete 2 tags?');\\n        });\\n\\n        it('should fire event when deleting multiple tags', function () {\\n            this.element.addEventListener('tag-delete', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(2);\\n            this.page.clickDeleteTag();\\n\\n            this.page.clickOKButton();\\n\\n            expect(this.eventDetail.tags.length).toBe(2);\\n            expect(this.eventDetail.tags[0].path).toBe('tag-1');\\n            expect(this.eventDetail.tags[1].path).toBe('tag-3');\\n        });\\n    });\\n\\n    describe('Filter', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`<sl-tagviewer></sl-tagviewer>`);\\n            this.element.i18n = TAGVIEWER_I18N;\\n        });\\n\\n        it('should filter builder when clicking on filter button', function () {\\n            this.page.clickFilter();\\n\\n            expect(isVisible(this.page.getFilterBuilderFieldSelector(0))).toBeTruthy();\\n        });\\n\\n        it('should fire data event when changing the filter', function () {\\n            this.element.addEventListener('tag-data', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickFilter();\\n            selectOption(this.page.getFilterBuilderFieldSelector(0), 'path');\\n            enterValue(this.page.getFilterBuilderValueInput(0), 'tag-a');\\n\\n            expect(this.eventDetail).toEqual({\\n                page: 1,\\n                pageSize: 20,\\n                sortBy: undefined,\\n                sortOrder: undefined,\\n                searchTerm: undefined,\\n                filters: [\\n                    { name: 'path', operation: 'MATCHES', value: 'tag-a' }\\n                ],\\n                trigger: 'filter'\\n            });\\n        });\\n\\n        it('should fire data event when entering search term', function () {\\n            this.element.addEventListener('tag-data', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            enterValue(this.page.getSearchInput(), 'tag-x');\\n\\n            expect(this.eventDetail).toEqual({\\n                page: 1,\\n                pageSize: 20,\\n                sortBy: undefined,\\n                sortOrder: undefined,\\n                searchTerm: 'tag-x',\\n                filters: undefined,\\n                trigger: 'search'\\n            });\\n        });\\n    });\\n\\n    describe('Edit Tag', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`<sl-tagviewer></sl-tagviewer>`);\\n            this.element.i18n = TAGVIEWER_I18N;\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'INT', '1'),\\n                    createTag('tag-2', 'STRING', 'test', false, ['keywordA'], { 'hello': 'world', 'test': '1234' }),\\n                    createTag('tag-3', 'DOUBLE', '1.2', false, [], { 'nitagRetention': 'COUNT', 'nitagMaxHistoryCount': '25' }),\\n                    createTag('tag-4', 'U_INT64', '199', false, [], { 'nitagRetention': 'DURATION', 'nitagHistoryTTLDays': '30' }),\\n                    createTag('tag-5', 'DATE_TIME', '2000-01-01T01:01:01Z', true),\\n                    createTag('tag-6', 'BOOLEAN', 'true')\\n                ],\\n                totalCount: 6\\n            };\\n        });\\n\\n        it('should show tag details', function () {\\n            this.page.clickEdit(0);\\n\\n            let detailsPage = this.page.getDetailsPage();\\n            expect(detailsPage.getPath().textContent).toBe('tag-1');\\n            expect(detailsPage.getType().textContent).toBe('32-bit Integer');\\n            expect(detailsPage.getValueInput().value).toBe('1');\\n            expect(detailsPage.getCollectAggregatesSelect().checked).toBe(false);\\n            expect(detailsPage.getRetentionSelect().value).toBe('NONE');\\n            expect(isVisible(detailsPage.getRetentionDaysInput())).toBeFalsy();\\n            expect(isVisible(detailsPage.getRetentionCountInput())).toBeFalsy();\\n            expect(detailsPage.getKeywordsListEditorPage().getRows().length).toBe(1);\\n            expect(detailsPage.getPropertiesListEditorPage().getRows().length).toBe(1);\\n        });\\n\\n        it('should show keywords and properties', function () {\\n            this.page.clickEdit(1);\\n\\n            let detailsPage = this.page.getDetailsPage();\\n            expect(detailsPage.getPath().textContent).toBe('tag-2');\\n            expect(detailsPage.getType().textContent).toBe('String');\\n            expect(detailsPage.getKeywordsListEditorPage().getRows().length).toBe(2);\\n            expect(detailsPage.getPropertiesListEditorPage().getRows().length).toBe(3);\\n        });\\n\\n        it('should show retention count', function () {\\n            this.page.clickEdit(2);\\n\\n            let detailsPage = this.page.getDetailsPage();\\n            expect(detailsPage.getPath().textContent).toBe('tag-3');\\n            expect(detailsPage.getType().textContent).toBe('Double');\\n            expect(detailsPage.getRetentionSelect().value).toBe('COUNT');\\n            expect(detailsPage.getRetentionCountInput().value).toBe('25');\\n            expect(isVisible(detailsPage.getRetentionDaysInput())).toBeFalsy();\\n            expect(detailsPage.getPropertiesListEditorPage().getRows().length).toBe(1);\\n        });\\n\\n        it('should show retention days', function () {\\n            this.page.clickEdit(3);\\n\\n            let detailsPage = this.page.getDetailsPage();\\n            expect(detailsPage.getPath().textContent).toBe('tag-4');\\n            expect(detailsPage.getType().textContent).toBe('64-bit Unsigned Integer');\\n            expect(detailsPage.getRetentionSelect().value).toBe('DURATION');\\n            expect(detailsPage.getRetentionDaysInput().value).toBe('30');\\n            expect(isVisible(detailsPage.getRetentionCountInput())).toBeFalsy();\\n            expect(detailsPage.getPropertiesListEditorPage().getRows().length).toBe(1);\\n        });\\n\\n        it('should check collect aggregates', function () {\\n            this.page.clickEdit(4);\\n\\n            let detailsPage = this.page.getDetailsPage();\\n            expect(detailsPage.getPath().textContent).toBe('tag-5');\\n            expect(detailsPage.getType().textContent).toBe('Timestamp');\\n            expect(detailsPage.getCollectAggregatesSelect().checked).toBe(true);\\n        });\\n\\n        it('should update retention to COUNT', function () {\\n            this.element.addEventListener('tag-update', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickEdit(0);\\n            selectOption(this.page.getDetailsPage().getRetentionSelect(), 'COUNT');\\n            enterValue(this.page.getDetailsPage().getRetentionCountInput(), 1234);\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail.tags).toEqual([{\\n                path: 'tag-1',\\n                type: 'INT',\\n                collectAggregates: false,\\n                keywords: [],\\n                properties: {\\n                    nitagRetention: 'COUNT',\\n                    nitagMaxHistoryCount: '1234'\\n                }\\n            }]);\\n        });\\n\\n        it('should update retention to DURATION', function () {\\n            this.element.addEventListener('tag-update', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickEdit(0);\\n            selectOption(this.page.getDetailsPage().getRetentionSelect(), 'DURATION');\\n            enterValue(this.page.getDetailsPage().getRetentionDaysInput(), 37);\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail.tags).toEqual([{\\n                path: 'tag-1',\\n                type: 'INT',\\n                collectAggregates: false,\\n                keywords: [],\\n                properties: {\\n                    nitagRetention: 'DURATION',\\n                    nitagHistoryTTLDays: '37'\\n                }\\n            }]);\\n        });\\n\\n        it('should update retention to PERMANENT', function () {\\n            this.element.addEventListener('tag-update', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickEdit(0);\\n            selectOption(this.page.getDetailsPage().getRetentionSelect(), 'PERMANENT');\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail.tags).toEqual([{\\n                path: 'tag-1',\\n                type: 'INT',\\n                collectAggregates: false,\\n                keywords: [],\\n                properties: {\\n                    nitagRetention: 'PERMANENT'\\n                }\\n            }]);\\n        });\\n\\n        it('should fire tag-update-values event', function () {\\n            this.element.addEventListener('tag-update-values', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickEdit(0);\\n            enterValue(this.page.getDetailsPage().getValueInput(), '1234');\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail.tags[0].path).toBe('tag-1');\\n            expect(this.eventDetail.value).toBe('1234');\\n        });\\n\\n        it('should show validation error if value is invalid', function () {\\n            this.page.clickEdit(0);\\n            enterValue(this.page.getDetailsPage().getValueInput(), 'INVALID');\\n            this.page.clickUpdateButton();\\n\\n            let errorMessage = this.page.getDetailsPage().getValueErrorMessage();\\n            expect(errorMessage.textContent).toBe('Tag value must be an integer!');\\n        });\\n\\n        it('should add new keyword', function () {\\n            this.element.addEventListener('tag-update', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickEdit(0);\\n            this.page.getDetailsPage().getKeywordsListEditorPage().enterListValue(0, 'new keyword');\\n\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail.tags[0].keywords).toEqual(['new keyword']);\\n        });\\n\\n        it('should add new property', function () {\\n            this.element.addEventListener('tag-update', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickEdit(0);\\n            this.page.getDetailsPage().getPropertiesListEditorPage().enterListKeyValue(0, 'new-key', 'new-value');\\n\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail.tags[0].properties['new-key']).toEqual('new-value');\\n        });\\n    });\\n\\n    describe('Bulk Edit', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`<sl-tagviewer></sl-tagviewer>`);\\n            this.element.i18n = TAGVIEWER_I18N;\\n        });\\n\\n        it('should show multiple tags and leave fields empty which have different values', function () {\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'INT', '1', true, ['other keyword'], { 'nitagRetention': 'PERMANENT' }),\\n                    createTag('tag-2', 'STRING', 'test', false, ['keywordA'], { 'hello': 'world', 'test': '1234' })\\n                ],\\n                totalCount: 2\\n            };\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(1);\\n            this.page.clickUpdate();\\n\\n            let detailsPage = this.page.getDetailsPage();\\n            expect(detailsPage.getPath().textContent).toBe('tag-1, tag-2');\\n            expect(detailsPage.getType().textContent).toBe('');\\n            expect(detailsPage.getValueInput().value).toBe('');\\n            expect(detailsPage.getCollectAggregatesSelect().checked).toBe(false);\\n            expect(detailsPage.getRetentionSelect().value).toBe('');\\n            expect(isVisible(detailsPage.getRetentionDaysInput())).toBeFalsy();\\n            expect(isVisible(detailsPage.getRetentionCountInput())).toBeFalsy();\\n            expect(detailsPage.getKeywordsListEditorPage().getRows().length).toBe(1);\\n            expect(detailsPage.getPropertiesListEditorPage().getRows().length).toBe(1);\\n        });\\n\\n        it('should show multiple tags and and common field values', function () {\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'STRING', 'test', true, ['keywordA'], { 'hello': 'world', 'test': '1234' }),\\n                    createTag('tag-2', 'STRING', 'test', true, ['keywordA'], { 'hello': 'world', 'test': '1234' })\\n                ],\\n                totalCount: 2\\n            };\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(1);\\n            this.page.clickUpdate();\\n\\n            let detailsPage = this.page.getDetailsPage();\\n            expect(detailsPage.getPath().textContent).toBe('tag-1, tag-2');\\n            expect(detailsPage.getType().textContent).toBe('String');\\n            expect(detailsPage.getValueInput().value).toBe('test');\\n            expect(detailsPage.getCollectAggregatesSelect().checked).toBe(true);\\n            expect(detailsPage.getRetentionSelect().value).toBe('NONE');\\n            expect(isVisible(detailsPage.getRetentionDaysInput())).toBeFalsy();\\n            expect(isVisible(detailsPage.getRetentionCountInput())).toBeFalsy();\\n            expect(detailsPage.getKeywordsListEditorPage().getRows().length).toBe(2);\\n            expect(detailsPage.getPropertiesListEditorPage().getRows().length).toBe(3);\\n        });\\n\\n        it('should fire tag-update event when changing aggregates', function () {\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'INT', '1', false),\\n                    createTag('tag-2', 'STRING', 'test', false)\\n                ],\\n                totalCount: 2\\n            };\\n            this.element.addEventListener('tag-update', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(1);\\n            this.page.clickUpdate();\\n\\n            let detailsPage = this.page.getDetailsPage();\\n            detailsPage.getCollectAggregatesSelect().click();\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail).toEqual({\\n                tags: [\\n                    { path: 'tag-1', type: 'INT', collectAggregates: true, properties: {}, keywords: [] },\\n                    { path: 'tag-2', type: 'STRING', collectAggregates: true, properties: {}, keywords: [] }\\n                ]\\n            });\\n        });\\n\\n        it('should fire tag-update event when changing retention to count', function () {\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'INT', '1'),\\n                    createTag('tag-2', 'STRING', 'test')\\n                ],\\n                totalCount: 2\\n            };\\n            this.element.addEventListener('tag-update', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(1);\\n            this.page.clickUpdate();\\n\\n            let detailsPage = this.page.getDetailsPage();\\n            selectOption(detailsPage.getRetentionSelect(), 'COUNT');\\n            enterValue(detailsPage.getRetentionCountInput(), 1234);\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail).toEqual({\\n                tags: [\\n                    { path: 'tag-1', type: 'INT', collectAggregates: false, properties: { nitagRetention: 'COUNT', nitagMaxHistoryCount: '1234' }, keywords: [] },\\n                    { path: 'tag-2', type: 'STRING', collectAggregates: false, properties: { nitagRetention: 'COUNT', nitagMaxHistoryCount: '1234' }, keywords: [] }\\n                ]\\n            });\\n        });\\n\\n        it('should fire tag-update event with default retention count', function () {\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'INT', '1'),\\n                    createTag('tag-2', 'STRING', 'test')\\n                ],\\n                totalCount: 2\\n            };\\n            this.element.addEventListener('tag-update', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(1);\\n            this.page.clickUpdate();\\n\\n            let detailsPage = this.page.getDetailsPage();\\n            selectOption(detailsPage.getRetentionSelect(), 'COUNT');\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail).toEqual({\\n                tags: [\\n                    { path: 'tag-1', type: 'INT', collectAggregates: false, properties: { nitagRetention: 'COUNT', nitagMaxHistoryCount: '10000' }, keywords: [] },\\n                    { path: 'tag-2', type: 'STRING', collectAggregates: false, properties: { nitagRetention: 'COUNT', nitagMaxHistoryCount: '10000' }, keywords: [] }\\n                ]\\n            });\\n        });\\n\\n        it('should fire tag-update event when changing retention to days', function () {\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'INT', '1'),\\n                    createTag('tag-2', 'STRING', 'test')\\n                ],\\n                totalCount: 2\\n            };\\n            this.element.addEventListener('tag-update', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(1);\\n            this.page.clickUpdate();\\n\\n            let detailsPage = this.page.getDetailsPage();\\n            selectOption(detailsPage.getRetentionSelect(), 'DURATION');\\n            enterValue(detailsPage.getRetentionDaysInput(), 1234);\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail).toEqual({\\n                tags: [\\n                    { path: 'tag-1', type: 'INT', collectAggregates: false, properties: { nitagRetention: 'DURATION', nitagHistoryTTLDays: '1234' }, keywords: [] },\\n                    { path: 'tag-2', type: 'STRING', collectAggregates: false, properties: { nitagRetention: 'DURATION', nitagHistoryTTLDays: '1234' }, keywords: [] }\\n                ]\\n            });\\n        });\\n\\n        it('should fire tag-update event with default retention days', function () {\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'INT', '1'),\\n                    createTag('tag-2', 'STRING', 'test')\\n                ],\\n                totalCount: 2\\n            };\\n            this.element.addEventListener('tag-update', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(1);\\n            this.page.clickUpdate();\\n\\n            let detailsPage = this.page.getDetailsPage();\\n            selectOption(detailsPage.getRetentionSelect(), 'DURATION');\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail).toEqual({\\n                tags: [\\n                    { path: 'tag-1', type: 'INT', collectAggregates: false, properties: { nitagRetention: 'DURATION', nitagHistoryTTLDays: '30' }, keywords: [] },\\n                    { path: 'tag-2', type: 'STRING', collectAggregates: false, properties: { nitagRetention: 'DURATION', nitagHistoryTTLDays: '30' }, keywords: [] }\\n                ]\\n            });\\n        });\\n\\n        it('should fire tag-update event when changing keywords', function () {\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'INT', '1', false, ['existing keyword']),\\n                    createTag('tag-2', 'STRING', 'test', false, [])\\n                ],\\n                totalCount: 2\\n            };\\n            this.element.addEventListener('tag-update', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(1);\\n            this.page.clickUpdate();\\n\\n            this.page.getDetailsPage().getKeywordsListEditorPage().enterListValue(0, 'other keyword');\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail).toEqual({\\n                tags: [\\n                    { path: 'tag-1', type: 'INT', collectAggregates: false, properties: { }, keywords: ['other keyword'] },\\n                    { path: 'tag-2', type: 'STRING', collectAggregates: false, properties: { }, keywords: ['other keyword'] }\\n                ]\\n            });\\n        });\\n\\n        it('should fire tag-update event when adding keyword', function () {\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'INT', '1', false, ['existing keyword']),\\n                    createTag('tag-2', 'STRING', 'test', false, ['existing keyword'])\\n                ],\\n                totalCount: 2\\n            };\\n            this.element.addEventListener('tag-update', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(1);\\n            this.page.clickUpdate();\\n\\n            this.page.getDetailsPage().getKeywordsListEditorPage().enterListValue(1, 'other keyword');\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail).toEqual({\\n                tags: [\\n                    { path: 'tag-1', type: 'INT', collectAggregates: false, properties: { }, keywords: ['existing keyword', 'other keyword'] },\\n                    { path: 'tag-2', type: 'STRING', collectAggregates: false, properties: { }, keywords: ['existing keyword', 'other keyword'] }\\n                ]\\n            });\\n        });\\n\\n        it('should fire tag-update event when deleting keyword', function () {\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'INT', '1', false, ['existing keyword']),\\n                    createTag('tag-2', 'STRING', 'test', false, ['existing keyword'])\\n                ],\\n                totalCount: 2\\n            };\\n            this.element.addEventListener('tag-update', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(1);\\n            this.page.clickUpdate();\\n\\n            this.page.getDetailsPage().getKeywordsListEditorPage().clickIcon(0);\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail).toEqual({\\n                tags: [\\n                    { path: 'tag-1', type: 'INT', collectAggregates: false, properties: { }, keywords: [] },\\n                    { path: 'tag-2', type: 'STRING', collectAggregates: false, properties: { }, keywords: [] }\\n                ]\\n            });\\n        });\\n\\n        it('should fire tag-update event when changing properties', function () {\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'INT', '1', false, [], { 'hello': 'world' }),\\n                    createTag('tag-2', 'STRING', 'test', false, [], {})\\n                ],\\n                totalCount: 2\\n            };\\n            this.element.addEventListener('tag-update', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(1);\\n            this.page.clickUpdate();\\n\\n            this.page.getDetailsPage().getPropertiesListEditorPage().enterListKeyValue(0, 'other', 'property');\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail).toEqual({\\n                tags: [\\n                    { path: 'tag-1', type: 'INT', collectAggregates: false, properties: { 'other': 'property' }, keywords: [] },\\n                    { path: 'tag-2', type: 'STRING', collectAggregates: false, properties: { 'other': 'property' }, keywords: [] }\\n                ]\\n            });\\n        });\\n\\n        it('should fire tag-update event when adding property', function () {\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'INT', '1', false, [], { 'existing': '1' }),\\n                    createTag('tag-2', 'STRING', 'test', false, [], { 'existing': '1' })\\n                ],\\n                totalCount: 2\\n            };\\n            this.element.addEventListener('tag-update', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(1);\\n            this.page.clickUpdate();\\n\\n            this.page.getDetailsPage().getPropertiesListEditorPage().enterListKeyValue(1, 'new', '2');\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail).toEqual({\\n                tags: [\\n                    { path: 'tag-1', type: 'INT', collectAggregates: false, properties: { 'existing': '1', 'new': '2' }, keywords: [] },\\n                    { path: 'tag-2', type: 'STRING', collectAggregates: false, properties: { 'existing': '1', 'new': '2' }, keywords: [] }\\n                ]\\n            });\\n        });\\n\\n        it('should fire tag-update event when deleting property', function () {\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'INT', '1', false, [], { 'existing': '1' }),\\n                    createTag('tag-2', 'STRING', 'test', false, [], { 'existing': '1' })\\n                ],\\n                totalCount: 2\\n            };\\n            this.element.addEventListener('tag-update', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(1);\\n            this.page.clickUpdate();\\n\\n            this.page.getDetailsPage().getPropertiesListEditorPage().clickIcon(0);\\n            this.page.clickUpdateButton();\\n\\n            expect(this.eventDetail).toEqual({\\n                tags: [\\n                    { path: 'tag-1', type: 'INT', collectAggregates: false, properties: { }, keywords: [] },\\n                    { path: 'tag-2', type: 'STRING', collectAggregates: false, properties: { }, keywords: [] }\\n                ]\\n            });\\n        });\\n    });\\n\\n    describe('History', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`<sl-tagviewer></sl-tagviewer>`);\\n            this.element.i18n = TAGVIEWER_I18N;\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'INT', '1'),\\n                    createTag('tag-2', 'STRING', 'test')\\n                ],\\n                totalCount: 2\\n            };\\n        });\\n\\n        it('should fire event when clicking history', function () {\\n            this.element.addEventListener('tag-history', (e) => {\\n                this.eventDetail = e.detail;\\n            });\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(1);\\n            this.page.clickHistory();\\n\\n            expect(this.eventDetail.tags.length).toBe(2);\\n            expect(this.eventDetail.tags[0].path).toBe('tag-1');\\n            expect(this.eventDetail.tags[1].path).toBe('tag-2');\\n        });\\n    });\\n\\n    describe('Export to CSV', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`<sl-tagviewer></sl-tagviewer>`);\\n            this.element.i18n = TAGVIEWER_I18N;\\n            this.element.data = {\\n                items: [\\n                    createTag('tag-1', 'INT', '1'),\\n                    createTag('tag-2', 'STRING', 'test')\\n                ],\\n                totalCount: 2\\n            };\\n\\n            this.page.clickCheckbox(0);\\n            this.page.clickCheckbox(1);\\n            this.page.clickExport();\\n        });\\n\\n        it('should open drop down when clicking export', function () {\\n            let exportDropDownItems = this.page.getExportDropDownItems();\\n\\n            expect(exportDropDownItems.length).toBe(2);\\n            expect(exportDropDownItems[0].text).toBe('Export History');\\n            expect(exportDropDownItems[1].text).toBe('Export Details');\\n            expect(exportDropDownItems[0].attributes['sl-dropdown-context'].value).toBe('export');\\n            expect(exportDropDownItems[1].attributes['sl-dropdown-context'].value).toBe('export');\\n        });\\n\\n        describe('History', () => {\\n            it('should fire event when clicking export history', function () {\\n                this.page.clickExportHistory();\\n\\n                let queryHistoryDialogPage = this.page.getDialogPage();\\n                expect(isVisible(queryHistoryDialogPage.getDialog())).toBeTruthy();\\n                expect(queryHistoryDialogPage.getHeader().textContent).toBe('Query for Tag History');\\n                expect(queryHistoryDialogPage.getMiddleButtonText().textContent).toBe('QUERY HISTORY');\\n\\n                enterValue(this.page.getExportHistorySamples(), '2000');\\n\\n                this.element.addEventListener('tag-export-history', (e) => {\\n                    this.eventDetail = e.detail;\\n                });\\n\\n                this.page.clickExportHisoryButton();\\n\\n                expect(this.eventDetail.tags.length).toBe(2);\\n                expect(this.eventDetail.tags[0].path).toBe('tag-1');\\n                expect(this.eventDetail.tags[1].path).toBe('tag-2');\\n\\n                let expectedEndTime = new Date();\\n                let expectedStartTime = new Date(); expectedStartTime.setDate(expectedEndTime.getDate() - 30);\\n                expect(this.eventDetail.params).toBeTruthy();\\n                expect(this.eventDetail.params.take).toBe('2000');\\n                expect(new Date(this.eventDetail.params.startTime).toDateString()).toBe(expectedStartTime.toDateString());\\n                expect(new Date(this.eventDetail.params.endTime).toDateString()).toBe(expectedEndTime.toDateString());\\n            });\\n        });\\n\\n        describe('Details', () => {\\n            it('should fire event when clicking export details', function () {\\n                this.element.addEventListener('tag-export-details', (e) => {\\n                    this.eventDetail = e.detail;\\n                });\\n\\n                this.page.clickExportDetails();\\n\\n                expect(this.eventDetail.tags.length).toBe(2);\\n                expect(this.eventDetail.tags[0].path).toBe('tag-1');\\n                expect(this.eventDetail.tags[1].path).toBe('tag-2');\\n            });\\n        });\\n    });\\n});\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}