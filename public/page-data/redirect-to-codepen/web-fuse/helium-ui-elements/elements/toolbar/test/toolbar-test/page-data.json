{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/toolbar/test/toolbar-test","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../toolbar.js';\\n\\nimport { createFixture, isVisible } from '../../test/test-utils.js';\\nimport { ToolbarPage } from './toolbar-page.js';\\n\\ndescribe('Toolbar', () => {\\n    beforeEach(function () {\\n        this.page = new ToolbarPage();\\n    });\\n\\n    describe('Basic', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(`<mc-toolbar>\\n                <mc-toolbar-item name=\\\"new\\\" text=\\\"+ New\\\"></mc-toolbar-item>\\n                <mc-toolbar-item name=\\\"upload\\\" text=\\\"+ Upload\\\" show-on-mobile=\\\"false\\\"></mc-toolbar-item>\\n            </mc-toolbar>`);\\n        });\\n\\n        it('should show toolbar', function () {\\n            let toolbar = this.page.getToolbar();\\n\\n            expect(isVisible(toolbar)).toBeTruthy();\\n        });\\n\\n        it('should show toolbar items', function () {\\n            let items = this.page.getToolbarItems();\\n\\n            expect(items.length).toBe(2);\\n            expect(items[0].textContent).toBe('+ New');\\n            expect(items[1].textContent).toBe('+ Upload');\\n        });\\n\\n        it('should show icon for toolbar items', function () {\\n            this.element = createFixture(`<mc-toolbar>\\n                <mc-toolbar-item name=\\\"create\\\" text=\\\"Create\\\"></mc-toolbar-item>\\n                <mc-toolbar-item name=\\\"remove\\\" icon=\\\"&#xf00d\\\" text=\\\"Remove\\\"></mc-toolbar-item>\\n            </mc-toolbar>`);\\n\\n            let icons = this.page.getToolbarIcons();\\n\\n            expect(icons.length).toBe(1);\\n        });\\n\\n        it('should show icon on right for toolbar items', function () {\\n            this.element = createFixture(`<mc-toolbar>\\n                <mc-toolbar-item name=\\\"create\\\" text=\\\"Create\\\"></mc-toolbar-item>\\n                <mc-toolbar-item name=\\\"remove\\\" icon=\\\"&#xf0d7\\\" icon-position=\\\"right\\\" text=\\\"Remove\\\"></mc-toolbar-item>\\n            </mc-toolbar>`);\\n\\n            let icons = this.page.getToolbarIcons();\\n\\n            expect(icons.length).toBe(1);\\n        });\\n\\n        it('should fire toolbar-item-click event on item click', function () {\\n            let event = false;\\n            this.element.addEventListener('toolbar-item-click', function (e) {\\n                event = e;\\n            });\\n\\n            this.page.clickToolbarItem(0);\\n\\n            expect(event.detail.name).toBe('new');\\n        });\\n\\n        it('should not fire toolbar-item-click event when disabled', function () {\\n            this.element.setAttribute('disabled', 'true');\\n            let event = false;\\n            this.element.addEventListener('toolbar-item-click', function (e) {\\n                event = e;\\n            });\\n\\n            this.page.clickToolbarItem(1);\\n\\n            expect(event).toBe(false);\\n        });\\n\\n        it('should disable a single toolbar item', function () {\\n            this.element = createFixture(`<mc-toolbar>\\n                <mc-toolbar-item name=\\\"new\\\" text=\\\"+ New\\\" disabled=\\\"true\\\"></mc-toolbar-item>\\n                <mc-toolbar-item name=\\\"upload\\\" text=\\\"+ Upload\\\"></mc-toolbar-item>\\n            </mc-toolbar>`);\\n\\n            let event = false;\\n            this.element.addEventListener('toolbar-item-click', function (e) {\\n                event = e;\\n            });\\n\\n            this.page.clickToolbarItem(0);\\n            expect(event).toBe(false);\\n\\n            this.page.clickToolbarItem(1);\\n            expect(event.detail.name).toBe('upload');\\n        });\\n\\n        it('should fire toolbar-item-click event on nested toolbar items in a drop-down', function () {\\n            this.element = createFixture(`<mc-toolbar>\\n                <mc-toolbar-item name=\\\"export\\\" text=\\\"Export to CSV\\\" show-on-mobile=\\\"false\\\">\\n                    <mc-toolbar-item name=\\\"export-history\\\" text=\\\"Export History\\\"></mc-toolbar-item>\\n                    <mc-toolbar-item name=\\\"export-details\\\" text=\\\"Export Details\\\"></mc-toolbar-item>\\n                </mc-toolbar-item>\\n            </mc-toolbar>`);\\n\\n            let event = false;\\n            this.element.addEventListener('toolbar-item-click', function (e) {\\n                event = e;\\n            });\\n\\n            this.page.clickToolbarItem(0);\\n            expect(event.detail.name).toBe('export');\\n\\n            this.page.clickDropdownItem(0);\\n            expect(event.detail.name).toBe('export-history');\\n\\n            this.page.clickDropdownItem(1);\\n            expect(event.detail.name).toBe('export-details');\\n        });\\n    });\\n});\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}