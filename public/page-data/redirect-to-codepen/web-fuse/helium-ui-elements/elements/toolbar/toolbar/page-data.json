{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/toolbar/toolbar","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import iconsCss from '../common/styles/icons.css';\\nimport toolbarCss from './toolbar.css';\\n\\nimport { componentUtils } from '../common/component-utils.js';\\nimport { html } from '../../library/html-utils.js';\\n\\nconst styles = [iconsCss, toolbarCss];\\n\\n(function () {\\n    class MCToolbar extends HTMLElement {\\n        constructor () {\\n            super();\\n\\n            this._outsideDropdownClickHandler = e => {\\n                let target = e.composedPath()[0];\\n\\n                let contents = this.shadowRoot.querySelectorAll('.sl-dropdown-content');\\n                for (let content of contents) {\\n                    if (target.getAttribute('sl-dropdown-context') !== content.getAttribute('sl-dropdown-context')) {\\n                        content.parentNode.removeChild(content);\\n                    }\\n                }\\n            };\\n\\n            this.observer = new MutationObserver((mutations) => {\\n                mutations.forEach((mutation) => {\\n                    if (mutation.attributeName === 'disabled') {\\n                        let name = mutation.target.getAttribute('name');\\n                        let button = this._getToolbarButton(name);\\n                        if (!button) {\\n                            return;\\n                        }\\n\\n                        if (mutation.target.getAttribute('disabled') === 'true') {\\n                            button.setAttribute('disabled', 'true');\\n                        } else {\\n                            button.removeAttribute('disabled');\\n                        }\\n                    }\\n                });\\n            });\\n        }\\n\\n        get disabled () {\\n            return this.getAttribute('disabled');\\n        }\\n\\n        set disabled (value) {\\n            this.setAttribute('disabled', value);\\n        }\\n\\n        static get observedAttributes () {\\n            return ['disabled'];\\n        }\\n\\n        attributeChangedCallback (name, oldValue, newValue) {\\n            if (!this.shadowRoot) {\\n                return;\\n            }\\n            switch (name) {\\n            case 'disabled': {\\n                this._disableButtons(newValue === 'true');\\n                break;\\n            }\\n            }\\n        }\\n\\n        _disableButtons (value) {\\n            let buttons = this._getToolbarButtons();\\n            for (let button of buttons) {\\n                button.disabled = value;\\n            }\\n        }\\n\\n        _render () {\\n            const template = document.createElement('template');\\n            template.innerHTML =\\n                `<div class=\\\"mc-toolbar-main\\\"></div>`;\\n\\n            this.attachShadow({ mode: 'open' });\\n\\n            componentUtils.addStylesToElement(this.shadowRoot, styles);\\n\\n            this.shadowRoot.appendChild(template.content.cloneNode(true));\\n        }\\n\\n        connectedCallback () {\\n            if (!this.shadowRoot) {\\n                this._render();\\n                this._renderItems();\\n                this._attachMutationObserver();\\n            }\\n            document.addEventListener('click', this._outsideDropdownClickHandler);\\n        }\\n\\n        disconnectedCallback () {\\n            document.removeEventListener('click', this._outsideDropdownClickHandler);\\n        }\\n\\n        _attachMutationObserver () {\\n            let toolbarItems = [...this.querySelectorAll('mc-toolbar-item')];\\n            for (let toolbarItem of toolbarItems) {\\n                this.observer.observe(toolbarItem, { attributes: true, attributeFilter: ['disabled'] });\\n            }\\n        }\\n\\n        _getNestedItems (parentItem) {\\n            let nestedToolbarItems = [...parentItem.querySelectorAll('mc-toolbar-item')];\\n            return nestedToolbarItems.map((item) => {\\n                return {\\n                    name: item.getAttribute('name'),\\n                    text: item.getAttribute('text'),\\n                    icon: item.getAttribute('icon'),\\n                    iconPosition: item.getAttribute('icon-position') || 'left',\\n                    disabled: item.getAttribute('disabled') === 'true',\\n                    showOnMobile: this._parseBoolean(item.getAttribute('show-on-mobile') || 'true')\\n                };\\n            });\\n        }\\n\\n        _createConfig () {\\n            let toolbarItems = [...this.children];\\n            return toolbarItems.map((item) => {\\n                return {\\n                    name: item.getAttribute('name'),\\n                    text: item.getAttribute('text'),\\n                    icon: item.getAttribute('icon'),\\n                    iconPosition: item.getAttribute('icon-position') || 'left',\\n                    disabled: item.getAttribute('disabled') === 'true',\\n                    showOnMobile: this._parseBoolean(item.getAttribute('show-on-mobile') || 'true'),\\n                    nestedItems: this._getNestedItems(item)\\n                };\\n            });\\n        }\\n\\n        _parseBoolean (str) {\\n            return str === 'true';\\n        }\\n\\n        _createDropdownItemLink (dropDownItem, item) {\\n            let link = document.createElement('a');\\n            link.textContent = dropDownItem.text;\\n            link.setAttribute('sl-dropdown-context', item.name);\\n            if (dropDownItem.disabled) {\\n                link.setAttribute('disabled', 'true');\\n            };\\n            link.addEventListener('click', e => {\\n                this.dispatchEvent(new CustomEvent('toolbar-item-click', { detail: dropDownItem }));\\n            });\\n            return link;\\n        }\\n\\n        _createDropDown (dropDownItems, item) {\\n            let content = document.createElement('div');\\n            content.classList.add('sl-dropdown-content');\\n            content.setAttribute('sl-dropdown-context', item.name);\\n\\n            for (let dropDownItem of dropDownItems) {\\n                let link = this._createDropdownItemLink(dropDownItem, item);\\n                content.appendChild(link);\\n            }\\n            return content;\\n        }\\n\\n        _isDropdownOpen (context) {\\n            return this.shadowRoot.querySelector(`.sl-dropdown-content[sl-dropdown-context=\\\"${context}\\\"]`) !== null;\\n        }\\n\\n        _renderItems () {\\n            let config = this._createConfig();\\n            let main = this._getToolbar();\\n            main.innerHTML = '';\\n\\n            for (let item of config) {\\n                let button = this._createButton(item);\\n                button.classList.add('mc-toolbar-item');\\n                if (!item.showOnMobile) {\\n                    button.classList.add('mc-toolbar-item-hide-on-mobile');\\n                }\\n                button.disabled = this.disabled || item.disabled;\\n                if (item.nestedItems && item.nestedItems.length > 0) {\\n                    button.setAttribute('sl-dropdown-context', item.name);\\n                    button.addEventListener('click', e => {\\n                        if (this._isDropdownOpen(item.name)) {\\n                            return;\\n                        }\\n\\n                        let dropDown = this._createDropDown(item.nestedItems, item);\\n                        let rect = button.getBoundingClientRect();\\n                        dropDown.style.left = (rect.left + window.scrollX) + 'px';\\n                        dropDown.style.top = (rect.bottom + window.scrollY) + 'px';\\n                        this.shadowRoot.appendChild(dropDown);\\n                    });\\n                }\\n\\n                button.addEventListener('click', e => {\\n                    this.dispatchEvent(new CustomEvent('toolbar-item-click', { detail: item }));\\n                });\\n                main.appendChild(button);\\n            }\\n        }\\n\\n        _createButton (item) {\\n            let button = document.createElement('button');\\n            button.name = item.name;\\n            button.textContent = item.text;\\n            if (item.icon) {\\n                if (item.iconPosition === 'right') {\\n                    button.innerHTML = html`${item.text} <span sl-dropdown-context=\\\"${item.name}\\\" class=\\\"fa mc-toolbar-item-icon\\\">${item.icon}</span>`;\\n                } else if (item.iconPosition === 'left') {\\n                    button.innerHTML = html`<span sl-dropdown-context=\\\"${item.name}\\\" class=\\\"fa mc-toolbar-item-icon\\\">${item.icon}</span> ${item.text}`;\\n                }\\n            }\\n            return button;\\n        }\\n\\n        _getToolbarButtons () {\\n            return this.shadowRoot.querySelectorAll('.mc-toolbar-item');\\n        }\\n\\n        _getToolbarButton (name) {\\n            return this.shadowRoot.querySelector(`.mc-toolbar-item[name=${name}]`);\\n        }\\n\\n        _getToolbar () {\\n            return this.shadowRoot.querySelector('.mc-toolbar-main');\\n        }\\n    }\\n\\n    componentUtils.registerCustomElement('mc-toolbar', MCToolbar);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}