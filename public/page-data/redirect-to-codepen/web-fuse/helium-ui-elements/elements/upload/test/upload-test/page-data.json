{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/upload/test/upload-test","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import '../upload.js';\\n\\nimport { createFixture, isVisible } from '../../test/test-utils.js';\\nimport { UploadPage } from './upload-page.js';\\n\\ndescribe('Upload', () => {\\n    beforeEach(function () {\\n        this.page = new UploadPage();\\n    });\\n\\n    describe('Status \\\"Start\\\"', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<mc-upload status=\\\"start\\\" file-type=\\\".nipkg\\\" upload-button-text=\\\"browse\\\" start-text=\\\"Drag and drop .nipkg or\\\" pending-text=\\\"Uploading...\\\" success-text=\\\"Success!\\\" failure-text=\\\"Failed to upload!\\\"></mc-upload>`);\\n        });\\n\\n        it('should show upload', function () {\\n            let upload = this.page.getUpload();\\n\\n            expect(isVisible(upload)).toBeTruthy();\\n        });\\n\\n        it('should show browse button', function () {\\n            let browse = this.page.getBrowse();\\n\\n            expect(isVisible(browse)).toBeTruthy();\\n            expect(browse.textContent).toBe('browse');\\n        });\\n\\n        it('should set the file-type as accepting extension', function () {\\n            let input = this.page.getInput();\\n\\n            expect(input.accept).toBe('.nipkg');\\n        });\\n    });\\n\\n    describe('Status \\\"Pending\\\"', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<mc-upload status=\\\"pending\\\" file-type=\\\".nipkg\\\" upload-button-text=\\\"browse\\\" start-text=\\\"Drag and drop .nipkg or\\\" pending-text=\\\"Uploading...\\\" success-text=\\\"Success!\\\" failure-text=\\\"Failed to upload!\\\"></mc-upload>`);\\n        });\\n\\n        it('should show Uploading... message', function () {\\n            let formText = this.page.getFormText();\\n\\n            expect(formText.textContent).toBe('Uploading...');\\n        });\\n    });\\n\\n    describe('Status \\\"Success\\\"', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<mc-upload status=\\\"success\\\" file-type=\\\".nipkg\\\" upload-button-text=\\\"browse\\\" start-text=\\\"Drag and drop .nipkg or\\\" pending-text=\\\"Uploading...\\\" success-text=\\\"Success!\\\" failure-text=\\\"Failed to upload!\\\">\\n                    <mc-upload-failure-link name=\\\"upload-again\\\" text=\\\"Upload\\\" description=\\\"another web app\\\"></mc-upload-link>\\n                    <mc-upload-failure-link name=\\\"learn\\\" text=\\\"Learn\\\" description=\\\"about upload limitations\\\"></mc-upload-link>\\n                    <mc-upload-success-link name=\\\"view\\\" text=\\\"View\\\" description=\\\"this web app\\\"></mc-upload-link>\\n                </mc-upload>`);\\n        });\\n\\n        it('should show success message', function () {\\n            let formText = this.page.getFormText();\\n\\n            expect(formText.textContent).toBe('Success!');\\n        });\\n\\n        it('should render only success links', function () {\\n            let link = this.page.getLinks();\\n\\n            expect(link.length).toBe(1);\\n            expect(link[0].textContent).toBe('View this web app');\\n        });\\n\\n        it('should fire upload-link-click event on item click', function () {\\n            let event = false;\\n            this.element.addEventListener('upload-link-click', function (e) {\\n                event = e;\\n            });\\n\\n            this.page.clickLink(0);\\n\\n            expect(event.detail.name).toBe('view');\\n        });\\n    });\\n\\n    describe('Status \\\"Failure\\\"', () => {\\n        beforeEach(function () {\\n            this.element = createFixture(\\n                `<mc-upload status=\\\"failure\\\" file-type=\\\".nipkg\\\" upload-button-text=\\\"browse\\\" start-text=\\\"Drag and drop .nipkg or\\\" pending-text=\\\"Uploading...\\\" success-text=\\\"Success!\\\" failure-text=\\\"Failed to upload!\\\">\\n                    <mc-upload-failure-link name=\\\"upload-again\\\" text=\\\"Upload\\\" description=\\\"another web app\\\"></mc-upload-link>\\n                    <mc-upload-failure-link name=\\\"learn\\\" text=\\\"Learn\\\" description=\\\"about upload limitations\\\"></mc-upload-link>\\n                    <mc-upload-success-link name=\\\"view\\\" text=\\\"View\\\" description=\\\"this web app\\\"></mc-upload-link>\\n                </mc-upload>`);\\n        });\\n\\n        it('should show the default error message', function () {\\n            let formText = this.page.getFormText();\\n            let errorMessage = this.page.getErrorMessage();\\n\\n            expect(formText.textContent).toContain('Failed to upload!');\\n            expect(errorMessage.textContent).toBe('An error has ocurred while uploading.');\\n        });\\n\\n        it('should show the provided error message', function () {\\n            this.element.setAttribute('error-message', 'ERROR happened');\\n\\n            let errorMessage = this.page.getErrorMessage();\\n\\n            expect(errorMessage.textContent).toBe('ERROR happened');\\n        });\\n\\n        it('should render only the failure links', function () {\\n            let link = this.page.getLinks();\\n\\n            expect(link.length).toBe(2);\\n            expect(link[0].textContent).toBe('Upload another web app');\\n            expect(link[1].textContent).toBe('Learn about upload limitations');\\n        });\\n\\n        it('should fire upload-link-click event on item click', function () {\\n            let event = false;\\n            this.element.addEventListener('upload-link-click', function (e) {\\n                event = e;\\n            });\\n\\n            this.page.clickLink(1);\\n\\n            expect(event.detail.name).toBe('learn');\\n        });\\n    });\\n});\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}