{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/elements/upload/upload","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import uploadCss from './upload.css';\\n\\nimport { componentUtils } from '../common/component-utils.js';\\nimport { html } from '../../library/html-utils.js';\\n\\nconst styles = [uploadCss];\\n\\n(function () {\\n    class MCUpload extends HTMLElement {\\n        connectedCallback () {\\n            if (!this.shadowRoot) {\\n                this._render();\\n                this._attachEventHandlers();\\n            }\\n        }\\n\\n        get startText () {\\n            return this.getAttribute('start-text');\\n        }\\n\\n        set startText (value) {\\n            this.setAttribute('start-text', value);\\n        }\\n\\n        get pendingText () {\\n            return this.getAttribute('pending-text');\\n        }\\n\\n        set pendingText (value) {\\n            this.setAttribute('pending-text', value);\\n        }\\n\\n        get successText () {\\n            return this.getAttribute('success-text');\\n        }\\n\\n        set successText (value) {\\n            this.setAttribute('success-text', value);\\n        }\\n\\n        get failureText () {\\n            return this.getAttribute('failure-text');\\n        }\\n\\n        set failureText (value) {\\n            this.setAttribute('failure-text', value);\\n        }\\n\\n        get uploadButtonText () {\\n            return this.getAttribute('upload-button-text');\\n        }\\n\\n        set uploadButtonText (value) {\\n            this.setAttribute('upload-button-text', value);\\n        }\\n\\n        get status () {\\n            return this.getAttribute('status');\\n        }\\n\\n        set status (value) {\\n            this.setAttribute('status', value);\\n        }\\n\\n        get fileType () {\\n            return this.getAttribute('file-type');\\n        }\\n\\n        set fileType (value) {\\n            this.setAttribute('file-type', value);\\n        }\\n\\n        get errorMessage () {\\n            return this.getAttribute('error-message');\\n        }\\n\\n        set errorMessage (value) {\\n            this.setAttribute('error-message', value);\\n        }\\n\\n        static get observedAttributes () {\\n            return ['status', 'file-type', 'error-message'];\\n        }\\n\\n        attributeChangedCallback (name, oldValue, newValue) {\\n            if (!this.shadowRoot) {\\n                return;\\n            }\\n            switch (name) {\\n            case 'status': {\\n                this._renderStatus(newValue);\\n                break;\\n            }\\n            case 'file-type': {\\n                this._renderStatus(this.status);\\n                this._getUploadInput().setAttribute('accept', newValue);\\n                break;\\n            }\\n            case 'error-message': {\\n                this._renderStatus(this.status);\\n                break;\\n            }\\n            }\\n        }\\n\\n        _renderStatus (value) {\\n            switch (value) {\\n            case 'start': {\\n                this._setStatusStart();\\n                break;\\n            }\\n            case 'pending': {\\n                this._setStatusPending();\\n                break;\\n            }\\n            case 'success': {\\n                this._setStatusSuccess();\\n                break;\\n            }\\n            case 'failure': {\\n                this._setStatusFailure();\\n                break;\\n            }\\n            }\\n        }\\n\\n        _render () {\\n            const template = document.createElement('template');\\n            template.innerHTML =\\n                html`<div class='mc-upload-main'>\\n                    <div class='mc-upload-drop-area'>\\n                        <form class='mc-upload-drop-form'>\\n                            <div class='mc-upload-status'></div>\\n                            <input type='file' accept=\\\"${this.fileType || '*'}\\\" class='mc-upload-input'>\\n                            <div class='mc-upload-drop-form-text'></div>\\n                            <div class=\\\"mc-upload-links\\\"></div>\\n                        </form>\\n                    </div>\\n                </div>`;\\n\\n            this.attachShadow({ mode: 'open' });\\n\\n            componentUtils.addStylesToElement(this.shadowRoot, styles);\\n\\n            this.shadowRoot.appendChild(template.content.cloneNode(true));\\n            this._renderStatus(this.status || 'start');\\n        }\\n\\n        _clearLinks () {\\n            let parent = this._getLinkContainer();\\n            parent.innerHTML = '';\\n        }\\n\\n        _renderLinks (type) {\\n            this._clearLinks();\\n            let parent = this._getLinkContainer();\\n            let links = this._getLinks(type);\\n            for (let item of links) {\\n                let element = this._createLink(item);\\n                parent.appendChild(element);\\n            }\\n        }\\n\\n        _createLink (item) {\\n            let link = document.createElement('a');\\n            link.href = '';\\n            link.textContent = item.text;\\n            link.addEventListener('click', (e) => {\\n                this._preventDefaults(e);\\n                this.dispatchEvent(new CustomEvent('upload-link-click', { detail: item }));\\n            });\\n\\n            let container = document.createElement('p');\\n            container.id = item.name;\\n            container.appendChild(link);\\n            container.appendChild(document.createTextNode(' ' + item.description));\\n\\n            return container;\\n        }\\n\\n        _getLinks (type) {\\n            let links = [...this.querySelectorAll(type)];\\n            return links.map(function (item) {\\n                return {\\n                    name: item.getAttribute('name'),\\n                    text: item.getAttribute('text'),\\n                    description: item.getAttribute('description')\\n                };\\n            });\\n        }\\n\\n        _attachEventHandlers () {\\n            this._getUploadInput().addEventListener('change', (e) => this._handleFileUpload(e));\\n            this._getDropArea().addEventListener('drop', (e) => this._handleFileUpload(e));\\n\\n            let that = this;\\n            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\\n                that._getMain().addEventListener(eventName, (e) => that._preventDefaults(e));\\n            });\\n\\n            ['dragenter', 'dragover'].forEach(eventName => {\\n                that._getDropArea().addEventListener(eventName, (e) => that._highlight(e));\\n            });\\n\\n            ['dragleave', 'drop'].forEach(eventName => {\\n                that._getDropArea().addEventListener(eventName, (e) => that._unhighlight(e));\\n            });\\n        }\\n\\n        _preventDefaults (e) {\\n            e.preventDefault();\\n            e.stopPropagation();\\n        };\\n\\n        _highlight (e) {\\n            this._getDropArea().classList.add('highlight');\\n        };\\n\\n        _unhighlight (e) {\\n            // 'dragleave' is also fired when dragging between child elements of dropArea\\n            let dropArea = this._getDropArea();\\n            if (!dropArea.contains(e.fromElement)) {\\n                dropArea.classList.remove('highlight');\\n            }\\n        };\\n\\n        _getFileFromEvent (e) {\\n            let dataTransfer = e.dataTransfer; // drag-drop\\n            let target = e.target; // browse\\n\\n            if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {\\n                return dataTransfer.files[0];\\n            } else if (target && target.files && target.files.length) {\\n                return target.files[0];\\n            }\\n        }\\n\\n        _setStatusStart () {\\n            let statusDiv = this._getStatusDiv();\\n            statusDiv.classList.add('mc-upload-start');\\n            statusDiv.classList.remove('mc-upload-pending', 'mc-upload-success', 'mc-upload-failure');\\n\\n            let browse = document.createElement('a');\\n            browse.classList.add('mc-upload-drop-browse');\\n            browse.href = '';\\n            browse.textContent = this.uploadButtonText;\\n            browse.addEventListener('click', (e) => {\\n                this._preventDefaults(e);\\n                this._getUploadInput().click();\\n            });\\n\\n            let formText = this._getFormText();\\n            formText.innerHTML = '';\\n            formText.appendChild(document.createTextNode(this.startText));\\n            formText.appendChild(browse);\\n\\n            this._clearLinks();\\n        }\\n\\n        _setStatusPending () {\\n            let statusDiv = this._getStatusDiv();\\n            statusDiv.classList.add('mc-upload-pending');\\n            statusDiv.classList.remove('mc-upload-start', 'mc-upload-success', 'mc-upload-failure');\\n\\n            let formText = this._getFormText();\\n            formText.innerHTML = `<h3>${this.pendingText}</h3>`;\\n\\n            this._clearLinks();\\n        }\\n\\n        _setStatusSuccess () {\\n            let statusDiv = this._getStatusDiv();\\n            statusDiv.classList.add('mc-upload-success');\\n            statusDiv.classList.remove('mc-upload-start', 'mc-upload-pending', 'mc-upload-failure');\\n\\n            let formText = this._getFormText();\\n            formText.innerHTML = `<h3>${this.successText}</h3>`;\\n\\n            this._renderLinks('mc-upload-success-link');\\n        }\\n\\n        _setStatusFailure () {\\n            let statusDiv = this._getStatusDiv();\\n            statusDiv.classList.add('mc-upload-failure');\\n            statusDiv.classList.remove('mc-upload-start', 'mc-upload-pending', 'mc-upload-success');\\n\\n            let formText = this._getFormText();\\n            formText.innerHTML =\\n                `<h3>${this.failureText}</h3>\\n                 <h4 class=\\\"mc-upload-error-message\\\">${this.errorMessage || 'An error has ocurred while uploading.'}</h4>`;\\n\\n            this._renderLinks('mc-upload-failure-link');\\n        }\\n\\n        _handleFileUpload (e) {\\n            let file = this._getFileFromEvent(e);\\n            if (!file) {\\n                return;\\n            }\\n\\n            let detail = {\\n                file: file\\n            };\\n            this.dispatchEvent(new CustomEvent('upload-file-selected', { detail: detail }));\\n        }\\n\\n        _getFormText () {\\n            return this.shadowRoot.querySelector('.mc-upload-drop-form-text');\\n        }\\n\\n        _getStatusDiv () {\\n            return this.shadowRoot.querySelector('.mc-upload-status');\\n        }\\n\\n        _getUploadInput () {\\n            return this.shadowRoot.querySelector('.mc-upload-input');\\n        }\\n\\n        _getMain () {\\n            return this.shadowRoot.querySelector('.mc-upload-main');\\n        }\\n\\n        _getDropArea () {\\n            return this.shadowRoot.querySelector('.mc-upload-drop-area');\\n        }\\n\\n        _getLinkContainer () {\\n            return this.shadowRoot.querySelector('.mc-upload-links');\\n        }\\n    }\\n\\n    componentUtils.registerCustomElement('mc-upload', MCUpload);\\n})();\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}