{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/library/core/Page","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import { UserManager } from './UserManager.js';\\nimport { stringUtils } from './StringUtils.js';\\n\\nexport class Page {\\n    constructor (remoteConnection, i18n) {\\n        this._remoteConnection = remoteConnection;\\n        this._userManager = new UserManager(remoteConnection);\\n        this._i18n = i18n;\\n    }\\n\\n    init (element, activeName) {\\n        this._configureHeader(element, activeName);\\n        this._updateUserInfo(element);\\n        this._checkEntitlements();\\n        this._cookiesNotificationCheck();\\n    }\\n\\n    _configureHeader (element, activeName) {\\n        let config = {\\n            app: { name: 'systemLinkCloud', text: this._i18n.systemLinkCloud, href: this._makeAbsolute('/'), target: '_self' },\\n            categories: [\\n                { name: 'home', text: this._i18n.home, href: this._makeAbsolute('/'), target: '_self' },\\n                { name: 'dashboards', text: this._i18n.dashboards, href: this._makeAbsolute('/dashboardhosting'), target: '_self' },\\n                { name: 'webApps', text: this._i18n.webApps, href: this._makeAbsolute('/webapphosting'), target: '_self' },\\n                { name: 'security', text: this._i18n.security, href: this._makeAbsolute('/security'), target: '_self' }\\n            ],\\n            userMenu: [\\n                { name: 'account', text: this._i18n.account, href: this._makeAbsolute('/account'), target: '_blank' },\\n                { name: 'logout', text: this._i18n.logout, href: this._makeAbsolute('/saml2/logout'), target: '_self' }\\n            ],\\n            helpMenu: [\\n                { name: 'faq', text: this._i18n.faq, href: this._makeAbsolute('/faq'), target: '_blank' },\\n                { name: 'support', text: this._i18n.support, href: 'https://forums.ni.com/t5/SystemLink/bd-p/1020', target: '_blank' },\\n                { name: 'feedback', text: this._i18n.feedback, href: 'mailto:lvcloudoperations@ni.com', target: '_self' }\\n            ]\\n        };\\n        this._setActiveCategory(activeName, config.categories);\\n\\n        element.config = config;\\n        element.setAttribute('show-user-menu', 'false');\\n    }\\n\\n    _makeAbsolute (url) {\\n        return this._remoteConnection.hostname() + url;\\n    }\\n\\n    _setActiveCategory (name, categories) {\\n        for (let category of categories) {\\n            if (category.name === name) {\\n                category.active = true;\\n                break;\\n            }\\n        }\\n    }\\n\\n    _updateUserInfo (element) {\\n        this._userManager.getCurrentUser()\\n            .then(user => {\\n                this._setUserName(element, user);\\n                this._changeLoginState(user);\\n            });\\n    }\\n\\n    _checkEntitlements () {\\n        this._userManager.checkEntitlements()\\n            .then(result => this._entitlementsCheck(result));\\n    }\\n\\n    _entitlementsCheck (result) {\\n        if (result.status === 'NotifyUser') {\\n            this._displayExpirationDialog(result.days, result.evaluation);\\n        }\\n    }\\n\\n    _setUserName (element, user) {\\n        if (user) {\\n            element.setAttribute('show-user-menu', 'true');\\n            element.setAttribute('user-name', user.firstName + ' ' + user.lastName);\\n        }\\n    }\\n\\n    _changeLoginState (user) {\\n        let localUserId = JSON.parse(window.localStorage.getItem('userId')) || '';\\n        let userId = user ? user.id : '';\\n\\n        if (userId !== localUserId) {\\n            window.localStorage.setItem('userId', JSON.stringify(userId));\\n            if (user) {\\n                document.dispatchEvent(new CustomEvent('logged-in', { detail: user }));\\n            } else {\\n                document.dispatchEvent(new CustomEvent('logged-out'));\\n            }\\n        }\\n    }\\n\\n    _displayExpirationDialog (days, evaluation) {\\n        let content;\\n        if (evaluation) {\\n            let evaluationExpiryMessage = stringUtils.format(this._i18n.entitlement.evaluationExpiryMessage, { days: days });\\n            content = `<p>${evaluationExpiryMessage}</p>`;\\n        } else {\\n            let licenseExpiryMessage = stringUtils.format(this._i18n.entitlement.licenseExpiryMessage, { days: days });\\n            content = `<p>${licenseExpiryMessage}</p>`;\\n        }\\n\\n        if (days <= 7) {\\n            content += `${this._i18n.entitlement.text} <a target=\\\"_blank\\\" href=\\\"https://www.ni.com/en-us/shop/select/systemlink-cloud\\\">${this._i18n.entitlement.linkText}</a>`;\\n        }\\n\\n        return this._createInfoDialog(this._i18n.entitlement.header, content);\\n    }\\n\\n    _createInfoDialog (header, content) {\\n        let dialog = document.createElement('mc-dialog');\\n        dialog.setAttribute('header', header);\\n        dialog.setAttribute('text-right-button', this._i18n.entitlement.close);\\n        dialog.setAttribute('show-middle-button', 'false');\\n        dialog.innerHTML = `<span id=\\\"content\\\" slot=\\\"content\\\">${content}</span>`;\\n        dialog.addEventListener('right-button-click', () => {\\n            this._removeDialog(dialog);\\n        });\\n        dialog.addEventListener('modal-click', () => {\\n            this._removeDialog(dialog);\\n        });\\n\\n        document.body.appendChild(dialog);\\n        return dialog;\\n    }\\n\\n    _removeDialog (dialog) {\\n        if (dialog && dialog.parentNode) {\\n            dialog.parentNode.removeChild(dialog);\\n        }\\n    }\\n\\n    _cookiesNotificationCheck () {\\n        if (!localStorage.cookiesNotificationConfirmed) {\\n            let cookiesNotification = document.createElement('mc-cookies-notification');\\n            cookiesNotification.setAttribute('confirm-button-text', this._i18n.cookiesNotification.confirmButton);\\n            cookiesNotification.setAttribute('text', this._i18n.cookiesNotification.text);\\n            cookiesNotification.setAttribute('link-text', this._i18n.cookiesNotification.linkText);\\n            cookiesNotification.addEventListener('cookies-confirmed', () => {\\n                localStorage.cookiesNotificationConfirmed = true;\\n                cookiesNotification.remove();\\n            });\\n            document.body.appendChild(cookiesNotification);\\n        }\\n    }\\n}\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}