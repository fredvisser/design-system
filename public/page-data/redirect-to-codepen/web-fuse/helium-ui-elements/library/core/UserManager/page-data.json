{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/library/core/UserManager","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"export class UserManager {\\n    constructor (remoteConnection) {\\n        this._remoteConnection = remoteConnection;\\n    }\\n\\n    async getCurrentUser () {\\n        let response = await this._remoteConnection.get('userservices', '/user');\\n        if (response.status === 200) {\\n            return JSON.parse(response.responseText);\\n        }\\n    }\\n\\n    async checkEntitlements () {\\n        let state = this._getNotificationState() || {};\\n        if (this._checkedEntitlementsToday(state)) {\\n            return { status: 'OK' };\\n        }\\n\\n        let response = await this._remoteConnection.get('userservices', '/user/entitlements');\\n        if (response.status === 204) {\\n            return { status: 'NotAuthenticated' };\\n        }\\n\\n        let data = JSON.parse(response.responseText);\\n        let result = this._evaluateEntitlementsResponse(data, state);\\n\\n        this._storeNotificationState(result.period, result.expiresOn);\\n        return result;\\n    }\\n\\n    _evaluateEntitlementsResponse (entitlements, state) {\\n        if (!this._entitlementCanExpire(entitlements)) {\\n            return {\\n                status: 'OK',\\n                period: state.period,\\n                expiresOn: state.expiresOn\\n            };\\n        }\\n\\n        let expiresOn = entitlements.expiresOn;\\n        let days = this._getDaysBetween(new Date(entitlements.timestamp), new Date(expiresOn));\\n        let period = this._getExpirationPeriod(days);\\n        let evaluation = this._evaluationInProgress(entitlements.evaluation, entitlements.timestamp);\\n\\n        let status = this._shouldNotifyInPeriod(state, period, expiresOn)\\n            ? 'NotifyUser'\\n            : 'OK';\\n\\n        return {\\n            status: status,\\n            days: days,\\n            evaluation: evaluation,\\n            period: period,\\n            expiresOn: expiresOn\\n        };\\n    }\\n\\n    _entitlementCanExpire (entitlements) {\\n        return entitlements.entitled === 'yes' && entitlements.expiresOn;\\n    }\\n\\n    _evaluationInProgress (evaluation, timestamp) {\\n        return evaluation && evaluation.used && new Date(evaluation.expiresOn) >= new Date(timestamp);\\n    }\\n\\n    _getDaysBetween (start, end) {\\n        return Math.ceil((end - start) / 86400000);\\n    }\\n\\n    _getExpirationPeriod (days) {\\n        if (days > 28) {\\n            return 'more-than-one-month';\\n        } else if (days <= 28 && days > 21) {\\n            return 'less-than-one-month';\\n        } else if (days <= 21 && days > 7) {\\n            return 'less-than-three-weeks';\\n        } else {\\n            return 'only-' + days + '-days-left';\\n        }\\n    }\\n\\n    _shouldNotifyInPeriod (state, period, expiresOn) {\\n        if (period === 'more-than-one-month') {\\n            return false;\\n        }\\n        if (this._alreadyNotifiedInPeriod(state, period, expiresOn)) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    _alreadyNotifiedInPeriod (state, period, expiresOn) {\\n        return state.period === period && state.expiresOn === expiresOn;\\n    }\\n\\n    _checkedEntitlementsToday (state) {\\n        return state.lastCheck === new Date().toDateString();\\n    }\\n\\n    _storeNotificationState (period, expiresOn) {\\n        localStorage.setItem(\\n            'mc-launcher-entitlements-notification',\\n            JSON.stringify({\\n                lastCheck: new Date().toDateString(),\\n                period: period,\\n                expiresOn: expiresOn\\n            })\\n        );\\n    }\\n\\n    _getNotificationState () {\\n        let state = localStorage.getItem('mc-launcher-entitlements-notification');\\n        if (state) {\\n            return JSON.parse(state);\\n        }\\n    }\\n}\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}