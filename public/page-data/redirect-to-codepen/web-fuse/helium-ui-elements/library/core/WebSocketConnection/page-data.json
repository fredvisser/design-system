{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/library/core/WebSocketConnection","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import { MCError } from './MCError.js';\\n\\nexport class WebSocketConnection {\\n    constructor (serviceUrls, path, queryString) {\\n        this._serviceUrls = serviceUrls;\\n        this._path = path;\\n        this._queryString = this._toQueryString(queryString);\\n        this._unhandledError = new MCError({\\n            status: -1,\\n            responseText: JSON.stringify({ code: 'NoServerConnection', errors: ['not connected to server'] })\\n        });\\n        this._messageQueue = [];\\n    }\\n\\n    _connect () {\\n        if (!this._ws) {\\n            let ws = new WebSocket(this._serviceUrls.getURL() + this._path + this._queryString);\\n            ws.onopen = (e) => {\\n                while (this._messageQueue.length > 0) {\\n                    if (ws.readyState !== 1) {\\n                        break;\\n                    }\\n                    ws.send(JSON.stringify(this._messageQueue.shift()));\\n                }\\n            };\\n            ws.onerror = (error) => {\\n                console.error(error);\\n            };\\n            ws.onmessage = (message) => {\\n                if (this.receive) {\\n                    this.receive(JSON.parse(message.data));\\n                }\\n            };\\n            ws.onclose = (e) => {\\n                if (this.onclose) {\\n                    this.onclose();\\n                }\\n            };\\n            this._ws = ws;\\n        }\\n        return this._ws;\\n    }\\n\\n    reconnect () {\\n        delete this._ws;\\n    }\\n\\n    send (json) {\\n        let ws = this._connect();\\n        if (ws.readyState === 1) {\\n            ws.send(JSON.stringify(json));\\n        } else {\\n            this._messageQueue.push(json);\\n        }\\n    }\\n\\n    _toQueryString (query) {\\n        let queryString = Object.keys(query)\\n            .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(query[key]))\\n            .join('&');\\n        if (queryString !== '') {\\n            queryString = '?' + queryString;\\n        }\\n        return queryString;\\n    }\\n}\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}