{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/library/core/test/router-test","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import { Router } from '../Router.js';\\n\\ndescribe('Router', () => {\\n    describe('Basic Navigation', () => {\\n        it('should fire navigation event if the current location is different to the initialized location', function () {\\n            let navigationEvent = false;\\n\\n            new Router({ pathname: '/data/files' }, '/data/tags')\\n                .route(/files/, () => {\\n                    navigationEvent = true;\\n                })\\n                .listen();\\n\\n            expect(navigationEvent).toBeTruthy();\\n        });\\n\\n        it('should NOT fire navigation event if the current location is the initialized location', function () {\\n            let navigationEvent = false;\\n\\n            new Router({ pathname: '/data/tags' }, '/data/tags')\\n                .route(/.*/, () => {\\n                    navigationEvent = true;\\n                })\\n                .listen();\\n\\n            expect(navigationEvent).toBeFalsy();\\n        });\\n\\n        it('navigateTo should fire event', function () {\\n            let navigationEvent = false;\\n\\n            let router = new Router({ pathname: '/data/tags' }, '/data/tags')\\n                .route(/.*/, () => {\\n                    navigationEvent = true;\\n                });\\n\\n            router.navigateTo('/data/files');\\n\\n            expect(navigationEvent).toBeTruthy();\\n        });\\n\\n        it('navigateTo should NOT fire event if path has not changed', function () {\\n            let navigationEvent = false;\\n\\n            let router = new Router({ pathname: '/data/tags' }, '/data/tags')\\n                .route(/.*/, () => {\\n                    navigationEvent = true;\\n                });\\n\\n            router.navigateTo('/data/tags');\\n\\n            expect(navigationEvent).toBeFalsy();\\n        });\\n\\n        it('navigateTo should fire event of first matching route', function () {\\n            let navigationEvent = false;\\n\\n            let router = new Router({ pathname: '/data/tags' }, '/data/tags')\\n                .route(/not matching/, () => {\\n                })\\n                .route(/data\\\\/files/, () => {\\n                    navigationEvent = true;\\n                });\\n\\n            router.navigateTo('/data/files');\\n\\n            expect(navigationEvent).toBeTruthy();\\n        });\\n\\n        it('navigateTo should fire event with match details', function () {\\n            let matchedRoute = false;\\n\\n            let router = new Router({ pathname: '/data/tags' }, '/data/tags')\\n                .route(/data\\\\/files\\\\/(.*)/, (e) => {\\n                    matchedRoute = e[0];\\n                });\\n\\n            router.navigateTo('/data/files/1234');\\n\\n            expect(matchedRoute).toBe('1234');\\n        });\\n    });\\n\\n    describe('History', () => {\\n        async function clickBrowserButton (click) {\\n            let promise = new Promise((resolve, reject) => {\\n                window.addEventListener('popstate', function (e) {\\n                    resolve();\\n                });\\n            });\\n            click();\\n            return promise;\\n        }\\n\\n        async function clickBrowserBackButton () {\\n            return clickBrowserButton(() => window.history.back());\\n        }\\n\\n        async function clickBrowserForwardButton () {\\n            return clickBrowserButton(() => window.history.forward());\\n        }\\n\\n        it('should store history on navigation', async function () {\\n            let backNavigationEvent = false;\\n\\n            let router = new Router({ pathname: '/data/files' }, '/data/tags')\\n                .route(/data\\\\/files/, (e) => {\\n                    backNavigationEvent = e;\\n                })\\n                .listen();\\n\\n            router.navigateTo('/data/files');\\n            router.navigateTo('/data/storage');\\n\\n            await clickBrowserBackButton();\\n\\n            expect(backNavigationEvent).toBeTruthy();\\n        });\\n\\n        it('should store multiple history entries', async function () {\\n            let matchedRoute = false;\\n\\n            let router = new Router({ pathname: '/data/files' }, '/data/tags')\\n                .route(/(.*)/, (e) => {\\n                    matchedRoute = e[0];\\n                })\\n                .listen();\\n\\n            router.navigateTo('/data/files');\\n            router.navigateTo('/data/storage');\\n            router.navigateTo('/data/files');\\n\\n            await clickBrowserBackButton();\\n            expect(matchedRoute).toBe('/data/storage');\\n\\n            await clickBrowserBackButton();\\n            expect(matchedRoute).toBeTruthy('/data/files');\\n\\n            await clickBrowserForwardButton();\\n            expect(matchedRoute).toBe('/data/storage');\\n        });\\n    });\\n});\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}