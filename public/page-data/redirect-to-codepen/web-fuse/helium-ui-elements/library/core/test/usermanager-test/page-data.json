{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/library/core/test/usermanager-test","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import { UserManager } from '../UserManager.js';\\nimport { RemoteConnectionFake } from './remote-connection-fake.js';\\n\\ndescribe('UserManager', () => {\\n    describe('getCurrentUser', () => {\\n        it('should call /user', async function () {\\n            let remoteConnection = new RemoteConnectionFake({\\n                get: { status: 204 }\\n            });\\n\\n            await new UserManager(remoteConnection).getCurrentUser();\\n\\n            expect(remoteConnection.path).toBe('/user');\\n        });\\n\\n        it('should parse logged-in user response from /user', async function () {\\n            let remoteConnection = new RemoteConnectionFake({\\n                get: {\\n                    status: 200,\\n                    responseText: '{\\\"firstName\\\":\\\"Thomas\\\",\\\"lastName\\\":\\\"Schmitt\\\",\\\"email\\\":\\\"thomas.schmitt@ni.com\\\",\\\"id\\\":\\\"1f52b868-f3a0-43b1-80f6-b79cf1adccfe\\\"}'\\n                }\\n            });\\n\\n            let user = await new UserManager(remoteConnection).getCurrentUser();\\n\\n            expect(user.firstName).toBe('Thomas');\\n            expect(user.lastName).toBe('Schmitt');\\n            expect(user.email).toBe('thomas.schmitt@ni.com');\\n            expect(user.id).toBe('1f52b868-f3a0-43b1-80f6-b79cf1adccfe');\\n        });\\n\\n        it('should parse empty response for anonymous users from /user', async function () {\\n            let remoteConnection = new RemoteConnectionFake({\\n                get: { status: 204 }\\n            });\\n\\n            let user = await new UserManager(remoteConnection).getCurrentUser();\\n\\n            expect(user).toBeUndefined();\\n        });\\n    });\\n\\n    describe('checkEntitlements', () => {\\n        beforeEach(function () {\\n            localStorage.removeItem('mc-launcher-entitlements-notification');\\n        });\\n\\n        it('should return OK if it has been checked today already', async function () {\\n            localStorage.setItem(\\n                'mc-launcher-entitlements-notification',\\n                JSON.stringify({\\n                    lastCheck: new Date().toDateString(),\\n                    period: 'more-than-one-month',\\n                    expiresOn: new Date()\\n                })\\n            );\\n\\n            let result = await new UserManager().checkEntitlements();\\n\\n            expect(result.status).toBe('OK');\\n        });\\n\\n        it('should return NotAuthenticated if user is not logged-in', async function () {\\n            let remoteConnection = new RemoteConnectionFake({\\n                get: { status: 204 }\\n            });\\n\\n            let result = await new UserManager(remoteConnection).checkEntitlements();\\n\\n            expect(result.status).toBe('NotAuthenticated');\\n        });\\n\\n        it('should return OK if entitlement cannot expire', async function () {\\n            let remoteConnection = new RemoteConnectionFake({\\n                get: {\\n                    status: 200,\\n                    responseText: JSON.stringify({\\n                        expiresOn: null,\\n                        evaluation: { used: false, expiresOn: null },\\n                        entitled: 'yes',\\n                        timestamp: '2019-03-04T06:59:36.953Z'\\n                    })\\n                }\\n            });\\n\\n            let result = await new UserManager(remoteConnection).checkEntitlements();\\n\\n            expect(result.status).toBe('OK');\\n        });\\n\\n        it('should return OK if entitlement expires in more than a month', async function () {\\n            let remoteConnection = new RemoteConnectionFake({\\n                get: {\\n                    status: 200,\\n                    responseText: JSON.stringify({\\n                        expiresOn: '2019-09-03T17:29:16.983Z',\\n                        evaluation: { used: false, expiresOn: null },\\n                        entitled: 'yes',\\n                        timestamp: '2019-03-04T06:59:36.953Z'\\n                    })\\n                }\\n            });\\n\\n            let result = await new UserManager(remoteConnection).checkEntitlements();\\n\\n            expect(result.status).toBe('OK');\\n        });\\n\\n        it('should return NotifyUser if entitlement expires in less than a month', async function () {\\n            let remoteConnection = new RemoteConnectionFake({\\n                get: {\\n                    status: 200,\\n                    responseText: JSON.stringify({\\n                        expiresOn: '2019-03-27T12:10:22.123Z',\\n                        evaluation: { used: false, expiresOn: null },\\n                        entitled: 'yes',\\n                        timestamp: '2019-03-04T06:59:36.953Z'\\n                    })\\n                }\\n            });\\n\\n            let result = await new UserManager(remoteConnection).checkEntitlements();\\n\\n            expect(result.status).toBe('NotifyUser');\\n            expect(result.days).toBe(24);\\n            expect(result.evaluation).toBeFalsy();\\n            expect(result.period).toBe('less-than-one-month');\\n        });\\n\\n        it('should return NotifyUser if entitlement expires in less than three weeks', async function () {\\n            let remoteConnection = new RemoteConnectionFake({\\n                get: {\\n                    status: 200,\\n                    responseText: JSON.stringify({\\n                        expiresOn: '2019-03-21T12:10:22.123Z',\\n                        evaluation: { used: false, expiresOn: null },\\n                        entitled: 'yes',\\n                        timestamp: '2019-03-04T06:59:36.953Z'\\n                    })\\n                }\\n            });\\n\\n            let result = await new UserManager(remoteConnection).checkEntitlements();\\n\\n            expect(result.status).toBe('NotifyUser');\\n            expect(result.days).toBe(18);\\n            expect(result.evaluation).toBeFalsy();\\n            expect(result.period).toBe('less-than-three-weeks');\\n        });\\n\\n        it('should return NotifyUser if entitlement expires in less than a week', async function () {\\n            let remoteConnection = new RemoteConnectionFake({\\n                get: {\\n                    status: 200,\\n                    responseText: JSON.stringify({\\n                        expiresOn: '2019-03-06T12:10:22.123Z',\\n                        evaluation: { used: false, expiresOn: null },\\n                        entitled: 'yes',\\n                        timestamp: '2019-03-04T06:59:36.953Z'\\n                    })\\n                }\\n            });\\n\\n            let result = await new UserManager(remoteConnection).checkEntitlements();\\n\\n            expect(result.status).toBe('NotifyUser');\\n            expect(result.days).toBe(3);\\n            expect(result.evaluation).toBeFalsy();\\n            expect(result.period).toBe('only-3-days-left');\\n        });\\n\\n        it('should return ok if entitlements have been already checked', async function () {\\n            let remoteConnection = new RemoteConnectionFake({\\n                get: {\\n                    status: 200,\\n                    responseText: JSON.stringify({\\n                        expiresOn: '2019-03-06T12:10:22.123Z',\\n                        evaluation: { used: false, expiresOn: null },\\n                        entitled: 'yes',\\n                        timestamp: '2019-03-04T06:59:36.953Z'\\n                    })\\n                }\\n            });\\n\\n            await new UserManager(remoteConnection).checkEntitlements();\\n\\n            let result = await new UserManager(remoteConnection).checkEntitlements();\\n\\n            expect(result.status).toBe('OK');\\n        });\\n\\n        it('should return OK if evaluation expires in more than a month', async function () {\\n            let remoteConnection = new RemoteConnectionFake({\\n                get: {\\n                    status: 200,\\n                    responseText: JSON.stringify({\\n                        expiresOn: '2019-09-03T17:29:16.983Z',\\n                        evaluation: { used: true, inProgres: true, expiresOn: '2019-09-03T17:29:16.983Z' },\\n                        entitled: 'yes',\\n                        timestamp: '2019-03-04T06:59:36.953Z'\\n                    })\\n                }\\n            });\\n\\n            let result = await new UserManager(remoteConnection).checkEntitlements();\\n\\n            expect(result.status).toBe('OK');\\n        });\\n\\n        it('should return NotifyUser if evaluation expires in less than a month', async function () {\\n            let remoteConnection = new RemoteConnectionFake({\\n                get: {\\n                    status: 200,\\n                    responseText: JSON.stringify({\\n                        expiresOn: '2019-03-27T12:10:22.123Z',\\n                        evaluation: { used: true, inProgres: true, expiresOn: '2019-03-27T12:10:22.123Z' },\\n                        entitled: 'yes',\\n                        timestamp: '2019-03-04T06:59:36.953Z'\\n                    })\\n                }\\n            });\\n\\n            let result = await new UserManager(remoteConnection).checkEntitlements();\\n\\n            expect(result.status).toBe('NotifyUser');\\n            expect(result.days).toBe(24);\\n            expect(result.evaluation).toBeTruthy();\\n            expect(result.period).toBe('less-than-one-month');\\n        });\\n\\n        it('should return NotifyUser if evaluation expires in less than three weeks', async function () {\\n            let remoteConnection = new RemoteConnectionFake({\\n                get: {\\n                    status: 200,\\n                    responseText: JSON.stringify({\\n                        expiresOn: '2019-03-21T12:10:22.123Z',\\n                        evaluation: { used: true, inProgres: true, expiresOn: '2019-03-21T12:10:22.123Z' },\\n                        entitled: 'yes',\\n                        timestamp: '2019-03-04T06:59:36.953Z'\\n                    })\\n                }\\n            });\\n\\n            let result = await new UserManager(remoteConnection).checkEntitlements();\\n\\n            expect(result.status).toBe('NotifyUser');\\n            expect(result.days).toBe(18);\\n            expect(result.evaluation).toBeTruthy();\\n            expect(result.period).toBe('less-than-three-weeks');\\n        });\\n\\n        it('should return NotifyUser if evaluation expires in less than a week', async function () {\\n            let remoteConnection = new RemoteConnectionFake({\\n                get: {\\n                    status: 200,\\n                    responseText: JSON.stringify({\\n                        expiresOn: '2019-03-06T12:10:22.123Z',\\n                        evaluation: { used: true, inProgres: true, expiresOn: '2019-03-06T12:10:22.123Z' },\\n                        entitled: 'yes',\\n                        timestamp: '2019-03-04T06:59:36.953Z'\\n                    })\\n                }\\n            });\\n\\n            let result = await new UserManager(remoteConnection).checkEntitlements();\\n\\n            expect(result.status).toBe('NotifyUser');\\n            expect(result.days).toBe(3);\\n            expect(result.evaluation).toBeTruthy();\\n            expect(result.period).toBe('only-3-days-left');\\n        });\\n    });\\n});\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}