{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/library/fileviewer/FileViewerViewModel","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import { eventUtils } from '../core/EventUtils.js';\\n\\nexport class FileViewerViewModel {\\n    constructor (remoteConnection, i18n) {\\n        this._remoteConnection = remoteConnection;\\n        this._i18n = i18n;\\n    }\\n\\n    async update () {\\n        try {\\n            await this._loadData(this._element, this._search);\\n        } catch (error) {\\n            this._showError(this._i18n.errorDialog.header.fileData);\\n        }\\n    }\\n\\n    async init (element) {\\n        this._element = element;\\n        this._element.i18n = this._i18n;\\n\\n        let debouncedUpdate = eventUtils.debounce(200, async () => {\\n            await this.update();\\n        });\\n        element.addEventListener('file-data', async (e) => {\\n            this._search = e.detail;\\n            if (e.detail.trigger === 'search') {\\n                debouncedUpdate();\\n            } else {\\n                await this.update();\\n            }\\n        });\\n\\n        element.addEventListener('file-upload', async (e) => {\\n            try {\\n                await this._uploadFile(e.detail.data, e.detail.resolve, e.detail.reject);\\n                await this.update();\\n            } catch (error) {\\n                this._showError(this._i18n.errorDialog.header.fileUpload);\\n            }\\n        });\\n        element.addEventListener('file-download', async (e) => {\\n            try {\\n                await this._downloadFiles(e.detail.files);\\n            } catch (error) {\\n                this._showError(this._i18n.errorDialog.header.fileDownload);\\n            }\\n        });\\n        element.addEventListener('file-delete', async (e) => {\\n            try {\\n                await this._deleteFiles(e.detail.files);\\n                await this.update();\\n            } catch (error) {\\n                this._showError(this._i18n.errorDialog.header.fileDelete);\\n            }\\n        });\\n        element.addEventListener('file-update', async (e) => {\\n            try {\\n                await this._updateFile(e.detail.file, e.detail.resolve, e.detail.reject);\\n                await this.update();\\n            } catch (error) {\\n                this._showError(this._i18n.errorDialog.header.fileUpdate);\\n            }\\n        });\\n\\n        this._search = {\\n            page: 1,\\n            pageSize: 20\\n        };\\n    }\\n\\n    async _uploadFile (data, resolve, reject) {\\n        try {\\n            let formData = new FormData();\\n            formData.append('file', data);\\n            await this._remoteConnection.postfile('fileingestionservices', `/nifile/v1/service-groups/Default/upload-files`, formData);\\n            resolve('OK');\\n        } catch (err) {\\n            reject(err);\\n        }\\n    }\\n\\n    async _downloadFiles (files) {\\n        for (let file of files) {\\n            let fileName = file.properties['Name'] || 'file';\\n            let data = await this._getFileContent(file);\\n            this._downloadFile(fileName, data);\\n        }\\n    }\\n\\n    async _downloadFile (fileName, data) {\\n        let downloadLink = document.createElement('a');\\n        downloadLink.href = window.URL.createObjectURL(new Blob([data], { type: 'application/octet-stream' }));\\n        downloadLink.download = fileName;\\n\\n        this._element.appendChild(downloadLink);\\n        downloadLink.click();\\n        this._element.removeChild(downloadLink);\\n    }\\n\\n    async _getFileContent (file) {\\n        let response = await this._remoteConnection.getfile('fileingestionservices', `/nifile/v1/service-groups/Default/files/${file.id}/data?inline=true`);\\n        return response.body;\\n    }\\n\\n    async _deleteFiles (files) {\\n        let request = {\\n            ids: files.map((f) => f.id)\\n        };\\n        await this._remoteConnection.post('fileingestionservices', '/nifile/v1/service-groups/Default/delete-files', JSON.stringify(request));\\n    }\\n\\n    async _updateFile (file) {\\n        let request = {\\n            replaceExisting: true,\\n            properties: file.properties\\n        };\\n        await this._remoteConnection.post('fileingestionservices', `/nifile/v1/service-groups/Default/files/${file.id}/update-metadata`, JSON.stringify(request));\\n    }\\n\\n    async _loadData (element, search) {\\n        let skip = (search.page - 1) * search.pageSize;\\n        let take = search.pageSize;\\n\\n        let request = this._buildQueryRequest(search.filters, search.searchTerm);\\n\\n        let response = await this._remoteConnection.post('fileingestionservices', `/nifile/v1/service-groups/Default/query-files?skip=${skip}&take=${take}`, JSON.stringify(request));\\n        let data = JSON.parse(response.responseText);\\n\\n        let files = data.availableFiles;\\n        if (search.sortBy) {\\n            this._sortData(files, search.sortBy, search.sortOrder || 'asc');\\n        }\\n        element.data = {\\n            items: files,\\n            totalCount: data.totalCount\\n        };\\n    }\\n\\n    _buildQueryRequest (filters, searchTerm) {\\n        let propertiesQuery = [];\\n        let extensionQuery;\\n        for (let filter of filters || []) {\\n            switch (filter.name) {\\n            case 'name':\\n                propertiesQuery.push({ key: 'Name', operation: 'CONTAINS', value: filter.value });\\n                break;\\n            case 'extension':\\n                extensionQuery = { operation: 'EQUAL', value: filter.value };\\n                break;\\n            case 'properties':\\n                propertiesQuery.push({ key: filter.key, operation: 'CONTAINS', value: filter.value });\\n                break;\\n            }\\n        }\\n\\n        if (searchTerm) {\\n            propertiesQuery.push({ key: 'Name', operation: 'CONTAINS', value: searchTerm });\\n        }\\n\\n        let request = {};\\n        if (propertiesQuery.length > 0) {\\n            request['propertiesQuery'] = propertiesQuery;\\n        }\\n        if (extensionQuery) {\\n            request['extensionQuery'] = extensionQuery;\\n        }\\n        return request;\\n    }\\n\\n    _sortData (files, sortBy, sortOrder) {\\n        files.sort((a, b) => {\\n            let aValue = this._getSortByValue(a, sortBy) || '';\\n            let bValue = this._getSortByValue(b, sortBy) || '';\\n            let result = aValue.localeCompare(bValue, undefined, { numeric: true, sensitivity: 'base' });\\n            return sortOrder === 'desc' ? -result : result;\\n        });\\n    }\\n\\n    _getSortByValue (file, sortBy) {\\n        switch (sortBy) {\\n        case 'name':\\n            return file.properties['Name'];\\n        case 'extension':\\n            return this._getExtension(file.properties['Name']);\\n        case 'size':\\n            return file.size.toString();\\n        case 'created':\\n            return file.created;\\n        }\\n    }\\n\\n    _getExtension (name) {\\n        if (!name) {\\n            return '';\\n        }\\n        let index = name.lastIndexOf('.');\\n        if (index === -1) {\\n            return '';\\n        }\\n        return name.substr(index + 1);\\n    }\\n\\n    _showError (errorHeader) {\\n        this._element.showErrorDialog(errorHeader);\\n    }\\n}\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}