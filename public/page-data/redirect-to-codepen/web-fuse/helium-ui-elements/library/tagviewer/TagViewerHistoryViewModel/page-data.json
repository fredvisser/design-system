{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/library/tagviewer/TagViewerHistoryViewModel","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"export class TagViewerHistoryViewModel {\\n    constructor (webSocketConnection) {\\n        this._webSocketConnection = webSocketConnection;\\n    }\\n\\n    async init (element, paths) {\\n        this._element = element;\\n        this._paths = paths;\\n    }\\n\\n    async update () {\\n        await this._loadData(this._element, this._paths);\\n    }\\n\\n    async _loadData (element, paths) {\\n        this._webSocketConnection.receive = (message) => {\\n            if (message.action === 'TagHistorianAsyncQueryDataRoutedMessage') {\\n                this._bindData(element, paths, message.tagHistorianAsyncValues.values);\\n                this._subscribe(paths);\\n            } else if (message.action === 'TagHistorianAsyncValuesProcessedRoutedMessage') {\\n                element.data = this._addNewDataPoints(element.data, message.values);\\n            }\\n        };\\n        this._webSocketConnection.onclose = () => {\\n            this._webSocketConnection.reconnect();\\n            this._subscribe(paths);\\n        };\\n        this._queryHistory(paths);\\n    }\\n\\n    _queryHistory (paths) {\\n        let json = {\\n            'action': 'TagHistorianAsyncQueryRequest',\\n            'queries': [{\\n                'decimation': 1000,\\n                'paths': paths,\\n                'sortOrder': 'ASCENDING',\\n                'startTime': '2000-01-01T00:00:00Z',\\n                'endTime': '2099-12-31T23:59:59Z'\\n            }]\\n        };\\n        this._webSocketConnection.send(json);\\n    }\\n\\n    _subscribe (paths) {\\n        let json = {\\n            'action': 'TagHistorianAsyncSubscribeRequest',\\n            'searchPaths': paths\\n        };\\n        this._webSocketConnection.send(json);\\n    }\\n\\n    _bindData (element, paths, values) {\\n        let data = this._getDataPoints(paths, values);\\n        element.data = data;\\n    }\\n\\n    _addNewDataPoints (data, newValues) {\\n        for (let value of newValues) {\\n            let series = this._getSeries(data, value.path);\\n            let dataPoint = this._convertDataPoint(value);\\n            series.Timestamp.push(dataPoint.timestamp);\\n            series.Values.push(dataPoint.value);\\n        }\\n        return data;\\n    }\\n\\n    _getSeries (data, path) {\\n        for (let entry of data) {\\n            if (entry.path === path) {\\n                return entry;\\n            }\\n        }\\n    }\\n\\n    _getDataPoints (paths, values) {\\n        let result = [];\\n        for (let path of paths) {\\n            let series = this._convertDataPoints(path, values[path]);\\n            result.push(series);\\n        }\\n        return result;\\n    }\\n\\n    _convertDataPoints (path, values) {\\n        let series = { path: path, Timestamp: [], Values: [] };\\n        for (let value of values) {\\n            let dataPoint = this._convertDataPoint(value);\\n            series.Timestamp.push(dataPoint.timestamp);\\n            series.Values.push(dataPoint.value);\\n        }\\n        return series;\\n    }\\n\\n    _convertDataPoint (value) {\\n        return { timestamp: new Date(value.timestamp), value: value.value };\\n    }\\n}\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}