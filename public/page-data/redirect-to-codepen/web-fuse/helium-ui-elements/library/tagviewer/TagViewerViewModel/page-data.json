{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/helium-ui-elements/library/tagviewer/TagViewerViewModel","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"import { eventUtils } from '../core/EventUtils.js';\\n\\nexport class TagViewerViewModel {\\n    constructor (remoteConnection, i18n) {\\n        this._remoteConnection = remoteConnection;\\n        this._i18n = i18n;\\n    }\\n\\n    async update () {\\n        try {\\n            await this._loadData(this._element, this._search);\\n        } catch (error) {\\n            this._showError(this._i18n.errorDialog.header.tagData);\\n        }\\n    }\\n\\n    async init (element) {\\n        this._element = element;\\n        this._element.i18n = this._i18n;\\n\\n        let debouncedUpdate = eventUtils.debounce(200, async () => {\\n            await this.update();\\n        });\\n        element.addEventListener('tag-data', async (e) => {\\n            this._search = e.detail;\\n            if (e.detail.trigger === 'search') {\\n                debouncedUpdate();\\n            } else {\\n                await this.update();\\n            }\\n        });\\n\\n        element.addEventListener('tag-create', async (e) => {\\n            try {\\n                await this._createTag(e.detail.tag);\\n                await this.update();\\n            } catch (error) {\\n                this._showError(this._i18n.errorDialog.header.tagCreate);\\n            }\\n        });\\n\\n        element.addEventListener('tag-delete', async (e) => {\\n            try {\\n                await this._deleteTags(e.detail.tags);\\n                await this.update();\\n            } catch (error) {\\n                this._showError(this._i18n.errorDialog.header.tagDelete);\\n            }\\n        });\\n\\n        element.addEventListener('tag-reset-aggregates', async (e) => {\\n            try {\\n                await this._resetAggregates(e.detail.tags);\\n                await this.update();\\n            } catch (error) {\\n                this._showError(this._i18n.errorDialog.header.tagResetAggregates);\\n            }\\n        });\\n\\n        element.addEventListener('tag-update-values', async (e) => {\\n            try {\\n                await this._updateValues(e.detail.tags, e.detail.value);\\n                await this.update();\\n            } catch (error) {\\n                this._showError(this._i18n.errorDialog.header.tagUpdateValues);\\n            }\\n        });\\n\\n        element.addEventListener('tag-update', async (e) => {\\n            try {\\n                await this._updateTags(e.detail.tags);\\n                await this.update();\\n            } catch (error) {\\n                this._showError(this._i18n.errorDialog.header.tagUpdate);\\n            }\\n        });\\n\\n        element.addEventListener('tag-history', async (e) => {\\n            try {\\n                await this._showHistory(e.detail.tags);\\n            } catch (error) {\\n                this._showError(this._i18n.errorDialog.header.tagHistory);\\n            }\\n        });\\n\\n        element.addEventListener('tag-export-details', async (e) => {\\n            try {\\n                await this._exportDetails(e.detail.tags);\\n            } catch (error) {\\n                this._showError(this._i18n.errorDialog.header.tagExportDetails);\\n            }\\n        });\\n\\n        element.addEventListener('tag-export-history', async (e) => {\\n            try {\\n                await this._exportHistory(e.detail.tags, e.detail.params);\\n            } catch (error) {\\n                this._showError(this._i18n.errorDialog.header.tagExportHistory);\\n            }\\n        });\\n\\n        this._search = {\\n            page: 1,\\n            pageSize: 20\\n        };\\n    }\\n\\n    async _createTag (tag) {\\n        await this._remoteConnection.post('tagservices', '/nitag/v2/tags', JSON.stringify(tag));\\n    }\\n\\n    async _deleteTags (tags) {\\n        let selection = await this._createSelection(tags);\\n        await this._remoteConnection.delete('tagservices', `/nitag/v2/selections/${selection.id}/tags`);\\n    }\\n\\n    async _showHistory (tags) {\\n        let eventData = {\\n            target: 'tags-history',\\n            tags: tags\\n        };\\n        if (this.onNavigate) {\\n            this.onNavigate(new CustomEvent('navigate', { detail: eventData }));\\n        }\\n    }\\n\\n    async _resetAggregates (tags) {\\n        let selection = await this._createSelection(tags);\\n        await this._remoteConnection.post('tagservices', `/nitag/v2/selections/${selection.id}/reset-aggregates`, '');\\n    }\\n\\n    async _updateTags (tags) {\\n        let request = {\\n            tags: tags,\\n            merge: false\\n        };\\n        await this._remoteConnection.post('tagservices', `/nitag/v2/update-tags`, JSON.stringify(request));\\n    }\\n\\n    async _updateValues (tags, value) {\\n        let request = tags.map(function (t) {\\n            return {\\n                path: t.path,\\n                updates: [\\n                    { value: { value: value, type: t.type } }\\n                ]\\n            };\\n        });\\n        await this._remoteConnection.post('tagservices', '/nitag/v2/update-current-values', JSON.stringify(request));\\n    }\\n\\n    async _createSelection (tags) {\\n        let paths = tags.map(function (t) { return t.path; });\\n        let request = {\\n            searchPaths: paths,\\n            inactivityTimeout: 60\\n        };\\n        let response = await this._remoteConnection.post('tagservices', '/nitag/v2/selections', JSON.stringify(request));\\n        return JSON.parse(response.responseText);\\n    }\\n\\n    _download (fileName, content) {\\n        let element = document.createElement('a');\\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));\\n        element.setAttribute('download', fileName);\\n\\n        element.style.display = 'none';\\n        document.body.appendChild(element);\\n\\n        element.click();\\n\\n        document.body.removeChild(element);\\n    }\\n\\n    async _exportHistory (tags, params) {\\n        let request = {\\n            paths: tags.map(function (t) { return t.path; }),\\n            startTime: params.startTime,\\n            endTime: params.endTime,\\n            take: params.take,\\n            sortOrder: 'ascending',\\n            responseFormat: 'csv'\\n        };\\n\\n        let response = await this._remoteConnection.post('taghistorian', '/nitaghistorian/v1/tags/query-history', JSON.stringify(request));\\n        return this._download('TagHistory.csv', response.responseText);\\n    }\\n\\n    async _exportDetails (tags) {\\n        let selection = await this._createSelection(tags);\\n        let response = await this._remoteConnection.get('tagservices', `/nitag/v2/selections/${selection.id}/tags-with-values?responseFormat=csv`);\\n        return this._download('TagsDetails.csv', response.responseText);\\n    }\\n\\n    async _loadData (element, search) {\\n        let skip = (search.page - 1) * search.pageSize;\\n        let take = search.pageSize;\\n\\n        let filters = search.filters || [];\\n        if (search.searchTerm) {\\n            filters.push({ name: 'path', value: '*' + search.searchTerm + '*' });\\n        }\\n\\n        let queryString = `?skip=${skip}&take=${take}`;\\n        for (let filter of filters || []) {\\n            queryString += `&${filter.name}=`;\\n            if (filter.key) {\\n                queryString += filter.key + '=' + filter.value;\\n            } else {\\n                queryString += filter.value;\\n            }\\n        }\\n\\n        let response = await this._remoteConnection.get('tagservices', '/nitag/v2/tags-with-values' + queryString);\\n        let data = JSON.parse(response.responseText);\\n\\n        element.data = {\\n            items: this._sortData(data.tagsWithValues, search.sortBy, search.sortOrder),\\n            totalCount: data.totalCount\\n        };\\n    }\\n\\n    _showError (errorHeader) {\\n        this._element.showErrorDialog(errorHeader);\\n    }\\n\\n    _sortData (tagsWithValues, sortBy, sortOrder) {\\n        if (sortBy) {\\n            tagsWithValues.sort((a, b) => {\\n                let aValue = this._getSortByValue(a, sortBy) || '';\\n                let bValue = this._getSortByValue(b, sortBy) || '';\\n                let result = aValue.localeCompare(bValue, undefined, { numeric: true, sensitivity: 'base' });\\n                return sortOrder === 'desc' ? -result : result;\\n            });\\n        }\\n        return tagsWithValues;\\n    }\\n\\n    _getSortByValue (obj, sortBy) {\\n        switch (sortBy) {\\n        case 'path':\\n            return obj.tag.path;\\n        case 'value':\\n            return obj.current ? obj.current.value.value : '';\\n        case 'min':\\n            return obj.aggregates ? obj.aggregates.min : '';\\n        case 'max':\\n            return obj.aggregates ? obj.aggregates.max : '';\\n        case 'mean':\\n            return obj.aggregates ? obj.aggregates.avg : '';\\n        case 'count':\\n            return (obj.aggregates ? obj.aggregates.count : 0).toString();\\n        case 'updated':\\n            return obj.current ? obj.current.timestamp : '';\\n        case 'keywords':\\n            return JSON.stringify(obj.tag.keywords || '');\\n        case 'type':\\n            return obj.tag.type;\\n        case 'collectAggregates':\\n            return (obj.tag.collectAggregates || '').toString();\\n        }\\n    }\\n}\\n\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}