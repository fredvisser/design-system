{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/jqx-ui-elements/demos/grid/paging-advanced/index","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"(function GenerateData() {\\n\\tlet data = new Array();\\n\\tlet firstNames =\\n\\t[\\n\\t\\t\\\"Andrew\\\", \\\"Nancy\\\", \\\"Shelley\\\", \\\"Regina\\\", \\\"Yoshi\\\", \\\"Antoni\\\", \\\"Mayumi\\\", \\\"Ian\\\", \\\"Peter\\\", \\\"Lars\\\", \\\"Petra\\\", \\\"Martin\\\", \\\"Sven\\\", \\\"Elio\\\", \\\"Beate\\\", \\\"Cheryl\\\", \\\"Michael\\\", \\\"Guylene\\\"\\n\\t];\\n\\tlet lastNames =\\n\\t[\\n\\t\\t\\\"Fuller\\\", \\\"Davolio\\\", \\\"Burke\\\", \\\"Murphy\\\", \\\"Nagase\\\", \\\"Saavedra\\\", \\\"Ohno\\\", \\\"Devling\\\", \\\"Wilson\\\", \\\"Peterson\\\", \\\"Winkler\\\", \\\"Bein\\\", \\\"Petersen\\\", \\\"Rossi\\\", \\\"Vileid\\\", \\\"Saylor\\\", \\\"Bjorn\\\", \\\"Nodier\\\"\\n\\t];\\n\\tlet productNames =\\n\\t[\\n\\t\\t\\\"Black Tea\\\", \\\"Green Tea\\\", \\\"Caffe Espresso\\\", \\\"Doubleshot Espresso\\\", \\\"Caffe Latte\\\", \\\"White Chocolate Mocha\\\", \\\"Cramel Latte\\\", \\\"Caffe Americano\\\", \\\"Cappuccino\\\", \\\"Espresso Truffle\\\", \\\"Espresso con Panna\\\", \\\"Peppermint Mocha Twist\\\"\\n\\t];\\n\\tlet priceValues =\\n\\t[\\n\\t\\t\\\"2.25\\\", \\\"1.5\\\", \\\"3.0\\\", \\\"3.3\\\", \\\"4.5\\\", \\\"3.6\\\", \\\"3.8\\\", \\\"2.5\\\", \\\"5.0\\\", \\\"1.75\\\", \\\"3.25\\\", \\\"4.0\\\"\\n\\t];\\n\\n\\tfor (let i = 0; i < 5000; i++) {\\n\\t\\tlet row = {};\\n\\t\\tlet productindex = Math.floor(Math.random() * productNames.length);\\n\\t\\tlet price = parseFloat(priceValues[productindex]);\\n\\t\\tlet quantity = 1 + Math.round(Math.random() * 10);\\n\\t\\trow[\\\"id\\\"] = i;\\n\\t\\trow[\\\"firstName\\\"] = firstNames[Math.floor(Math.random() * firstNames.length)];\\n\\t\\trow[\\\"lastName\\\"] = lastNames[Math.floor(Math.random() * lastNames.length)];\\n\\t\\trow[\\\"productName\\\"] = productNames[productindex];\\n\\t\\trow[\\\"price\\\"] = price;\\n\\t\\trow[\\\"quantity\\\"] = quantity;\\n\\t\\trow[\\\"total\\\"] = price * quantity;\\n\\t\\tdata[i] = row;\\n\\t}\\n\\n\\twindow.Data = data;\\n}());\\n\\nfunction GetData(first, last) {\\n\\treturn Data.slice(first, last);\\n}\\n\\n\\nJQX('#grid', class {\\n\\tget properties() {\\n\\t\\treturn {\\n\\t\\t\\tpaging: {\\n\\t\\t\\t\\tenabled: true,\\n\\t\\t\\t\\tpageSize: 10,\\n\\t\\t\\t\\tpageIndex: 1\\n\\t\\t\\t},\\n\\t\\t\\tpager: {\\n\\t\\t\\t    visible: true,\\n\\t\\t\\t    pageSizeSelector: {\\n                    visible: true\\n\\t\\t\\t    },\\n\\t\\t\\t    pageIndexSelectors: {\\n                    dataSource: 3\\n\\t\\t\\t    }\\n\\t\\t\\t},\\n\\t\\t\\tdataSource: new JQX.DataAdapter(\\n\\t\\t\\t{\\n\\t\\t\\t\\tvirtualDataSourceLength: 5000,\\n\\t\\t\\t\\tvirtualDataSourceCache: true,\\n\\t\\t\\t\\tvirtualDataSource: function(resultCallbackFunction, details){\\n\\t\\t\\t\\t\\tsetTimeout(function() {\\n\\t\\t\\t\\t\\t\\tresultCallbackFunction(\\n\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\tdataSource: GetData(details.first, details.last)\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t}, 100);\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tdataFields:\\n\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\t'id: number',\\n\\t\\t\\t\\t\\t'firstName: string',\\n\\t\\t\\t\\t\\t'lastName: string',\\n\\t\\t\\t\\t\\t'productName: string',\\n\\t\\t\\t\\t\\t'quantity: number',\\n\\t\\t\\t\\t\\t'price: number',\\n\\t\\t\\t\\t\\t'total: number'\\n\\t\\t\\t\\t]\\n\\t\\t\\t}),\\n\\t\\t\\tcolumns: [\\n\\t\\t\\t'id',\\n\\t\\t\\t{\\n\\t\\t\\t\\tlabel: 'First Name', dataField: 'firstName'\\n\\t\\t\\t},\\n\\t\\t\\t{ label: 'Last Name', dataField: 'lastName' },\\n\\t\\t\\t{ label: 'Product', dataField: 'productName'},\\n\\t\\t\\t{ label: 'Quantity',  dataField: 'quantity'},\\n\\t\\t\\t{ label: 'Unit Price',  dataField: 'price', cellsFormat: 'c2' },\\n\\t\\t\\t{ label: 'Total', dataField: 'total', cellsFormat: 'c2' }\\n\\t\\t\\t]        \\n\\t\\t}\\n\\t}\\n});\\n\\nwindow.onload = function () {\\n    const checkBoxes = document.querySelectorAll('jqx-check-box');\\n    const grid = document.querySelector('jqx-grid');\\n\\n    for (let i = 0; i < checkBoxes.length; i++) {\\n        const checkBox = checkBoxes[i];\\n\\n        checkBox.addEventListener('change', function (event) {\\n            switch (this.id) {\\n                case 'showPagerSummary':\\n                    grid.pager.summary.visible = this.checked;\\n                    document.querySelector('#changeSummaryPosition').disabled = !this.checked;\\n                    break;\\n                case 'showTopPager':\\n                case 'showBottomPager':\\n                    const isTopPagerVisible = document.querySelector('#showTopPager').checked;\\n                    const isBottomPagerVisible = document.querySelector('#showBottomPager').checked;\\n\\n                    grid.pager.visible = true;\\n\\n                    if (isTopPagerVisible && isBottomPagerVisible) {\\n                        grid.pager.position = 'both';\\n                    }\\n                    else if (isTopPagerVisible) {\\n                        grid.pager.position = 'near';\\n                    }\\n                    else if (isBottomPagerVisible) {\\n                        grid.pager.position = 'far';\\n                    }\\n                    else {\\n                        grid.pager.visible = false;\\n                    }\\n                    break;\\n                case 'changePageIndexSelectorsCount':\\n                    grid.pager.pageIndexSelectors.dataSource = this.checked ? 3 : 5;\\n                    break;\\n                case 'showPageSizeSelector':\\n                    grid.pager.pageSizeSelector.visible = this.checked;\\n                    document.querySelector('#changePageSizeSelectorPosition').disabled = !this.checked;\\n                    break;\\n                case 'changePageSizeSelectorPosition':\\n                    grid.pager.pageSizeSelector.position = this.checked ? 'near' : 'far';\\n                    break;\\n                case 'changeSummaryPosition':\\n                    grid.pager.summary.position = this.checked ? 'near' : 'far';\\n                    break;\\n                case 'changeNavigationInputPosition':\\n                    grid.pager.navigationInput.position = this.checked ? 'near' : 'far';\\n                    break;\\n                case 'changeNavigationButtonsPosition':\\n                    grid.pager.navigationButtons.position = this.checked ? 'near' : 'both';\\n                    break;\\n                case 'showPrevNextNavigationButtons':\\n                    grid.pager.navigationButtons.prevNextButtons.visible = this.checked;\\n                    if (!grid.pager.navigationButtons.prevNextButtons.visible && !grid.pager.navigationButtons.firstLastButtons.visible) {\\n                        document.querySelector('#changeNavigationButtonsPosition').disabled = true;\\n                        document.querySelector('#showNavigationButtonsAsLabels').disabled = true;\\n                    }\\n                    else {\\n                        document.querySelector('#changeNavigationButtonsPosition').disabled = false;\\n                        document.querySelector('#showNavigationButtonsAsLabels').disabled = false;\\n                    }\\n                    break;\\n                case 'showFirstLastNavigationButtons':\\n                    grid.pager.navigationButtons.firstLastButtons.visible = this.checked;\\n                    if (!grid.pager.navigationButtons.prevNextButtons.visible && !grid.pager.navigationButtons.firstLastButtons.visible) {\\n                        document.querySelector('#changeNavigationButtonsPosition').disabled = true;\\n                        document.querySelector('#showNavigationButtonsAsLabels').disabled = true;\\n                    }\\n                    else {\\n                        document.querySelector('#changeNavigationButtonsPosition').disabled = false;\\n                        document.querySelector('#showNavigationButtonsAsLabels').disabled = false;\\n                    }\\n                    break;\\n                case 'showNavigationButtonsAsLabels':\\n                    grid.pager.navigationButtons.labels.visible = this.checked;\\n                    break;\\n                case 'showNavigationInput':\\n                    document.querySelector('#changeNavigationInputPosition').disabled = !this.checked;\\n                    grid.pager.navigationInput.visible = this.checked;\\n                    break;\\n                case 'showPagerIndexSelectors':\\n                    grid.pager.pageIndexSelectors.visible = this.checked;\\n                    break;\\n                case 'showPagerEllipsis':\\n                    grid.pager.autoEllipsis = this.checked ? 'both' : 'none';\\n                    break;\\n            }\\n        });\\n    }\\n}\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}