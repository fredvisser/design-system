{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/jqx-ui-elements/demos/grid/virtual-scroll-sorting-filtering/index","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"(function GenerateData() {\\n    let data = new Array();\\n    let firstNames =\\n\\t[\\n\\t\\t\\\"Andrew\\\", \\\"Nancy\\\", \\\"Shelley\\\", \\\"Regina\\\", \\\"Yoshi\\\", \\\"Antoni\\\", \\\"Mayumi\\\", \\\"Ian\\\", \\\"Peter\\\", \\\"Lars\\\", \\\"Petra\\\", \\\"Martin\\\", \\\"Sven\\\", \\\"Elio\\\", \\\"Beate\\\", \\\"Cheryl\\\", \\\"Michael\\\", \\\"Guylene\\\"\\n\\t];\\n    let lastNames =\\n\\t[\\n\\t\\t\\\"Fuller\\\", \\\"Davolio\\\", \\\"Burke\\\", \\\"Murphy\\\", \\\"Nagase\\\", \\\"Saavedra\\\", \\\"Ohno\\\", \\\"Devling\\\", \\\"Wilson\\\", \\\"Peterson\\\", \\\"Winkler\\\", \\\"Bein\\\", \\\"Petersen\\\", \\\"Rossi\\\", \\\"Vileid\\\", \\\"Saylor\\\", \\\"Bjorn\\\", \\\"Nodier\\\"\\n\\t];\\n    let productNames =\\n\\t[\\n\\t\\t\\\"Black Tea\\\", \\\"Green Tea\\\", \\\"Caffe Espresso\\\", \\\"Doubleshot Espresso\\\", \\\"Caffe Latte\\\", \\\"White Chocolate Mocha\\\", \\\"Cramel Latte\\\", \\\"Caffe Americano\\\", \\\"Cappuccino\\\", \\\"Espresso Truffle\\\", \\\"Espresso con Panna\\\", \\\"Peppermint Mocha Twist\\\"\\n\\t];\\n    let priceValues =\\n\\t[\\n\\t\\t\\\"2.25\\\", \\\"1.5\\\", \\\"3.0\\\", \\\"3.3\\\", \\\"4.5\\\", \\\"3.6\\\", \\\"3.8\\\", \\\"2.5\\\", \\\"5.0\\\", \\\"1.75\\\", \\\"3.25\\\", \\\"4.0\\\"\\n\\t];\\n\\n    for (let i = 0; i < 100000; i++) {\\n        let row = {};\\n        let productindex = Math.floor(Math.random() * productNames.length);\\n        let price = parseFloat(priceValues[productindex]);\\n        let quantity = 1 + Math.round(Math.random() * 10);\\n        row[\\\"id\\\"] = 1 + i;\\n        row[\\\"firstName\\\"] = firstNames[Math.floor(Math.random() * firstNames.length)];\\n        row[\\\"lastName\\\"] = lastNames[Math.floor(Math.random() * lastNames.length)];\\n        row[\\\"productName\\\"] = productNames[productindex];\\n        row[\\\"price\\\"] = price;\\n        row[\\\"quantity\\\"] = quantity;\\n        row[\\\"total\\\"] = price * quantity;\\n        data[i] = row;\\n    }\\n\\n    window.Data = data;\\n}());\\n\\nfunction GetData(first, last) {\\n    return Data.slice(first, last);\\n}\\n\\n\\nJQX('#grid', class {\\n    get properties() {\\n        return {\\n\\t\\t\\tsorting: {\\n\\t\\t\\t\\tenabled: true\\n\\t\\t\\t},\\n\\t\\t\\tfiltering: {\\n\\t\\t\\t\\tenabled: true\\n\\t\\t\\t},\\n\\t\\t\\tscrollMode: 'virtual',\\n            paging: {\\n         //       enabled: true,\\n                pageSize: 10,\\n                pageIndex: 0\\n\\n            },\\n            pager: {\\n                position: 'far',\\n                visible: true\\n            },\\n            dataSource: new JQX.DataAdapter(\\n\\t\\t\\t{\\n\\t\\t\\t    virtualDataSourceLength: 100000,\\n\\t\\t\\t    virtualDataSourceCache: true,\\n\\t\\t\\t    virtualDataSource: function (resultCallbackFunction, details) {\\n\\t\\t\\t        const that = this;\\n\\t\\t\\t\\n\\t\\t\\t\\t\\tif (that.timer) {\\n\\t\\t\\t\\t\\t\\tclearTimeout(that.timer);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// Timer simulates AJAX data request.\\t\\n\\t\\t\\t\\t\\tthat.timer = setTimeout(function () {\\n\\t\\t\\t\\t\\t\\tlet data = Data.slice(0);\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t/*\\n\\t\\t\\t\\t\\t\\t\\tThe details argument has the following properties: 'sorting', 'filtering', 'grouping' and 'action'.\\n\\t\\t\\t\\t\\t\\t\\tThe 'action' could be 'dataBind', 'scroll', 'sort', 'filter', 'group', 'pageIndexChange' and 'pageSizeChange'.\\n\\t\\t\\t\\t\\t\\t\\t'sorting' is an array with sorted columns and sort orders.\\n\\t\\t\\t\\t\\t\\t\\t'filtering' is an array with filtered columns and JQX.FilterGroup objects.\\n\\t\\t\\t\\t\\t\\t\\t'grouping' is an array of grouped columns.\\n\\t\\t\\t\\t\\t\\t*/\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t// Sorts the data. \\n\\t\\t\\t\\t\\t\\tif (details.sorting.length > 0 && (details.action === 'sort' || details.action === 'dataBind')){\\n\\t\\t\\t\\t\\t\\t\\tlet sortColumns = [];\\n\\t\\t\\t\\t\\t\\t\\tlet sortOrders = [];\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\tfor(let dataField in details.sorting) {\\n\\t\\t\\t\\t\\t\\t\\t\\tconst sortOrder = details.sorting[dataField].sortOrder;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\tsortColumns.push(dataField);\\n\\t\\t\\t\\t\\t\\t\\t\\tsortOrders.push(sortOrder);\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\tthat.sortedData = JQX.DataAdapter.Sort(data, sortColumns, sortOrders);\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse if (details.sorting.length === 0) {\\n\\t\\t\\t\\t\\t\\t\\tthat.sortedData = null;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\tif (that.sortedData) {\\n\\t\\t\\t\\t\\t\\t\\tdata = that.sortedData;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t// Filters the data.\\n\\t\\t\\t\\t\\t\\tif (details.filtering.length > 0 && (details.action === 'sort' || details.action === 'filter' || details.action === 'dataBind')) {\\n\\t\\t\\t\\t\\t\\t\\tlet filterColumns = [];\\n\\t\\t\\t\\t\\t\\t\\tlet filters = [];\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\tfor(let dataField in details.filtering) {\\n\\t\\t\\t\\t\\t\\t\\t\\tconst filter = details.filtering[dataField];\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\tfilterColumns.push(dataField);\\n\\t\\t\\t\\t\\t\\t\\t\\tfilters.push(filter);\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\tthat.filteredData = JQX.DataAdapter.Filter(data, filterColumns, filters);\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse if (details.filtering.length === 0) {\\n\\t\\t\\t\\t\\t\\t\\tthat.filteredData = null;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\tif (that.filteredData) {\\n\\t\\t\\t\\t\\t\\t\\tdata = that.filteredData;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t   \\n\\t\\t\\t\\t\\t   // This callback returns the data to be displayed in the Grid. If virtualDataSourceLength is changed, updates the scroll height and pages count, too.\\n\\t\\t\\t\\t\\t   resultCallbackFunction(\\n\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t    dataSource: data.slice(details.first, details.last),\\n\\t\\t\\t\\t\\t\\t\\t\\tvirtualDataSourceLength: data.length\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t        }, 100);\\n\\t\\t\\t    },\\n\\t\\t\\t    dataFields:\\n\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\t'id: number',\\n\\t\\t\\t\\t\\t'firstName: string',\\n\\t\\t\\t\\t\\t'lastName: string',\\n\\t\\t\\t\\t\\t'productName: string',\\n\\t\\t\\t\\t\\t'quantity: number',\\n\\t\\t\\t\\t\\t'price: number',\\n\\t\\t\\t\\t\\t'total: number'\\n\\t\\t\\t\\t]\\n\\t\\t\\t}),\\n            columns: [\\n\\t\\t\\t'id',\\n\\t\\t\\t{\\n\\t\\t\\t    label: 'First Name', dataField: 'firstName'\\n\\t\\t\\t},\\n\\t\\t\\t{ label: 'Last Name', dataField: 'lastName' },\\n\\t\\t\\t{ label: 'Product', dataField: 'productName' },\\n\\t\\t\\t{ label: 'Quantity', dataField: 'quantity' },\\n\\t\\t\\t{ label: 'Unit Price', dataField: 'price', cellsFormat: 'c2' },\\n\\t\\t\\t{ label: 'Total', dataField: 'total', cellsFormat: 'c2' }\\n            ]\\n        }\\n    }\\n});\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}