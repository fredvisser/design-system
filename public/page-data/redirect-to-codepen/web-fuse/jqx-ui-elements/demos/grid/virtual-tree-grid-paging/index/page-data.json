{"componentChunkName":"component---node-modules-gatsby-remark-code-repls-default-redirect-template-js","path":"/redirect-to-codepen/web-fuse/jqx-ui-elements/demos/grid/virtual-tree-grid-paging/index","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"function GetData() {\\n\\tconst data = new Array();\\n\\tconst generatekey = function () {\\n\\t\\tconst S4 = function () {\\n\\t\\t\\treturn (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\\n\\t\\t};\\n\\t\\treturn (S4() + S4() + \\\"-\\\" + S4() + \\\"-\\\" + S4() + \\\"-\\\" + S4() + \\\"-\\\" + S4() + S4() + S4());\\n\\t};\\n\\t\\n\\tfor (let i = 0; i < 100; i++) {\\n\\t\\tconst row = {};\\n\\t\\tconst tasks = [\\\"Shopping\\\", \\\"Housewares\\\", \\\"Kitchen supplies\\\", \\\"Groceries\\\", \\\"Cleaning supplies\\\", \\\"Office supplies\\\", \\\"Remodeling\\\", \\\"Paint bedroom\\\", \\\"Paint wall\\\", \\\"Fitness\\\", \\\"Decorate living room\\\",\\n\\t\\t\\t\\\"Fix lights\\\", \\\"Fix front door\\\", \\\"Clean kitchen\\\"];\\n\\t\\tconst firstNames =\\n\\t\\t[\\n\\t\\t\\t\\\"Andrew\\\", \\\"Nancy\\\", \\\"Shelley\\\", \\\"Regina\\\", \\\"Yoshi\\\", \\\"Antoni\\\", \\\"Mayumi\\\", \\\"Ian\\\", \\\"Peter\\\", \\\"Lars\\\", \\\"Petra\\\", \\\"Martin\\\", \\\"Sven\\\", \\\"Elio\\\", \\\"Beate\\\", \\\"Cheryl\\\", \\\"Michael\\\", \\\"Guylene\\\"\\n\\t\\t];\\n\\t\\tconst lastNames =\\n\\t\\t[\\n\\t\\t\\t\\\"Fuller\\\", \\\"Davolio\\\", \\\"Burke\\\", \\\"Murphy\\\", \\\"Nagase\\\", \\\"Saavedra\\\", \\\"Ohno\\\", \\\"Devling\\\", \\\"Wilson\\\", \\\"Peterson\\\", \\\"Winkler\\\", \\\"Bein\\\", \\\"Petersen\\\", \\\"Rossi\\\", \\\"Vileid\\\", \\\"Saylor\\\", \\\"Bjorn\\\", \\\"Nodier\\\"\\n\\t\\t];\\n\\t\\tconst taskindex = Math.floor(Math.random() * tasks.length);\\n\\t\\n\\t\\trow[\\\"id\\\"] = generatekey();\\n\\t\\trow[\\\"firstname\\\"] = firstNames[Math.floor(Math.random() * firstNames.length)];\\n\\t\\trow[\\\"lastname\\\"] = lastNames[Math.floor(Math.random() * lastNames.length)];\\n\\t\\trow[\\\"name\\\"] = row[\\\"firstname\\\"] + \\\" \\\" + row[\\\"lastname\\\"];\\n\\t\\trow[\\\"task\\\"] = tasks[taskindex];\\n\\t\\trow[\\\"duration\\\"] = 1 + Math.floor(Math.random() * 10);\\n\\t\\n\\t\\tdata.push(row);\\n\\t}\\n\\treturn data;\\n}\\n\\nJQX('#grid', class {\\n    get properties() {\\n        return {\\n            dataSource: new JQX.DataAdapter(\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\tvirtualDataSourceLength: 7,\\n\\t\\t\\t\\t    virtualDataSourceCache: true,\\n\\t\\t\\t\\t\\tvirtualDataSourceOnExpand: function (resultCallbackFunction, details) {\\n\\t\\t\\t\\t\\t\\tsetTimeout(function() {\\t\\n\\t\\t\\t\\t\\t\\t\\tconst data = GetData().slice(0, 2);\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\tif (details.row.level === 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tfor(let i = 0; i < data.length; i++) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdata[i].leaf = true;\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\tresultCallbackFunction(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdataSource: data\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\tresultCallbackFunction(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdataSource: data\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}, 300);\\n \\t\\t\\t\\t },\\n\\t\\t\\t\\t virtualDataSource: function (resultCallbackFunction, details) {\\n\\t\\t\\t\\t\\tsetTimeout(function() {\\t\\n\\t\\t\\t\\t\\t\\tresultCallbackFunction(\\n\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t    dataSource: GetData().slice(details.first, details.last)\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t}, 300);\\n\\t\\t\\t    },\\n                id: 'id',\\n\\t\\t\\t    dataFields:\\n                    [\\n                        'id: string',\\n                        'name: string',\\n                        'duration: number',\\n                        'task: string'\\n                    ]\\n            }),\\n\\t\\t\\tpaging: {\\n\\t\\t\\t\\tenabled: true,\\n\\t\\t\\t\\tpageSize: 2\\n\\t\\t\\t},\\n\\t\\t\\tpager: {\\n\\t\\t\\t\\tvisible: true\\n\\t\\t\\t},\\n            columnResizeMode: 'nextColumn',\\n            columns: [\\n\\t\\t\\t\\t{ label: 'Task', dataField: \\\"task\\\", align: 'center', width: 300 },\\n\\t\\t\\t\\t{ label: 'Person Name', dataField: \\\"name\\\", cellsAlign: 'center', align: 'center', width: 300 },\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tlabel: 'Duration', dataField: \\\"duration\\\", cellsAlign: 'center', align: 'center', formatFunction: function (row, column, value) {\\n\\t\\t\\t\\t\\t\\tconst hour = value > 1 ? \\\" hours\\\" : \\\" hour\\\";\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\treturn value + hour;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\t\\n            ]\\n        }\\n    }\\n});\",\"js_external\":\"\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}